/*
 * generated by Xtext 2.11.0
 */
package org.xtext.example.siddhi.scoping


/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SiddhiScopeProvider extends AbstractSiddhiScopeProvider {
	override getScope(EObject context, EReference reference) {
		//scope the feature names
		if (reference === SiddhiQLPackage.eINSTANCE.attributeNameReference_AttrName1 || reference === SiddhiQLPackage.eINSTANCE.attributeReference_Attr_name) {
			val execPlan = EcoreUtil2.getContainerOfType(context, ExecutionPlan)
			if (execPlan !== null) {
				val scope = <Features>newArrayList()
				
				scope.addAll(execPlan.defStream.map[feature].flatten)
				scope.addAll(execPlan.defTable.map[feature].flatten)
				return Scopes.scopeFor(scope)									
			}
			/*else if(!execPlan.def_table.empty){
				return Scopes.scopeFor(execPlan.def_table.map[feature].flatten)
			}*/
		}
		else if(reference === SiddhiQLPackage.eINSTANCE.featuresOrOutAttrReference_SrcoutAttrref){//scope feature names and user defined words with as keyword
			val execPlan = EcoreUtil2.getContainerOfType(context, ExecutionPlan)
			if (execPlan !== null) {
				val candidates = EcoreUtil2.getAllContentsOfType(execPlan,OutAttr)
				val scope = <FeaturesOrOutAttr>newArrayList()
				
				scope.addAll(candidates)
				scope.addAll(execPlan.defStream.map[feature].flatten)
				scope.addAll(execPlan.defTable.map[feature].flatten)
				
				return Scopes.scopeFor(scope)
			}
		}
		else if (reference === SiddhiQLPackage.eINSTANCE.source_StrId  ){//scope user defined stream and table names
			val execPlan = EcoreUtil2.getContainerOfType(context, ExecutionPlan)
				if (execPlan !== null) {
					val candidates = EcoreUtil2.getAllContentsOfType(execPlan,Source1)
					
					val scope = <Source1>newArrayList()
					
					scope.addAll(candidates)
					//scope.addAll(execPlan.defStream.map[src])
					//scope.addAll(execPlan.defTable.map[src])
										
					return Scopes.scopeFor(scope)
				}
				
		}
		else if(reference === SiddhiQLPackage.eINSTANCE.sourceOrEventReference_Na || reference === SiddhiQLPackage.eINSTANCE.attributeReference_Name1 || reference === SiddhiQLPackage.eINSTANCE.attributeReference_Name2){	//scope stream,table names and event names				
			val execPlan = EcoreUtil2.getContainerOfType(context,ExecutionPlan)	
			if(execPlan !== null){		
				val candidates = EcoreUtil2.getAllContentsOfType(execPlan,StandardStatefulSource)
				
				val scope = <Source1OrStandardStatefulSource>newArrayList()
						
				scope.addAll(candidates)
				scope.addAll(execPlan.defStream.map[src])
				scope.addAll(execPlan.defTable.map[src])
									
				return Scopes.scopeFor(scope)				
			}
			
		}
		else {
			return IScope.NULLSCOPE;
	    }
				
		//super.getScope(context, reference)
	}

}
