/*
 * generated by Xtext 2.11.0
 */
package org.xtext.example.siddhi.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SiddhiGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SiddhiQLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SiddhiQL");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsExecutionPlanParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//SiddhiQL:
		//	elements+=ExecutionPlan*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=ExecutionPlan*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//ExecutionPlan
		public RuleCall getElementsExecutionPlanParserRuleCall_0() { return cElementsExecutionPlanParserRuleCall_0; }
	}
	public class ExecutionPlanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ExecutionPlan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAppAnnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAppAnnAppAnnotationParserRuleCall_0_0 = (RuleCall)cAppAnnAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cDefStreamAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDefStreamDefinitionStreamParserRuleCall_1_0_0_0 = (RuleCall)cDefStreamAssignment_1_0_0.eContents().get(0);
		private final Assignment cDefTableAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cDefTableDefinitionTableParserRuleCall_1_0_1_0 = (RuleCall)cDefTableAssignment_1_0_1.eContents().get(0);
		private final Assignment cDef_windowAssignment_1_0_2 = (Assignment)cAlternatives_1_0.eContents().get(2);
		private final RuleCall cDef_windowDefinitionWindowParserRuleCall_1_0_2_0 = (RuleCall)cDef_windowAssignment_1_0_2.eContents().get(0);
		private final Assignment cDefTriggerAssignment_1_0_3 = (Assignment)cAlternatives_1_0.eContents().get(3);
		private final RuleCall cDefTriggerDefinitionTriggerParserRuleCall_1_0_3_0 = (RuleCall)cDefTriggerAssignment_1_0_3.eContents().get(0);
		private final Assignment cDefFunctionAssignment_1_0_4 = (Assignment)cAlternatives_1_0.eContents().get(4);
		private final RuleCall cDefFunctionDefinitionFunctionParserRuleCall_1_0_4_0 = (RuleCall)cDefFunctionAssignment_1_0_4.eContents().get(0);
		private final Assignment cDefAgrregationAssignment_1_0_5 = (Assignment)cAlternatives_1_0.eContents().get(5);
		private final RuleCall cDefAgrregationDefinitionAggregationParserRuleCall_1_0_5_0 = (RuleCall)cDefAgrregationAssignment_1_0_5.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_1 = (Alternatives)cGroup_1_1_0.eContents().get(1);
		private final Assignment cDefStreamAssignment_1_1_0_1_0 = (Assignment)cAlternatives_1_1_0_1.eContents().get(0);
		private final RuleCall cDefStreamDefinitionStreamParserRuleCall_1_1_0_1_0_0 = (RuleCall)cDefStreamAssignment_1_1_0_1_0.eContents().get(0);
		private final Assignment cDefTableAssignment_1_1_0_1_1 = (Assignment)cAlternatives_1_1_0_1.eContents().get(1);
		private final RuleCall cDefTableDefinitionTableParserRuleCall_1_1_0_1_1_0 = (RuleCall)cDefTableAssignment_1_1_0_1_1.eContents().get(0);
		private final Assignment cDef_windowAssignment_1_1_0_1_2 = (Assignment)cAlternatives_1_1_0_1.eContents().get(2);
		private final RuleCall cDef_windowDefinitionWindowParserRuleCall_1_1_0_1_2_0 = (RuleCall)cDef_windowAssignment_1_1_0_1_2.eContents().get(0);
		private final Assignment cDefTriggerAssignment_1_1_0_1_3 = (Assignment)cAlternatives_1_1_0_1.eContents().get(3);
		private final RuleCall cDefTriggerDefinitionTriggerParserRuleCall_1_1_0_1_3_0 = (RuleCall)cDefTriggerAssignment_1_1_0_1_3.eContents().get(0);
		private final Assignment cDefFunctionAssignment_1_1_0_1_4 = (Assignment)cAlternatives_1_1_0_1.eContents().get(4);
		private final RuleCall cDefFunctionDefinitionFunctionParserRuleCall_1_1_0_1_4_0 = (RuleCall)cDefFunctionAssignment_1_1_0_1_4.eContents().get(0);
		private final Assignment cDefAgrregationAssignment_1_1_0_1_5 = (Assignment)cAlternatives_1_1_0_1.eContents().get(5);
		private final RuleCall cDefAgrregationDefinitionAggregationParserRuleCall_1_1_0_1_5_0 = (RuleCall)cDefAgrregationAssignment_1_1_0_1_5.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Group cGroup_1_2_0 = (Group)cGroup_1_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_2_0_0 = (Keyword)cGroup_1_2_0.eContents().get(0);
		private final Assignment cExElementAssignment_1_2_0_1 = (Assignment)cGroup_1_2_0.eContents().get(1);
		private final RuleCall cExElementExecutionElementParserRuleCall_1_2_0_1_0 = (RuleCall)cExElementAssignment_1_2_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//ExecutionPlan:
		//	appAnn+=AppAnnotation* ((=> defStream+=DefinitionStream | => defTable+=DefinitionTable | =>
		//	def_window+=DefinitionWindow | => defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | =>
		//	defAgrregation+=DefinitionAggregation) => (';' (=> defStream+=DefinitionStream | => defTable+=DefinitionTable | =>
		//	def_window+=DefinitionWindow | => defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | =>
		//	defAgrregation+=DefinitionAggregation))*
		//	=> (';' exElement+=ExecutionElement)* ';'?);
		@Override public ParserRule getRule() { return rule; }
		
		//appAnn+=AppAnnotation* ((=> defStream+=DefinitionStream | => defTable+=DefinitionTable | => def_window+=DefinitionWindow
		//| => defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | => defAgrregation+=DefinitionAggregation) =>
		//(';' (=> defStream+=DefinitionStream | => defTable+=DefinitionTable | => def_window+=DefinitionWindow | =>
		//defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | => defAgrregation+=DefinitionAggregation))* =>
		//(';' exElement+=ExecutionElement)* ';'?)
		public Group getGroup() { return cGroup; }
		
		//appAnn+=AppAnnotation*
		public Assignment getAppAnnAssignment_0() { return cAppAnnAssignment_0; }
		
		//AppAnnotation
		public RuleCall getAppAnnAppAnnotationParserRuleCall_0_0() { return cAppAnnAppAnnotationParserRuleCall_0_0; }
		
		//(=> defStream+=DefinitionStream | => defTable+=DefinitionTable | => def_window+=DefinitionWindow | =>
		//defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | => defAgrregation+=DefinitionAggregation) => (';'
		//(=> defStream+=DefinitionStream | => defTable+=DefinitionTable | => def_window+=DefinitionWindow | =>
		//defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | => defAgrregation+=DefinitionAggregation))* =>
		//(';' exElement+=ExecutionElement)* ';'?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> defStream+=DefinitionStream | => defTable+=DefinitionTable | => def_window+=DefinitionWindow | =>
		//defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | => defAgrregation+=DefinitionAggregation
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//=> defStream+=DefinitionStream
		public Assignment getDefStreamAssignment_1_0_0() { return cDefStreamAssignment_1_0_0; }
		
		//DefinitionStream
		public RuleCall getDefStreamDefinitionStreamParserRuleCall_1_0_0_0() { return cDefStreamDefinitionStreamParserRuleCall_1_0_0_0; }
		
		//=> defTable+=DefinitionTable
		public Assignment getDefTableAssignment_1_0_1() { return cDefTableAssignment_1_0_1; }
		
		//DefinitionTable
		public RuleCall getDefTableDefinitionTableParserRuleCall_1_0_1_0() { return cDefTableDefinitionTableParserRuleCall_1_0_1_0; }
		
		//=> def_window+=DefinitionWindow
		public Assignment getDef_windowAssignment_1_0_2() { return cDef_windowAssignment_1_0_2; }
		
		//DefinitionWindow
		public RuleCall getDef_windowDefinitionWindowParserRuleCall_1_0_2_0() { return cDef_windowDefinitionWindowParserRuleCall_1_0_2_0; }
		
		//=> defTrigger+=DefinitionTrigger
		public Assignment getDefTriggerAssignment_1_0_3() { return cDefTriggerAssignment_1_0_3; }
		
		//DefinitionTrigger
		public RuleCall getDefTriggerDefinitionTriggerParserRuleCall_1_0_3_0() { return cDefTriggerDefinitionTriggerParserRuleCall_1_0_3_0; }
		
		//=> defFunction+=DefinitionFunction
		public Assignment getDefFunctionAssignment_1_0_4() { return cDefFunctionAssignment_1_0_4; }
		
		//DefinitionFunction
		public RuleCall getDefFunctionDefinitionFunctionParserRuleCall_1_0_4_0() { return cDefFunctionDefinitionFunctionParserRuleCall_1_0_4_0; }
		
		//=> defAgrregation+=DefinitionAggregation
		public Assignment getDefAgrregationAssignment_1_0_5() { return cDefAgrregationAssignment_1_0_5; }
		
		//DefinitionAggregation
		public RuleCall getDefAgrregationDefinitionAggregationParserRuleCall_1_0_5_0() { return cDefAgrregationDefinitionAggregationParserRuleCall_1_0_5_0; }
		
		//=> (';' (=> defStream+=DefinitionStream | => defTable+=DefinitionTable | => def_window+=DefinitionWindow | =>
		//defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | => defAgrregation+=DefinitionAggregation))*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//';' (=> defStream+=DefinitionStream | => defTable+=DefinitionTable | => def_window+=DefinitionWindow | =>
		//defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | => defAgrregation+=DefinitionAggregation)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_1_0_0() { return cSemicolonKeyword_1_1_0_0; }
		
		//=> defStream+=DefinitionStream | => defTable+=DefinitionTable | => def_window+=DefinitionWindow | =>
		//defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | => defAgrregation+=DefinitionAggregation
		public Alternatives getAlternatives_1_1_0_1() { return cAlternatives_1_1_0_1; }
		
		//=> defStream+=DefinitionStream
		public Assignment getDefStreamAssignment_1_1_0_1_0() { return cDefStreamAssignment_1_1_0_1_0; }
		
		//DefinitionStream
		public RuleCall getDefStreamDefinitionStreamParserRuleCall_1_1_0_1_0_0() { return cDefStreamDefinitionStreamParserRuleCall_1_1_0_1_0_0; }
		
		//=> defTable+=DefinitionTable
		public Assignment getDefTableAssignment_1_1_0_1_1() { return cDefTableAssignment_1_1_0_1_1; }
		
		//DefinitionTable
		public RuleCall getDefTableDefinitionTableParserRuleCall_1_1_0_1_1_0() { return cDefTableDefinitionTableParserRuleCall_1_1_0_1_1_0; }
		
		//=> def_window+=DefinitionWindow
		public Assignment getDef_windowAssignment_1_1_0_1_2() { return cDef_windowAssignment_1_1_0_1_2; }
		
		//DefinitionWindow
		public RuleCall getDef_windowDefinitionWindowParserRuleCall_1_1_0_1_2_0() { return cDef_windowDefinitionWindowParserRuleCall_1_1_0_1_2_0; }
		
		//=> defTrigger+=DefinitionTrigger
		public Assignment getDefTriggerAssignment_1_1_0_1_3() { return cDefTriggerAssignment_1_1_0_1_3; }
		
		//DefinitionTrigger
		public RuleCall getDefTriggerDefinitionTriggerParserRuleCall_1_1_0_1_3_0() { return cDefTriggerDefinitionTriggerParserRuleCall_1_1_0_1_3_0; }
		
		//=> defFunction+=DefinitionFunction
		public Assignment getDefFunctionAssignment_1_1_0_1_4() { return cDefFunctionAssignment_1_1_0_1_4; }
		
		//DefinitionFunction
		public RuleCall getDefFunctionDefinitionFunctionParserRuleCall_1_1_0_1_4_0() { return cDefFunctionDefinitionFunctionParserRuleCall_1_1_0_1_4_0; }
		
		//=> defAgrregation+=DefinitionAggregation
		public Assignment getDefAgrregationAssignment_1_1_0_1_5() { return cDefAgrregationAssignment_1_1_0_1_5; }
		
		//DefinitionAggregation
		public RuleCall getDefAgrregationDefinitionAggregationParserRuleCall_1_1_0_1_5_0() { return cDefAgrregationDefinitionAggregationParserRuleCall_1_1_0_1_5_0; }
		
		//=> (';' exElement+=ExecutionElement)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//';' exElement+=ExecutionElement
		public Group getGroup_1_2_0() { return cGroup_1_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1_2_0_0() { return cSemicolonKeyword_1_2_0_0; }
		
		//exElement+=ExecutionElement
		public Assignment getExElementAssignment_1_2_0_1() { return cExElementAssignment_1_2_0_1; }
		
		//ExecutionElement
		public RuleCall getExElementExecutionElementParserRuleCall_1_2_0_1_0() { return cExElementExecutionElementParserRuleCall_1_2_0_1_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}
	public class ExecutionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ExecutionElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExecPartitionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExecPartitionExecPartitionParserRuleCall_0_0_0 = (RuleCall)cExecPartitionAssignment_0_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cQueAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cQueQueryParserRuleCall_1_0_0 = (RuleCall)cQueAssignment_1_0.eContents().get(0);
		
		//ExecutionElement:
		//	=> (execPartition=ExecPartition) | => (que=Query);
		@Override public ParserRule getRule() { return rule; }
		
		//=> (execPartition=ExecPartition) | => (que=Query)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (execPartition=ExecPartition)
		public Group getGroup_0() { return cGroup_0; }
		
		//execPartition=ExecPartition
		public Assignment getExecPartitionAssignment_0_0() { return cExecPartitionAssignment_0_0; }
		
		//ExecPartition
		public RuleCall getExecPartitionExecPartitionParserRuleCall_0_0_0() { return cExecPartitionExecPartitionParserRuleCall_0_0_0; }
		
		//=> (que=Query)
		public Group getGroup_1() { return cGroup_1; }
		
		//que=Query
		public Assignment getQueAssignment_1_0() { return cQueAssignment_1_0; }
		
		//Query
		public RuleCall getQueQueryParserRuleCall_1_0_0() { return cQueQueryParserRuleCall_1_0_0; }
	}
	public class DefinitionStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DefinitionStream");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinitionStreamAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnAnnotationParserRuleCall_1_0 = (RuleCall)cAnnAssignment_1.eContents().get(0);
		private final RuleCall cDEFINEParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final RuleCall cSTREAMParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cTABLEParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final Assignment cSrcAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSrcSource1ParserRuleCall_4_0 = (RuleCall)cSrcAssignment_4.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cFeatureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFeatureFeaturesParserRuleCall_6_0 = (RuleCall)cFeatureAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFeatureAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFeatureFeaturesParserRuleCall_7_1_0 = (RuleCall)cFeatureAssignment_7_1.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//DefinitionStream:
		//	{DefinitionStream} ann+=Annotation* DEFINE (STREAM | TABLE) src=Source1 OPEN_PAR feature+=Features (','
		//	feature+=Features)* CLOSE_PAR;
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinitionStream} ann+=Annotation* DEFINE (STREAM | TABLE) src=Source1 OPEN_PAR feature+=Features (','
		//feature+=Features)* CLOSE_PAR
		public Group getGroup() { return cGroup; }
		
		//{DefinitionStream}
		public Action getDefinitionStreamAction_0() { return cDefinitionStreamAction_0; }
		
		//ann+=Annotation*
		public Assignment getAnnAssignment_1() { return cAnnAssignment_1; }
		
		//Annotation
		public RuleCall getAnnAnnotationParserRuleCall_1_0() { return cAnnAnnotationParserRuleCall_1_0; }
		
		//DEFINE
		public RuleCall getDEFINEParserRuleCall_2() { return cDEFINEParserRuleCall_2; }
		
		//STREAM | TABLE
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//STREAM
		public RuleCall getSTREAMParserRuleCall_3_0() { return cSTREAMParserRuleCall_3_0; }
		
		//TABLE
		public RuleCall getTABLEParserRuleCall_3_1() { return cTABLEParserRuleCall_3_1; }
		
		//src=Source1
		public Assignment getSrcAssignment_4() { return cSrcAssignment_4; }
		
		//Source1
		public RuleCall getSrcSource1ParserRuleCall_4_0() { return cSrcSource1ParserRuleCall_4_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_5() { return cOPEN_PARParserRuleCall_5; }
		
		//feature+=Features
		public Assignment getFeatureAssignment_6() { return cFeatureAssignment_6; }
		
		//Features
		public RuleCall getFeatureFeaturesParserRuleCall_6_0() { return cFeatureFeaturesParserRuleCall_6_0; }
		
		//(',' feature+=Features)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//feature+=Features
		public Assignment getFeatureAssignment_7_1() { return cFeatureAssignment_7_1; }
		
		//Features
		public RuleCall getFeatureFeaturesParserRuleCall_7_1_0() { return cFeatureFeaturesParserRuleCall_7_1_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_8() { return cCLOSE_PARParserRuleCall_8; }
	}
	public class DefinitionTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DefinitionTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinitionTableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnn1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnn1AnnotationParserRuleCall_1_0 = (RuleCall)cAnn1Assignment_1.eContents().get(0);
		private final RuleCall cDEFINEParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTABLEParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cSrcAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSrcSource1ParserRuleCall_4_0 = (RuleCall)cSrcAssignment_4.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cFeatureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFeatureFeaturesParserRuleCall_6_0 = (RuleCall)cFeatureAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFeatureAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFeatureFeaturesParserRuleCall_7_1_0 = (RuleCall)cFeatureAssignment_7_1.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//DefinitionTable:
		//	{DefinitionTable} ann1+=Annotation* DEFINE TABLE src=Source1 OPEN_PAR feature+=Features (',' feature+=Features)*
		//	CLOSE_PAR;
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinitionTable} ann1+=Annotation* DEFINE TABLE src=Source1 OPEN_PAR feature+=Features (',' feature+=Features)*
		//CLOSE_PAR
		public Group getGroup() { return cGroup; }
		
		//{DefinitionTable}
		public Action getDefinitionTableAction_0() { return cDefinitionTableAction_0; }
		
		//ann1+=Annotation*
		public Assignment getAnn1Assignment_1() { return cAnn1Assignment_1; }
		
		//Annotation
		public RuleCall getAnn1AnnotationParserRuleCall_1_0() { return cAnn1AnnotationParserRuleCall_1_0; }
		
		//DEFINE
		public RuleCall getDEFINEParserRuleCall_2() { return cDEFINEParserRuleCall_2; }
		
		//TABLE
		public RuleCall getTABLEParserRuleCall_3() { return cTABLEParserRuleCall_3; }
		
		//src=Source1
		public Assignment getSrcAssignment_4() { return cSrcAssignment_4; }
		
		//Source1
		public RuleCall getSrcSource1ParserRuleCall_4_0() { return cSrcSource1ParserRuleCall_4_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_5() { return cOPEN_PARParserRuleCall_5; }
		
		//feature+=Features
		public Assignment getFeatureAssignment_6() { return cFeatureAssignment_6; }
		
		//Features
		public RuleCall getFeatureFeaturesParserRuleCall_6_0() { return cFeatureFeaturesParserRuleCall_6_0; }
		
		//(',' feature+=Features)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//feature+=Features
		public Assignment getFeatureAssignment_7_1() { return cFeatureAssignment_7_1; }
		
		//Features
		public RuleCall getFeatureFeaturesParserRuleCall_7_1_0() { return cFeatureFeaturesParserRuleCall_7_1_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_8() { return cCLOSE_PARParserRuleCall_8; }
	}
	public class DefinitionWindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DefinitionWindow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinitionWindowAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnn2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnn2AnnotationParserRuleCall_1_0 = (RuleCall)cAnn2Assignment_1.eContents().get(0);
		private final RuleCall cDEFINEParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cWINDOWParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cSrcAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSrcSource1ParserRuleCall_4_0 = (RuleCall)cSrcAssignment_4.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cFeatureAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFeatureFeaturesParserRuleCall_6_0 = (RuleCall)cFeatureAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFeatureAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFeatureFeaturesParserRuleCall_7_1_0 = (RuleCall)cFeatureAssignment_7_1.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cFuncOpAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cFuncOpFunctionOperationParserRuleCall_9_0 = (RuleCall)cFuncOpAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final RuleCall cOUTPUTParserRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Assignment cOpEventTypeAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cOpEventTypeOutputEventTypeParserRuleCall_10_1_0 = (RuleCall)cOpEventTypeAssignment_10_1.eContents().get(0);
		
		//DefinitionWindow:
		//	{DefinitionWindow} ann2+=Annotation* DEFINE WINDOW src=Source1 OPEN_PAR feature+=Features (',' feature+=Features)*
		//	CLOSE_PAR funcOp=FunctionOperation (OUTPUT opEventType=OutputEventType)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinitionWindow} ann2+=Annotation* DEFINE WINDOW src=Source1 OPEN_PAR feature+=Features (',' feature+=Features)*
		//CLOSE_PAR funcOp=FunctionOperation (OUTPUT opEventType=OutputEventType)?
		public Group getGroup() { return cGroup; }
		
		//{DefinitionWindow}
		public Action getDefinitionWindowAction_0() { return cDefinitionWindowAction_0; }
		
		//ann2+=Annotation*
		public Assignment getAnn2Assignment_1() { return cAnn2Assignment_1; }
		
		//Annotation
		public RuleCall getAnn2AnnotationParserRuleCall_1_0() { return cAnn2AnnotationParserRuleCall_1_0; }
		
		//DEFINE
		public RuleCall getDEFINEParserRuleCall_2() { return cDEFINEParserRuleCall_2; }
		
		//WINDOW
		public RuleCall getWINDOWParserRuleCall_3() { return cWINDOWParserRuleCall_3; }
		
		//src=Source1
		public Assignment getSrcAssignment_4() { return cSrcAssignment_4; }
		
		//Source1
		public RuleCall getSrcSource1ParserRuleCall_4_0() { return cSrcSource1ParserRuleCall_4_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_5() { return cOPEN_PARParserRuleCall_5; }
		
		//feature+=Features
		public Assignment getFeatureAssignment_6() { return cFeatureAssignment_6; }
		
		//Features
		public RuleCall getFeatureFeaturesParserRuleCall_6_0() { return cFeatureFeaturesParserRuleCall_6_0; }
		
		//(',' feature+=Features)*
		public Group getGroup_7() { return cGroup_7; }
		
		//','
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }
		
		//feature+=Features
		public Assignment getFeatureAssignment_7_1() { return cFeatureAssignment_7_1; }
		
		//Features
		public RuleCall getFeatureFeaturesParserRuleCall_7_1_0() { return cFeatureFeaturesParserRuleCall_7_1_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_8() { return cCLOSE_PARParserRuleCall_8; }
		
		//funcOp=FunctionOperation
		public Assignment getFuncOpAssignment_9() { return cFuncOpAssignment_9; }
		
		//FunctionOperation
		public RuleCall getFuncOpFunctionOperationParserRuleCall_9_0() { return cFuncOpFunctionOperationParserRuleCall_9_0; }
		
		//(OUTPUT opEventType=OutputEventType)?
		public Group getGroup_10() { return cGroup_10; }
		
		//OUTPUT
		public RuleCall getOUTPUTParserRuleCall_10_0() { return cOUTPUTParserRuleCall_10_0; }
		
		//opEventType=OutputEventType
		public Assignment getOpEventTypeAssignment_10_1() { return cOpEventTypeAssignment_10_1; }
		
		//OutputEventType
		public RuleCall getOpEventTypeOutputEventTypeParserRuleCall_10_1_0() { return cOpEventTypeOutputEventTypeParserRuleCall_10_1_0; }
	}
	public class DefinitionTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DefinitionTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinitionTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDEFINEParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cTRIGGERParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cTnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTnTriggerNameParserRuleCall_2_0 = (RuleCall)cTnAssignment_2.eContents().get(0);
		private final RuleCall cATParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cAlternatives_4.eContents().get(0);
		private final Assignment cEveryAssignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cEveryEVERYParserRuleCall_4_0_0_0 = (RuleCall)cEveryAssignment_4_0_0.eContents().get(0);
		private final Assignment cTvAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cTvTimeValueParserRuleCall_4_0_1_0 = (RuleCall)cTvAssignment_4_0_1.eContents().get(0);
		private final Assignment cSvAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cSvStringValueParserRuleCall_4_1_0 = (RuleCall)cSvAssignment_4_1.eContents().get(0);
		
		//DefinitionTrigger:
		//	{DefinitionTrigger} (DEFINE TRIGGER) tn=TriggerName AT (every=EVERY tv=TimeValue | sv=StringValue);
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinitionTrigger} (DEFINE TRIGGER) tn=TriggerName AT (every=EVERY tv=TimeValue | sv=StringValue)
		public Group getGroup() { return cGroup; }
		
		//{DefinitionTrigger}
		public Action getDefinitionTriggerAction_0() { return cDefinitionTriggerAction_0; }
		
		//DEFINE TRIGGER
		public Group getGroup_1() { return cGroup_1; }
		
		//DEFINE
		public RuleCall getDEFINEParserRuleCall_1_0() { return cDEFINEParserRuleCall_1_0; }
		
		//TRIGGER
		public RuleCall getTRIGGERParserRuleCall_1_1() { return cTRIGGERParserRuleCall_1_1; }
		
		//tn=TriggerName
		public Assignment getTnAssignment_2() { return cTnAssignment_2; }
		
		//TriggerName
		public RuleCall getTnTriggerNameParserRuleCall_2_0() { return cTnTriggerNameParserRuleCall_2_0; }
		
		//AT
		public RuleCall getATParserRuleCall_3() { return cATParserRuleCall_3; }
		
		//every=EVERY tv=TimeValue | sv=StringValue
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//every=EVERY tv=TimeValue
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//every=EVERY
		public Assignment getEveryAssignment_4_0_0() { return cEveryAssignment_4_0_0; }
		
		//EVERY
		public RuleCall getEveryEVERYParserRuleCall_4_0_0_0() { return cEveryEVERYParserRuleCall_4_0_0_0; }
		
		//tv=TimeValue
		public Assignment getTvAssignment_4_0_1() { return cTvAssignment_4_0_1; }
		
		//TimeValue
		public RuleCall getTvTimeValueParserRuleCall_4_0_1_0() { return cTvTimeValueParserRuleCall_4_0_1_0; }
		
		//sv=StringValue
		public Assignment getSvAssignment_4_1() { return cSvAssignment_4_1; }
		
		//StringValue
		public RuleCall getSvStringValueParserRuleCall_4_1_0() { return cSvStringValueParserRuleCall_4_1_0; }
	}
	public class DefinitionFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DefinitionFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinitionFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cDEFINEParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cFUNCTIONParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cFnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFnFunctionNameParserRuleCall_2_0 = (RuleCall)cFnAssignment_2.eContents().get(0);
		private final RuleCall cOPEN_SQARE_BRACKETSParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cLnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLnLanguageNameParserRuleCall_4_0 = (RuleCall)cLnAssignment_4.eContents().get(0);
		private final RuleCall cCLOSE_SQARE_BRACKETSParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cRETURNParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cAttr_typeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cAttr_typeAttributeTypeParserRuleCall_7_0 = (RuleCall)cAttr_typeAssignment_7.eContents().get(0);
		private final Assignment cFunc_bodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cFunc_bodyFunctionBodyParserRuleCall_8_0 = (RuleCall)cFunc_bodyAssignment_8.eContents().get(0);
		
		//DefinitionFunction:
		//	{DefinitionFunction} (DEFINE FUNCTION) fn=FunctionName OPEN_SQARE_BRACKETS ln=LanguageName CLOSE_SQARE_BRACKETS
		//	RETURN attr_type=AttributeType func_body=FunctionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinitionFunction} (DEFINE FUNCTION) fn=FunctionName OPEN_SQARE_BRACKETS ln=LanguageName CLOSE_SQARE_BRACKETS RETURN
		//attr_type=AttributeType func_body=FunctionBody
		public Group getGroup() { return cGroup; }
		
		//{DefinitionFunction}
		public Action getDefinitionFunctionAction_0() { return cDefinitionFunctionAction_0; }
		
		//DEFINE FUNCTION
		public Group getGroup_1() { return cGroup_1; }
		
		//DEFINE
		public RuleCall getDEFINEParserRuleCall_1_0() { return cDEFINEParserRuleCall_1_0; }
		
		//FUNCTION
		public RuleCall getFUNCTIONParserRuleCall_1_1() { return cFUNCTIONParserRuleCall_1_1; }
		
		//fn=FunctionName
		public Assignment getFnAssignment_2() { return cFnAssignment_2; }
		
		//FunctionName
		public RuleCall getFnFunctionNameParserRuleCall_2_0() { return cFnFunctionNameParserRuleCall_2_0; }
		
		//OPEN_SQARE_BRACKETS
		public RuleCall getOPEN_SQARE_BRACKETSParserRuleCall_3() { return cOPEN_SQARE_BRACKETSParserRuleCall_3; }
		
		//ln=LanguageName
		public Assignment getLnAssignment_4() { return cLnAssignment_4; }
		
		//LanguageName
		public RuleCall getLnLanguageNameParserRuleCall_4_0() { return cLnLanguageNameParserRuleCall_4_0; }
		
		//CLOSE_SQARE_BRACKETS
		public RuleCall getCLOSE_SQARE_BRACKETSParserRuleCall_5() { return cCLOSE_SQARE_BRACKETSParserRuleCall_5; }
		
		//RETURN
		public RuleCall getRETURNParserRuleCall_6() { return cRETURNParserRuleCall_6; }
		
		//attr_type=AttributeType
		public Assignment getAttr_typeAssignment_7() { return cAttr_typeAssignment_7; }
		
		//AttributeType
		public RuleCall getAttr_typeAttributeTypeParserRuleCall_7_0() { return cAttr_typeAttributeTypeParserRuleCall_7_0; }
		
		//func_body=FunctionBody
		public Assignment getFunc_bodyAssignment_8() { return cFunc_bodyAssignment_8; }
		
		//FunctionBody
		public RuleCall getFunc_bodyFunctionBodyParserRuleCall_8_0() { return cFunc_bodyFunctionBodyParserRuleCall_8_0; }
	}
	public class DefinitionAggregationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DefinitionAggregation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinitionAggregationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnnAnnotationParserRuleCall_1_0 = (RuleCall)cAnnAssignment_1.eContents().get(0);
		private final RuleCall cDEFINEParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cAGGREGATIONParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cSrcAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSrcSource1ParserRuleCall_4_0 = (RuleCall)cSrcAssignment_4.eContents().get(0);
		private final RuleCall cFROMParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cStdStreamAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cStdStreamStandardStreamParserRuleCall_6_0 = (RuleCall)cStdStreamAssignment_6.eContents().get(0);
		private final Assignment cGroupByQuerySelAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cGroupByQuerySelGroupByQuerySelectionParserRuleCall_7_0 = (RuleCall)cGroupByQuerySelAssignment_7.eContents().get(0);
		private final RuleCall cAGGREGATEParserRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final RuleCall cBYParserRuleCall_9_0 = (RuleCall)cGroup_9.eContents().get(0);
		private final Assignment cAttrRefAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cAttrRefAttributeReferenceParserRuleCall_9_1_0 = (RuleCall)cAttrRefAssignment_9_1.eContents().get(0);
		private final Assignment cEveAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cEveEVERYParserRuleCall_10_0 = (RuleCall)cEveAssignment_10.eContents().get(0);
		private final Assignment cAggrTimeAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cAggrTimeAggregationTimeParserRuleCall_11_0 = (RuleCall)cAggrTimeAssignment_11.eContents().get(0);
		
		//DefinitionAggregation:
		//	{DefinitionAggregation} ann+=Annotation* DEFINE AGGREGATION src=Source1 FROM stdStream=StandardStream
		//	groupByQuerySel=GroupByQuerySelection AGGREGATE (BY attrRef=AttributeReference)? eve=EVERY aggrTime=AggregationTime;
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinitionAggregation} ann+=Annotation* DEFINE AGGREGATION src=Source1 FROM stdStream=StandardStream
		//groupByQuerySel=GroupByQuerySelection AGGREGATE (BY attrRef=AttributeReference)? eve=EVERY aggrTime=AggregationTime
		public Group getGroup() { return cGroup; }
		
		//{DefinitionAggregation}
		public Action getDefinitionAggregationAction_0() { return cDefinitionAggregationAction_0; }
		
		//ann+=Annotation*
		public Assignment getAnnAssignment_1() { return cAnnAssignment_1; }
		
		//Annotation
		public RuleCall getAnnAnnotationParserRuleCall_1_0() { return cAnnAnnotationParserRuleCall_1_0; }
		
		//DEFINE
		public RuleCall getDEFINEParserRuleCall_2() { return cDEFINEParserRuleCall_2; }
		
		//AGGREGATION
		public RuleCall getAGGREGATIONParserRuleCall_3() { return cAGGREGATIONParserRuleCall_3; }
		
		//src=Source1
		public Assignment getSrcAssignment_4() { return cSrcAssignment_4; }
		
		//Source1
		public RuleCall getSrcSource1ParserRuleCall_4_0() { return cSrcSource1ParserRuleCall_4_0; }
		
		//FROM
		public RuleCall getFROMParserRuleCall_5() { return cFROMParserRuleCall_5; }
		
		//stdStream=StandardStream
		public Assignment getStdStreamAssignment_6() { return cStdStreamAssignment_6; }
		
		//StandardStream
		public RuleCall getStdStreamStandardStreamParserRuleCall_6_0() { return cStdStreamStandardStreamParserRuleCall_6_0; }
		
		//groupByQuerySel=GroupByQuerySelection
		public Assignment getGroupByQuerySelAssignment_7() { return cGroupByQuerySelAssignment_7; }
		
		//GroupByQuerySelection
		public RuleCall getGroupByQuerySelGroupByQuerySelectionParserRuleCall_7_0() { return cGroupByQuerySelGroupByQuerySelectionParserRuleCall_7_0; }
		
		//AGGREGATE
		public RuleCall getAGGREGATEParserRuleCall_8() { return cAGGREGATEParserRuleCall_8; }
		
		//(BY attrRef=AttributeReference)?
		public Group getGroup_9() { return cGroup_9; }
		
		//BY
		public RuleCall getBYParserRuleCall_9_0() { return cBYParserRuleCall_9_0; }
		
		//attrRef=AttributeReference
		public Assignment getAttrRefAssignment_9_1() { return cAttrRefAssignment_9_1; }
		
		//AttributeReference
		public RuleCall getAttrRefAttributeReferenceParserRuleCall_9_1_0() { return cAttrRefAttributeReferenceParserRuleCall_9_1_0; }
		
		//eve=EVERY
		public Assignment getEveAssignment_10() { return cEveAssignment_10; }
		
		//EVERY
		public RuleCall getEveEVERYParserRuleCall_10_0() { return cEveEVERYParserRuleCall_10_0; }
		
		//aggrTime=AggregationTime
		public Assignment getAggrTimeAssignment_11() { return cAggrTimeAssignment_11; }
		
		//AggregationTime
		public RuleCall getAggrTimeAggregationTimeParserRuleCall_11_0() { return cAggrTimeAggregationTimeParserRuleCall_11_0; }
	}
	public class AggregationTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AggregationTime");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAggregationTimeRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAggregation_time_intervalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AggregationTime:
		//	AggregationTimeRange
		//	| aggregation_time_interval;
		@Override public ParserRule getRule() { return rule; }
		
		//AggregationTimeRange | aggregation_time_interval
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AggregationTimeRange
		public RuleCall getAggregationTimeRangeParserRuleCall_0() { return cAggregationTimeRangeParserRuleCall_0; }
		
		//aggregation_time_interval
		public RuleCall getAggregation_time_intervalParserRuleCall_1() { return cAggregation_time_intervalParserRuleCall_1; }
	}
	public class Aggregation_time_intervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.aggregation_time_interval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAggrtimeDurAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAggrtimeDurAggregationTimeDurationParserRuleCall_0_0 = (RuleCall)cAggrtimeDurAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAggrtimeDurAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAggrtimeDurAggregationTimeDurationParserRuleCall_1_1_0 = (RuleCall)cAggrtimeDurAssignment_1_1.eContents().get(0);
		
		//aggregation_time_interval:
		//	aggrtimeDur+=AggregationTimeDuration (',' aggrtimeDur+=AggregationTimeDuration)*;
		@Override public ParserRule getRule() { return rule; }
		
		//aggrtimeDur+=AggregationTimeDuration (',' aggrtimeDur+=AggregationTimeDuration)*
		public Group getGroup() { return cGroup; }
		
		//aggrtimeDur+=AggregationTimeDuration
		public Assignment getAggrtimeDurAssignment_0() { return cAggrtimeDurAssignment_0; }
		
		//AggregationTimeDuration
		public RuleCall getAggrtimeDurAggregationTimeDurationParserRuleCall_0_0() { return cAggrtimeDurAggregationTimeDurationParserRuleCall_0_0; }
		
		//(',' aggrtimeDur+=AggregationTimeDuration)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//aggrtimeDur+=AggregationTimeDuration
		public Assignment getAggrtimeDurAssignment_1_1() { return cAggrtimeDurAssignment_1_1; }
		
		//AggregationTimeDuration
		public RuleCall getAggrtimeDurAggregationTimeDurationParserRuleCall_1_1_0() { return cAggrtimeDurAggregationTimeDurationParserRuleCall_1_1_0; }
	}
	public class AggregationTimeDurationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AggregationTimeDuration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSECONDSParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMINUTESParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHOURSParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDAYSParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cWEEKSParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMONTHSParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cYEARSParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//AggregationTimeDuration:
		//	SECONDS | MINUTES | HOURS | DAYS | WEEKS | MONTHS | YEARS;
		@Override public ParserRule getRule() { return rule; }
		
		//SECONDS | MINUTES | HOURS | DAYS | WEEKS | MONTHS | YEARS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SECONDS
		public RuleCall getSECONDSParserRuleCall_0() { return cSECONDSParserRuleCall_0; }
		
		//MINUTES
		public RuleCall getMINUTESParserRuleCall_1() { return cMINUTESParserRuleCall_1; }
		
		//HOURS
		public RuleCall getHOURSParserRuleCall_2() { return cHOURSParserRuleCall_2; }
		
		//DAYS
		public RuleCall getDAYSParserRuleCall_3() { return cDAYSParserRuleCall_3; }
		
		//WEEKS
		public RuleCall getWEEKSParserRuleCall_4() { return cWEEKSParserRuleCall_4; }
		
		//MONTHS
		public RuleCall getMONTHSParserRuleCall_5() { return cMONTHSParserRuleCall_5; }
		
		//YEARS
		public RuleCall getYEARSParserRuleCall_6() { return cYEARSParserRuleCall_6; }
	}
	public class AggregationTimeRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AggregationTimeRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAggrtimeDurAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAggrtimeDurAggregationTimeDurationParserRuleCall_0_0 = (RuleCall)cAggrtimeDurAssignment_0.eContents().get(0);
		private final RuleCall cTRIPLE_DOTParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cAggrtimeDurAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAggrtimeDurAggregationTimeDurationParserRuleCall_2_0 = (RuleCall)cAggrtimeDurAssignment_2.eContents().get(0);
		
		//AggregationTimeRange:
		//	aggrtimeDur+=AggregationTimeDuration TRIPLE_DOT aggrtimeDur+=AggregationTimeDuration;
		@Override public ParserRule getRule() { return rule; }
		
		//aggrtimeDur+=AggregationTimeDuration TRIPLE_DOT aggrtimeDur+=AggregationTimeDuration
		public Group getGroup() { return cGroup; }
		
		//aggrtimeDur+=AggregationTimeDuration
		public Assignment getAggrtimeDurAssignment_0() { return cAggrtimeDurAssignment_0; }
		
		//AggregationTimeDuration
		public RuleCall getAggrtimeDurAggregationTimeDurationParserRuleCall_0_0() { return cAggrtimeDurAggregationTimeDurationParserRuleCall_0_0; }
		
		//TRIPLE_DOT
		public RuleCall getTRIPLE_DOTParserRuleCall_1() { return cTRIPLE_DOTParserRuleCall_1; }
		
		//aggrtimeDur+=AggregationTimeDuration
		public Assignment getAggrtimeDurAssignment_2() { return cAggrtimeDurAssignment_2; }
		
		//AggregationTimeDuration
		public RuleCall getAggrtimeDurAggregationTimeDurationParserRuleCall_2_0() { return cAggrtimeDurAggregationTimeDurationParserRuleCall_2_0; }
	}
	public class FunctionNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FunctionName");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//FunctionName:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class LanguageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LanguageName");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//LanguageName:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class FunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FunctionBody");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSCRIPTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FunctionBody:
		//	value=SCRIPT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=SCRIPT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//SCRIPT
		public RuleCall getValueSCRIPTTerminalRuleCall_0() { return cValueSCRIPTTerminalRuleCall_0; }
	}
	public class TriggerNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.TriggerName");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//TriggerName:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class AppAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AppAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAPPParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNaNameParserRuleCall_3_0 = (RuleCall)cNaAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cOPEN_PARParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cAnn5Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAnn5AnnotationElementParserRuleCall_4_1_0 = (RuleCall)cAnn5Assignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cAnn5Assignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cAnn5AnnotationElementParserRuleCall_4_2_1_0 = (RuleCall)cAnn5Assignment_4_2_1.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		
		//AppAnnotation:
		//	'@' APP ':' na=Name (OPEN_PAR ann5+=AnnotationElement (',' ann5+=AnnotationElement)* CLOSE_PAR)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' APP ':' na=Name (OPEN_PAR ann5+=AnnotationElement (',' ann5+=AnnotationElement)* CLOSE_PAR)?
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//APP
		public RuleCall getAPPParserRuleCall_1() { return cAPPParserRuleCall_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//na=Name
		public Assignment getNaAssignment_3() { return cNaAssignment_3; }
		
		//Name
		public RuleCall getNaNameParserRuleCall_3_0() { return cNaNameParserRuleCall_3_0; }
		
		//(OPEN_PAR ann5+=AnnotationElement (',' ann5+=AnnotationElement)* CLOSE_PAR)?
		public Group getGroup_4() { return cGroup_4; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_4_0() { return cOPEN_PARParserRuleCall_4_0; }
		
		//ann5+=AnnotationElement
		public Assignment getAnn5Assignment_4_1() { return cAnn5Assignment_4_1; }
		
		//AnnotationElement
		public RuleCall getAnn5AnnotationElementParserRuleCall_4_1_0() { return cAnn5AnnotationElementParserRuleCall_4_1_0; }
		
		//(',' ann5+=AnnotationElement)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//ann5+=AnnotationElement
		public Assignment getAnn5Assignment_4_2_1() { return cAnn5Assignment_4_2_1; }
		
		//AnnotationElement
		public RuleCall getAnn5AnnotationElementParserRuleCall_4_2_1_0() { return cAnn5AnnotationElementParserRuleCall_4_2_1_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_4_3() { return cCLOSE_PARParserRuleCall_4_3; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNaNameParserRuleCall_1_0 = (RuleCall)cNaAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cOPEN_PARParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Assignment cAnnElementAssignment_2_1_0 = (Assignment)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cAnnElementAnnotationElementParserRuleCall_2_1_0_0 = (RuleCall)cAnnElementAssignment_2_1_0.eContents().get(0);
		private final Assignment cAnnAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final RuleCall cAnnAnnotationParserRuleCall_2_1_1_0 = (RuleCall)cAnnAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Alternatives cAlternatives_2_2_1 = (Alternatives)cGroup_2_2.eContents().get(1);
		private final Assignment cAnnElementAssignment_2_2_1_0 = (Assignment)cAlternatives_2_2_1.eContents().get(0);
		private final RuleCall cAnnElementAnnotationElementParserRuleCall_2_2_1_0_0 = (RuleCall)cAnnElementAssignment_2_2_1_0.eContents().get(0);
		private final Assignment cAnnAssignment_2_2_1_1 = (Assignment)cAlternatives_2_2_1.eContents().get(1);
		private final RuleCall cAnnAnnotationParserRuleCall_2_2_1_1_0 = (RuleCall)cAnnAssignment_2_2_1_1.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//Annotation:
		//	'@' na=Name (OPEN_PAR (annElement+=AnnotationElement | ann+=Annotation) (',' (annElement+=AnnotationElement |
		//	ann+=Annotation))* CLOSE_PAR);
		@Override public ParserRule getRule() { return rule; }
		
		//'@' na=Name (OPEN_PAR (annElement+=AnnotationElement | ann+=Annotation) (',' (annElement+=AnnotationElement |
		//ann+=Annotation))* CLOSE_PAR)
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//na=Name
		public Assignment getNaAssignment_1() { return cNaAssignment_1; }
		
		//Name
		public RuleCall getNaNameParserRuleCall_1_0() { return cNaNameParserRuleCall_1_0; }
		
		//OPEN_PAR (annElement+=AnnotationElement | ann+=Annotation) (',' (annElement+=AnnotationElement | ann+=Annotation))*
		//CLOSE_PAR
		public Group getGroup_2() { return cGroup_2; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_2_0() { return cOPEN_PARParserRuleCall_2_0; }
		
		//annElement+=AnnotationElement | ann+=Annotation
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//annElement+=AnnotationElement
		public Assignment getAnnElementAssignment_2_1_0() { return cAnnElementAssignment_2_1_0; }
		
		//AnnotationElement
		public RuleCall getAnnElementAnnotationElementParserRuleCall_2_1_0_0() { return cAnnElementAnnotationElementParserRuleCall_2_1_0_0; }
		
		//ann+=Annotation
		public Assignment getAnnAssignment_2_1_1() { return cAnnAssignment_2_1_1; }
		
		//Annotation
		public RuleCall getAnnAnnotationParserRuleCall_2_1_1_0() { return cAnnAnnotationParserRuleCall_2_1_1_0; }
		
		//(',' (annElement+=AnnotationElement | ann+=Annotation))*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//annElement+=AnnotationElement | ann+=Annotation
		public Alternatives getAlternatives_2_2_1() { return cAlternatives_2_2_1; }
		
		//annElement+=AnnotationElement
		public Assignment getAnnElementAssignment_2_2_1_0() { return cAnnElementAssignment_2_2_1_0; }
		
		//AnnotationElement
		public RuleCall getAnnElementAnnotationElementParserRuleCall_2_2_1_0_0() { return cAnnElementAnnotationElementParserRuleCall_2_2_1_0_0; }
		
		//ann+=Annotation
		public Assignment getAnnAssignment_2_2_1_1() { return cAnnAssignment_2_2_1_1; }
		
		//Annotation
		public RuleCall getAnnAnnotationParserRuleCall_2_2_1_1_0() { return cAnnAnnotationParserRuleCall_2_2_1_1_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_2_3() { return cCLOSE_PARParserRuleCall_2_3; }
	}
	public class AnnotationElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AnnotationElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPropNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cPropNamePropertyNameParserRuleCall_0_0_0 = (RuleCall)cPropNameAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPropValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropValPropertyValueParserRuleCall_1_0 = (RuleCall)cPropValAssignment_1.eContents().get(0);
		
		//AnnotationElement:
		//	(propName=PropertyName '=')? propVal=PropertyValue;
		@Override public ParserRule getRule() { return rule; }
		
		//(propName=PropertyName '=')? propVal=PropertyValue
		public Group getGroup() { return cGroup; }
		
		//(propName=PropertyName '=')?
		public Group getGroup_0() { return cGroup_0; }
		
		//propName=PropertyName
		public Assignment getPropNameAssignment_0_0() { return cPropNameAssignment_0_0; }
		
		//PropertyName
		public RuleCall getPropNamePropertyNameParserRuleCall_0_0_0() { return cPropNamePropertyNameParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//propVal=PropertyValue
		public Assignment getPropValAssignment_1() { return cPropValAssignment_1; }
		
		//PropertyValue
		public RuleCall getPropValPropertyValueParserRuleCall_1_0() { return cPropValPropertyValueParserRuleCall_1_0; }
	}
	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PropertyValue");
		private final Assignment cSvAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSvStringValueParserRuleCall_0 = (RuleCall)cSvAssignment.eContents().get(0);
		
		//PropertyValue:
		//	sv=StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//sv=StringValue
		public Assignment getSvAssignment() { return cSvAssignment; }
		
		//StringValue
		public RuleCall getSvStringValueParserRuleCall_0() { return cSvStringValueParserRuleCall_0; }
	}
	public class PropertyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PropertyName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPropertyNameAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNaNameParserRuleCall_1_0 = (RuleCall)cNaAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPsPropertySeparatorParserRuleCall_2_0_0 = (RuleCall)cPsAssignment_2_0.eContents().get(0);
		private final Assignment cNaAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNaNameParserRuleCall_2_1_0 = (RuleCall)cNaAssignment_2_1.eContents().get(0);
		
		//PropertyName:
		//	{PropertyName} na+=Name (ps+=PropertySeparator na+=Name)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{PropertyName} na+=Name (ps+=PropertySeparator na+=Name)*
		public Group getGroup() { return cGroup; }
		
		//{PropertyName}
		public Action getPropertyNameAction_0() { return cPropertyNameAction_0; }
		
		//na+=Name
		public Assignment getNaAssignment_1() { return cNaAssignment_1; }
		
		//Name
		public RuleCall getNaNameParserRuleCall_1_0() { return cNaNameParserRuleCall_1_0; }
		
		//(ps+=PropertySeparator na+=Name)*
		public Group getGroup_2() { return cGroup_2; }
		
		//ps+=PropertySeparator
		public Assignment getPsAssignment_2_0() { return cPsAssignment_2_0; }
		
		//PropertySeparator
		public RuleCall getPsPropertySeparatorParserRuleCall_2_0_0() { return cPsPropertySeparatorParserRuleCall_2_0_0; }
		
		//na+=Name
		public Assignment getNaAssignment_2_1() { return cNaAssignment_2_1; }
		
		//Name
		public RuleCall getNaNameParserRuleCall_2_1_0() { return cNaNameParserRuleCall_2_1_0; }
	}
	public class PropertySeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PropertySeparator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cPropertySeparatorAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cDOTParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cPropertySeparatorAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cMINUSParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cPropertySeparatorAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cCOLParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//PropertySeparator:
		//	{PropertySeparator} DOT | {PropertySeparator} MINUS | {PropertySeparator} COL;
		@Override public ParserRule getRule() { return rule; }
		
		//{PropertySeparator} DOT | {PropertySeparator} MINUS | {PropertySeparator} COL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{PropertySeparator} DOT
		public Group getGroup_0() { return cGroup_0; }
		
		//{PropertySeparator}
		public Action getPropertySeparatorAction_0_0() { return cPropertySeparatorAction_0_0; }
		
		//DOT
		public RuleCall getDOTParserRuleCall_0_1() { return cDOTParserRuleCall_0_1; }
		
		//{PropertySeparator} MINUS
		public Group getGroup_1() { return cGroup_1; }
		
		//{PropertySeparator}
		public Action getPropertySeparatorAction_1_0() { return cPropertySeparatorAction_1_0; }
		
		//MINUS
		public RuleCall getMINUSParserRuleCall_1_1() { return cMINUSParserRuleCall_1_1; }
		
		//{PropertySeparator} COL
		public Group getGroup_2() { return cGroup_2; }
		
		//{PropertySeparator}
		public Action getPropertySeparatorAction_2_0() { return cPropertySeparatorAction_2_0; }
		
		//COL
		public RuleCall getCOLParserRuleCall_2_1() { return cCOLParserRuleCall_2_1; }
	}
	public class FeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Features");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIdNewParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeAttributeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Features:
		//	name=IdNew type=AttributeType;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IdNew type=AttributeType
		public Group getGroup() { return cGroup; }
		
		//name=IdNew
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//IdNew
		public RuleCall getNameIdNewParserRuleCall_0_0() { return cNameIdNewParserRuleCall_0_0; }
		
		//type=AttributeType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//AttributeType
		public RuleCall getTypeAttributeTypeParserRuleCall_1_0() { return cTypeAttributeTypeParserRuleCall_1_0; }
	}
	public class AttributeTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AttributeType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttributeTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cSTRINGSParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttributeTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cINTSParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAttributeTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cLONGParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAttributeTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cAttributeTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cDOUBLEParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cAttributeTypeAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cBOOLParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cAttributeTypeAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final RuleCall cOBJECTParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		
		//AttributeType:
		//	{AttributeType} STRINGS | {AttributeType} INTS | {AttributeType} LONG | {AttributeType} FLOAT | {AttributeType}
		//	DOUBLE | {AttributeType} BOOL | {AttributeType} OBJECT;
		@Override public ParserRule getRule() { return rule; }
		
		//{AttributeType} STRINGS | {AttributeType} INTS | {AttributeType} LONG | {AttributeType} FLOAT | {AttributeType} DOUBLE |
		//{AttributeType} BOOL | {AttributeType} OBJECT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AttributeType} STRINGS
		public Group getGroup_0() { return cGroup_0; }
		
		//{AttributeType}
		public Action getAttributeTypeAction_0_0() { return cAttributeTypeAction_0_0; }
		
		//STRINGS
		public RuleCall getSTRINGSParserRuleCall_0_1() { return cSTRINGSParserRuleCall_0_1; }
		
		//{AttributeType} INTS
		public Group getGroup_1() { return cGroup_1; }
		
		//{AttributeType}
		public Action getAttributeTypeAction_1_0() { return cAttributeTypeAction_1_0; }
		
		//INTS
		public RuleCall getINTSParserRuleCall_1_1() { return cINTSParserRuleCall_1_1; }
		
		//{AttributeType} LONG
		public Group getGroup_2() { return cGroup_2; }
		
		//{AttributeType}
		public Action getAttributeTypeAction_2_0() { return cAttributeTypeAction_2_0; }
		
		//LONG
		public RuleCall getLONGParserRuleCall_2_1() { return cLONGParserRuleCall_2_1; }
		
		//{AttributeType} FLOAT
		public Group getGroup_3() { return cGroup_3; }
		
		//{AttributeType}
		public Action getAttributeTypeAction_3_0() { return cAttributeTypeAction_3_0; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_3_1() { return cFLOATParserRuleCall_3_1; }
		
		//{AttributeType} DOUBLE
		public Group getGroup_4() { return cGroup_4; }
		
		//{AttributeType}
		public Action getAttributeTypeAction_4_0() { return cAttributeTypeAction_4_0; }
		
		//DOUBLE
		public RuleCall getDOUBLEParserRuleCall_4_1() { return cDOUBLEParserRuleCall_4_1; }
		
		//{AttributeType} BOOL
		public Group getGroup_5() { return cGroup_5; }
		
		//{AttributeType}
		public Action getAttributeTypeAction_5_0() { return cAttributeTypeAction_5_0; }
		
		//BOOL
		public RuleCall getBOOLParserRuleCall_5_1() { return cBOOLParserRuleCall_5_1; }
		
		//{AttributeType} OBJECT
		public Group getGroup_6() { return cGroup_6; }
		
		//{AttributeType}
		public Action getAttributeTypeAction_6_0() { return cAttributeTypeAction_6_0; }
		
		//OBJECT
		public RuleCall getOBJECTParserRuleCall_6_1() { return cOBJECTParserRuleCall_6_1; }
	}
	public class ExecPartitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ExecPartition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnn4Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnn4AnnotationParserRuleCall_0_0 = (RuleCall)cAnn4Assignment_0.eContents().get(0);
		private final RuleCall cPARTITIONParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWITHParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cOPEN_PARParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cPartWithStreamAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPartWithStreamPartitionWithStreamParserRuleCall_4_0 = (RuleCall)cPartWithStreamAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPartWithStreamAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPartWithStreamPartitionWithStreamParserRuleCall_5_1_0 = (RuleCall)cPartWithStreamAssignment_5_1.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cBEGINParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cQuAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cQuQueryParserRuleCall_8_0 = (RuleCall)cQuAssignment_8.eContents().get(0);
		private final Assignment cQuAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cQuQueryParserRuleCall_9_0 = (RuleCall)cQuAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cENDParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		//ExecPartition:
		//	ann4+=Annotation* PARTITION WITH OPEN_PAR partWithStream+=PartitionWithStream (','
		//	partWithStream+=PartitionWithStream)* CLOSE_PAR BEGIN qu+=Query qu+=Query* ';'? END;
		@Override public ParserRule getRule() { return rule; }
		
		//ann4+=Annotation* PARTITION WITH OPEN_PAR partWithStream+=PartitionWithStream (',' partWithStream+=PartitionWithStream)*
		//CLOSE_PAR BEGIN qu+=Query qu+=Query* ';'? END
		public Group getGroup() { return cGroup; }
		
		//ann4+=Annotation*
		public Assignment getAnn4Assignment_0() { return cAnn4Assignment_0; }
		
		//Annotation
		public RuleCall getAnn4AnnotationParserRuleCall_0_0() { return cAnn4AnnotationParserRuleCall_0_0; }
		
		//PARTITION
		public RuleCall getPARTITIONParserRuleCall_1() { return cPARTITIONParserRuleCall_1; }
		
		//WITH
		public RuleCall getWITHParserRuleCall_2() { return cWITHParserRuleCall_2; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_3() { return cOPEN_PARParserRuleCall_3; }
		
		//partWithStream+=PartitionWithStream
		public Assignment getPartWithStreamAssignment_4() { return cPartWithStreamAssignment_4; }
		
		//PartitionWithStream
		public RuleCall getPartWithStreamPartitionWithStreamParserRuleCall_4_0() { return cPartWithStreamPartitionWithStreamParserRuleCall_4_0; }
		
		//(',' partWithStream+=PartitionWithStream)*
		public Group getGroup_5() { return cGroup_5; }
		
		//','
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//partWithStream+=PartitionWithStream
		public Assignment getPartWithStreamAssignment_5_1() { return cPartWithStreamAssignment_5_1; }
		
		//PartitionWithStream
		public RuleCall getPartWithStreamPartitionWithStreamParserRuleCall_5_1_0() { return cPartWithStreamPartitionWithStreamParserRuleCall_5_1_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_6() { return cCLOSE_PARParserRuleCall_6; }
		
		//BEGIN
		public RuleCall getBEGINParserRuleCall_7() { return cBEGINParserRuleCall_7; }
		
		//qu+=Query
		public Assignment getQuAssignment_8() { return cQuAssignment_8; }
		
		//Query
		public RuleCall getQuQueryParserRuleCall_8_0() { return cQuQueryParserRuleCall_8_0; }
		
		//qu+=Query*
		public Assignment getQuAssignment_9() { return cQuAssignment_9; }
		
		//Query
		public RuleCall getQuQueryParserRuleCall_9_0() { return cQuQueryParserRuleCall_9_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
		
		//END
		public RuleCall getENDParserRuleCall_11() { return cENDParserRuleCall_11; }
	}
	public class PartitionWithStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PartitionWithStream");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConditionRangesParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cOfAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOfOFParserRuleCall_1_0 = (RuleCall)cOfAssignment_1.eContents().get(0);
		private final Assignment cStr_id2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStr_id2SourceParserRuleCall_2_0 = (RuleCall)cStr_id2Assignment_2.eContents().get(0);
		
		//PartitionWithStream:
		//	ConditionRanges of=OF str_id2=Source //str_id2=StreamId
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////attr=Attribute of=OF str_id1=Source //str_id1=StreamId ...
		//ConditionRanges of=OF str_id2=Source
		public Group getGroup() { return cGroup; }
		
		////attr=Attribute of=OF str_id1=Source //str_id1=StreamId ...
		//ConditionRanges
		public RuleCall getConditionRangesParserRuleCall_0() { return cConditionRangesParserRuleCall_0; }
		
		//of=OF
		public Assignment getOfAssignment_1() { return cOfAssignment_1; }
		
		//OF
		public RuleCall getOfOFParserRuleCall_1_0() { return cOfOFParserRuleCall_1_0; }
		
		//str_id2=Source
		public Assignment getStr_id2Assignment_2() { return cStr_id2Assignment_2; }
		
		//Source
		public RuleCall getStr_id2SourceParserRuleCall_2_0() { return cStr_id2SourceParserRuleCall_2_0; }
	}
	public class ConditionRangesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ConditionRanges");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConRangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConRangeConditionRangeParserRuleCall_0_0 = (RuleCall)cConRangeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOrAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOrORParserRuleCall_1_0_0 = (RuleCall)cOrAssignment_1_0.eContents().get(0);
		private final Assignment cConRangeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConRangeConditionRangeParserRuleCall_1_1_0 = (RuleCall)cConRangeAssignment_1_1.eContents().get(0);
		
		//ConditionRanges:
		//	conRange+=ConditionRange (or+=OR conRange+=ConditionRange)*;
		@Override public ParserRule getRule() { return rule; }
		
		//conRange+=ConditionRange (or+=OR conRange+=ConditionRange)*
		public Group getGroup() { return cGroup; }
		
		//conRange+=ConditionRange
		public Assignment getConRangeAssignment_0() { return cConRangeAssignment_0; }
		
		//ConditionRange
		public RuleCall getConRangeConditionRangeParserRuleCall_0_0() { return cConRangeConditionRangeParserRuleCall_0_0; }
		
		//(or+=OR conRange+=ConditionRange)*
		public Group getGroup_1() { return cGroup_1; }
		
		//or+=OR
		public Assignment getOrAssignment_1_0() { return cOrAssignment_1_0; }
		
		//OR
		public RuleCall getOrORParserRuleCall_1_0_0() { return cOrORParserRuleCall_1_0_0; }
		
		//conRange+=ConditionRange
		public Assignment getConRangeAssignment_1_1() { return cConRangeAssignment_1_1; }
		
		//ConditionRange
		public RuleCall getConRangeConditionRangeParserRuleCall_1_1_0() { return cConRangeConditionRangeParserRuleCall_1_1_0; }
	}
	public class ConditionRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ConditionRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAASParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		private final Assignment cSvAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSvStringValueParserRuleCall_2_0 = (RuleCall)cSvAssignment_2.eContents().get(0);
		
		//ConditionRange:
		//	expr=Expression a=AS? sv=StringValue?;
		@Override public ParserRule getRule() { return rule; }
		
		//expr=Expression a=AS? sv=StringValue?
		public Group getGroup() { return cGroup; }
		
		//expr=Expression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_0() { return cExprExpressionParserRuleCall_0_0; }
		
		//a=AS?
		public Assignment getAAssignment_1() { return cAAssignment_1; }
		
		//AS
		public RuleCall getAASParserRuleCall_1_0() { return cAASParserRuleCall_1_0; }
		
		//sv=StringValue?
		public Assignment getSvAssignment_2() { return cSvAssignment_2; }
		
		//StringValue
		public RuleCall getSvStringValueParserRuleCall_2_0() { return cSvStringValueParserRuleCall_2_0; }
	}
	public class QueryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Query");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQueryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cAnn3Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnn3AnnotationParserRuleCall_1_0 = (RuleCall)cAnn3Assignment_1.eContents().get(0);
		private final RuleCall cFROMParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cQInpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQInpQueryInputParserRuleCall_3_0 = (RuleCall)cQInpAssignment_3.eContents().get(0);
		private final Assignment cQuerySecAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQuerySecQuerySectionParserRuleCall_4_0 = (RuleCall)cQuerySecAssignment_4.eContents().get(0);
		private final Assignment cOutRateAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOutRateOutputRateParserRuleCall_5_0 = (RuleCall)cOutRateAssignment_5.eContents().get(0);
		private final Assignment cQOutputAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cQOutputQueryOutputParserRuleCall_6_0 = (RuleCall)cQOutputAssignment_6.eContents().get(0);
		
		//Query:
		//	{Query} ann3+=Annotation* FROM qInp=QueryInput querySec=QuerySection? outRate=OutputRate? qOutput=QueryOutput?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Query} ann3+=Annotation* FROM qInp=QueryInput querySec=QuerySection? outRate=OutputRate? qOutput=QueryOutput?
		public Group getGroup() { return cGroup; }
		
		//{Query}
		public Action getQueryAction_0() { return cQueryAction_0; }
		
		//ann3+=Annotation*
		public Assignment getAnn3Assignment_1() { return cAnn3Assignment_1; }
		
		//Annotation
		public RuleCall getAnn3AnnotationParserRuleCall_1_0() { return cAnn3AnnotationParserRuleCall_1_0; }
		
		//FROM
		public RuleCall getFROMParserRuleCall_2() { return cFROMParserRuleCall_2; }
		
		//qInp=QueryInput
		public Assignment getQInpAssignment_3() { return cQInpAssignment_3; }
		
		//QueryInput
		public RuleCall getQInpQueryInputParserRuleCall_3_0() { return cQInpQueryInputParserRuleCall_3_0; }
		
		//querySec=QuerySection?
		public Assignment getQuerySecAssignment_4() { return cQuerySecAssignment_4; }
		
		//QuerySection
		public RuleCall getQuerySecQuerySectionParserRuleCall_4_0() { return cQuerySecQuerySectionParserRuleCall_4_0; }
		
		//outRate=OutputRate?
		public Assignment getOutRateAssignment_5() { return cOutRateAssignment_5; }
		
		//OutputRate
		public RuleCall getOutRateOutputRateParserRuleCall_5_0() { return cOutRateOutputRateParserRuleCall_5_0; }
		
		//qOutput=QueryOutput?
		public Assignment getQOutputAssignment_6() { return cQOutputAssignment_6; }
		
		//QueryOutput
		public RuleCall getQOutputQueryOutputParserRuleCall_6_0() { return cQOutputQueryOutputParserRuleCall_6_0; }
	}
	public class QueryInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.QueryInput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQueryInputAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cJsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cJsJoinStreamParserRuleCall_1_0_0 = (RuleCall)cJsAssignment_1_0.eContents().get(0);
		private final Assignment cSeqSrcChaninAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cSeqSrcChaninSequenceStreamParserRuleCall_1_1_0 = (RuleCall)cSeqSrcChaninAssignment_1_1.eContents().get(0);
		private final Assignment cPsAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final RuleCall cPsPatternStreamParserRuleCall_1_2_0 = (RuleCall)cPsAssignment_1_2.eContents().get(0);
		private final Assignment cAnonStreamAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final RuleCall cAnonStreamAnonymousStreamParserRuleCall_1_3_0 = (RuleCall)cAnonStreamAssignment_1_3.eContents().get(0);
		
		//QueryInput:
		//	{QueryInput} (=> js=JoinStream | => seqSrcChanin=SequenceStream | => ps=PatternStream | anonStream=AnonymousStream);
		@Override public ParserRule getRule() { return rule; }
		
		//{QueryInput} (=> js=JoinStream | => seqSrcChanin=SequenceStream | => ps=PatternStream | anonStream=AnonymousStream)
		public Group getGroup() { return cGroup; }
		
		//{QueryInput}
		public Action getQueryInputAction_0() { return cQueryInputAction_0; }
		
		//=> js=JoinStream | => seqSrcChanin=SequenceStream | => ps=PatternStream | anonStream=AnonymousStream
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> js=JoinStream
		public Assignment getJsAssignment_1_0() { return cJsAssignment_1_0; }
		
		//JoinStream
		public RuleCall getJsJoinStreamParserRuleCall_1_0_0() { return cJsJoinStreamParserRuleCall_1_0_0; }
		
		//=> seqSrcChanin=SequenceStream
		public Assignment getSeqSrcChaninAssignment_1_1() { return cSeqSrcChaninAssignment_1_1; }
		
		//SequenceStream
		public RuleCall getSeqSrcChaninSequenceStreamParserRuleCall_1_1_0() { return cSeqSrcChaninSequenceStreamParserRuleCall_1_1_0; }
		
		//=> ps=PatternStream
		public Assignment getPsAssignment_1_2() { return cPsAssignment_1_2; }
		
		//PatternStream
		public RuleCall getPsPatternStreamParserRuleCall_1_2_0() { return cPsPatternStreamParserRuleCall_1_2_0; }
		
		//anonStream=AnonymousStream
		public Assignment getAnonStreamAssignment_1_3() { return cAnonStreamAssignment_1_3; }
		
		//AnonymousStream
		public RuleCall getAnonStreamAnonymousStreamParserRuleCall_1_3_0() { return cAnonStreamAnonymousStreamParserRuleCall_1_3_0; }
	}
	public class JoinStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.JoinStream");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cGroup_0_0.eContents().get(0);
		private final Assignment cLeft_sourceAssignment_0_0_0_0 = (Assignment)cGroup_0_0_0.eContents().get(0);
		private final RuleCall cLeft_sourceJoinSourceParserRuleCall_0_0_0_0_0 = (RuleCall)cLeft_sourceAssignment_0_0_0_0.eContents().get(0);
		private final Assignment cRight_sourceAssignment_0_0_0_1 = (Assignment)cGroup_0_0_0.eContents().get(1);
		private final RuleCall cRight_sourceJoinSourceParserRuleCall_0_0_0_1_0 = (RuleCall)cRight_sourceAssignment_0_0_0_1.eContents().get(0);
		private final Assignment cRight_uniAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRight_uniUNIDIRECTIONALParserRuleCall_0_1_0 = (RuleCall)cRight_uniAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Assignment cOnAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final RuleCall cOnONParserRuleCall_0_2_0_0 = (RuleCall)cOnAssignment_0_2_0.eContents().get(0);
		private final Assignment cExprAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_0_2_1_0 = (RuleCall)cExprAssignment_0_2_1.eContents().get(0);
		private final Assignment cWtAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cWtWithinTimeParserRuleCall_0_3_0 = (RuleCall)cWtAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cLeft_sourceAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cLeft_sourceJoinSourceParserRuleCall_1_0_0_0_0 = (RuleCall)cLeft_sourceAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cJoinAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cJoinJoinsParserRuleCall_1_0_0_1_0 = (RuleCall)cJoinAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRight_sourceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRight_sourceJoinSourceParserRuleCall_1_1_0 = (RuleCall)cRight_sourceAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cOnAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cOnONParserRuleCall_1_2_0_0 = (RuleCall)cOnAssignment_1_2_0.eContents().get(0);
		private final Assignment cExprAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_2_1_0 = (RuleCall)cExprAssignment_1_2_1.eContents().get(0);
		private final Assignment cWtAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cWtWithinTimeParserRuleCall_1_3_0 = (RuleCall)cWtAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final Assignment cLeft_sourceAssignment_2_0_0_0 = (Assignment)cGroup_2_0_0.eContents().get(0);
		private final RuleCall cLeft_sourceJoinSourceParserRuleCall_2_0_0_0_0 = (RuleCall)cLeft_sourceAssignment_2_0_0_0.eContents().get(0);
		private final Assignment cLeft_uniAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cLeft_uniUNIDIRECTIONALParserRuleCall_2_0_0_1_0 = (RuleCall)cLeft_uniAssignment_2_0_0_1.eContents().get(0);
		private final Assignment cJoinAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cJoinJoinsParserRuleCall_2_1_0 = (RuleCall)cJoinAssignment_2_1.eContents().get(0);
		private final Assignment cRight_sourceAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRight_sourceJoinSourceParserRuleCall_2_2_0 = (RuleCall)cRight_sourceAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cOnAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cOnONParserRuleCall_2_3_0_0 = (RuleCall)cOnAssignment_2_3_0.eContents().get(0);
		private final Assignment cExprAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_2_3_1_0 = (RuleCall)cExprAssignment_2_3_1.eContents().get(0);
		private final Assignment cWtAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cWtWithinTimeParserRuleCall_2_4_0 = (RuleCall)cWtAssignment_2_4.eContents().get(0);
		private final RuleCall cStandardStreamParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//JoinStream:
		//	=> (left_source=JoinSource right_source=JoinSource) right_uni=UNIDIRECTIONAL (on=ON expr=Expression)? wt=WithinTime? //(wtr=WithinTimeRange p=Per1)?
		//	| => (left_source=JoinSource join=joins) right_source=JoinSource (on=ON expr=Expression)? wt=WithinTime? //(wtr=WithinTimeRange p=Per1)?
		//	| => (left_source=JoinSource left_uni=UNIDIRECTIONAL) join=joins right_source=JoinSource (on=ON expr=Expression)?
		//	wt=WithinTime? //(wtr=WithinTimeRange p=Per1)?
		//	| => StandardStream;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (left_source=JoinSource right_source=JoinSource) right_uni=UNIDIRECTIONAL (on=ON expr=Expression)? wt=WithinTime? //(wtr=WithinTimeRange p=Per1)?
		//| => (left_source=JoinSource join=joins) right_source=JoinSource (on=ON expr=Expression)? wt=WithinTime? //(wtr=WithinTimeRange p=Per1)?
		//| => (left_source=JoinSource left_uni=UNIDIRECTIONAL) join=joins right_source=JoinSource (on=ON expr=Expression)?
		//wt=WithinTime? //(wtr=WithinTimeRange p=Per1)?
		//| => StandardStream
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (left_source=JoinSource right_source=JoinSource) right_uni=UNIDIRECTIONAL (on=ON expr=Expression)? wt=WithinTime?
		public Group getGroup_0() { return cGroup_0; }
		
		//=> (left_source=JoinSource right_source=JoinSource)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//left_source=JoinSource right_source=JoinSource
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }
		
		//left_source=JoinSource
		public Assignment getLeft_sourceAssignment_0_0_0_0() { return cLeft_sourceAssignment_0_0_0_0; }
		
		//JoinSource
		public RuleCall getLeft_sourceJoinSourceParserRuleCall_0_0_0_0_0() { return cLeft_sourceJoinSourceParserRuleCall_0_0_0_0_0; }
		
		//right_source=JoinSource
		public Assignment getRight_sourceAssignment_0_0_0_1() { return cRight_sourceAssignment_0_0_0_1; }
		
		//JoinSource
		public RuleCall getRight_sourceJoinSourceParserRuleCall_0_0_0_1_0() { return cRight_sourceJoinSourceParserRuleCall_0_0_0_1_0; }
		
		//right_uni=UNIDIRECTIONAL
		public Assignment getRight_uniAssignment_0_1() { return cRight_uniAssignment_0_1; }
		
		//UNIDIRECTIONAL
		public RuleCall getRight_uniUNIDIRECTIONALParserRuleCall_0_1_0() { return cRight_uniUNIDIRECTIONALParserRuleCall_0_1_0; }
		
		//(on=ON expr=Expression)?
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//on=ON
		public Assignment getOnAssignment_0_2_0() { return cOnAssignment_0_2_0; }
		
		//ON
		public RuleCall getOnONParserRuleCall_0_2_0_0() { return cOnONParserRuleCall_0_2_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_0_2_1() { return cExprAssignment_0_2_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_2_1_0() { return cExprExpressionParserRuleCall_0_2_1_0; }
		
		//wt=WithinTime?
		public Assignment getWtAssignment_0_3() { return cWtAssignment_0_3; }
		
		//WithinTime
		public RuleCall getWtWithinTimeParserRuleCall_0_3_0() { return cWtWithinTimeParserRuleCall_0_3_0; }
		
		//=> (left_source=JoinSource join=joins) right_source=JoinSource (on=ON expr=Expression)? wt=WithinTime?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> (left_source=JoinSource join=joins)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//left_source=JoinSource join=joins
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//left_source=JoinSource
		public Assignment getLeft_sourceAssignment_1_0_0_0() { return cLeft_sourceAssignment_1_0_0_0; }
		
		//JoinSource
		public RuleCall getLeft_sourceJoinSourceParserRuleCall_1_0_0_0_0() { return cLeft_sourceJoinSourceParserRuleCall_1_0_0_0_0; }
		
		//join=joins
		public Assignment getJoinAssignment_1_0_0_1() { return cJoinAssignment_1_0_0_1; }
		
		//joins
		public RuleCall getJoinJoinsParserRuleCall_1_0_0_1_0() { return cJoinJoinsParserRuleCall_1_0_0_1_0; }
		
		//right_source=JoinSource
		public Assignment getRight_sourceAssignment_1_1() { return cRight_sourceAssignment_1_1; }
		
		//JoinSource
		public RuleCall getRight_sourceJoinSourceParserRuleCall_1_1_0() { return cRight_sourceJoinSourceParserRuleCall_1_1_0; }
		
		//(on=ON expr=Expression)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//on=ON
		public Assignment getOnAssignment_1_2_0() { return cOnAssignment_1_2_0; }
		
		//ON
		public RuleCall getOnONParserRuleCall_1_2_0_0() { return cOnONParserRuleCall_1_2_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_2_1() { return cExprAssignment_1_2_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_2_1_0() { return cExprExpressionParserRuleCall_1_2_1_0; }
		
		//wt=WithinTime?
		public Assignment getWtAssignment_1_3() { return cWtAssignment_1_3; }
		
		//WithinTime
		public RuleCall getWtWithinTimeParserRuleCall_1_3_0() { return cWtWithinTimeParserRuleCall_1_3_0; }
		
		//=> (left_source=JoinSource left_uni=UNIDIRECTIONAL) join=joins right_source=JoinSource (on=ON expr=Expression)?
		//wt=WithinTime?
		public Group getGroup_2() { return cGroup_2; }
		
		//=> (left_source=JoinSource left_uni=UNIDIRECTIONAL)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//left_source=JoinSource left_uni=UNIDIRECTIONAL
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//left_source=JoinSource
		public Assignment getLeft_sourceAssignment_2_0_0_0() { return cLeft_sourceAssignment_2_0_0_0; }
		
		//JoinSource
		public RuleCall getLeft_sourceJoinSourceParserRuleCall_2_0_0_0_0() { return cLeft_sourceJoinSourceParserRuleCall_2_0_0_0_0; }
		
		//left_uni=UNIDIRECTIONAL
		public Assignment getLeft_uniAssignment_2_0_0_1() { return cLeft_uniAssignment_2_0_0_1; }
		
		//UNIDIRECTIONAL
		public RuleCall getLeft_uniUNIDIRECTIONALParserRuleCall_2_0_0_1_0() { return cLeft_uniUNIDIRECTIONALParserRuleCall_2_0_0_1_0; }
		
		//join=joins
		public Assignment getJoinAssignment_2_1() { return cJoinAssignment_2_1; }
		
		//joins
		public RuleCall getJoinJoinsParserRuleCall_2_1_0() { return cJoinJoinsParserRuleCall_2_1_0; }
		
		//right_source=JoinSource
		public Assignment getRight_sourceAssignment_2_2() { return cRight_sourceAssignment_2_2; }
		
		//JoinSource
		public RuleCall getRight_sourceJoinSourceParserRuleCall_2_2_0() { return cRight_sourceJoinSourceParserRuleCall_2_2_0; }
		
		//(on=ON expr=Expression)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//on=ON
		public Assignment getOnAssignment_2_3_0() { return cOnAssignment_2_3_0; }
		
		//ON
		public RuleCall getOnONParserRuleCall_2_3_0_0() { return cOnONParserRuleCall_2_3_0_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_2_3_1() { return cExprAssignment_2_3_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_3_1_0() { return cExprExpressionParserRuleCall_2_3_1_0; }
		
		//wt=WithinTime?
		public Assignment getWtAssignment_2_4() { return cWtAssignment_2_4; }
		
		//WithinTime
		public RuleCall getWtWithinTimeParserRuleCall_2_4_0() { return cWtWithinTimeParserRuleCall_2_4_0; }
		
		//=> StandardStream
		public RuleCall getStandardStreamParserRuleCall_3() { return cStandardStreamParserRuleCall_3; }
	}
	public class WithinTimeRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.WithinTimeRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWITHINParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cStartPatternAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartPatternExpressionParserRuleCall_1_0 = (RuleCall)cStartPatternAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEndPatternAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEndPatternExpressionParserRuleCall_2_1_0 = (RuleCall)cEndPatternAssignment_2_1.eContents().get(0);
		
		//WithinTimeRange:
		//	WITHIN startPattern=Expression (',' endPattern=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//WITHIN startPattern=Expression (',' endPattern=Expression)?
		public Group getGroup() { return cGroup; }
		
		//WITHIN
		public RuleCall getWITHINParserRuleCall_0() { return cWITHINParserRuleCall_0; }
		
		//startPattern=Expression
		public Assignment getStartPatternAssignment_1() { return cStartPatternAssignment_1; }
		
		//Expression
		public RuleCall getStartPatternExpressionParserRuleCall_1_0() { return cStartPatternExpressionParserRuleCall_1_0; }
		
		//(',' endPattern=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//endPattern=Expression
		public Assignment getEndPatternAssignment_2_1() { return cEndPatternAssignment_2_1; }
		
		//Expression
		public RuleCall getEndPatternExpressionParserRuleCall_2_1_0() { return cEndPatternExpressionParserRuleCall_2_1_0; }
	}
	public class Per1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Per1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPERParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpExpressionParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		
		//Per1:
		//	PER exp=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//PER exp=Expression
		public Group getGroup() { return cGroup; }
		
		//PER
		public RuleCall getPERParserRuleCall_0() { return cPERParserRuleCall_0; }
		
		//exp=Expression
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0() { return cExpExpressionParserRuleCall_1_0; }
	}
	public class JoinSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.JoinSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMainSourceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAASParserRuleCall_1_0_0 = (RuleCall)cAAssignment_1_0.eContents().get(0);
		private final Assignment cStrAliasAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStrAliasStreamAliasParserRuleCall_1_1_0 = (RuleCall)cStrAliasAssignment_1_1.eContents().get(0);
		
		//JoinSource:
		//	MainSource (a=AS strAlias=StreamAlias)?;
		@Override public ParserRule getRule() { return rule; }
		
		//MainSource (a=AS strAlias=StreamAlias)?
		public Group getGroup() { return cGroup; }
		
		//MainSource
		public RuleCall getMainSourceParserRuleCall_0() { return cMainSourceParserRuleCall_0; }
		
		//(a=AS strAlias=StreamAlias)?
		public Group getGroup_1() { return cGroup_1; }
		
		//a=AS
		public Assignment getAAssignment_1_0() { return cAAssignment_1_0; }
		
		//AS
		public RuleCall getAASParserRuleCall_1_0_0() { return cAASParserRuleCall_1_0_0; }
		
		//strAlias=StreamAlias
		public Assignment getStrAliasAssignment_1_1() { return cStrAliasAssignment_1_1; }
		
		//StreamAlias
		public RuleCall getStrAliasStreamAliasParserRuleCall_1_1_0() { return cStrAliasStreamAliasParserRuleCall_1_1_0; }
	}
	public class StreamAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.StreamAlias");
		private final Assignment cNaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNaNameParserRuleCall_0 = (RuleCall)cNaAssignment.eContents().get(0);
		
		//StreamAlias:
		//	na=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//na=Name
		public Assignment getNaAssignment() { return cNaAssignment; }
		
		//Name
		public RuleCall getNaNameParserRuleCall_0() { return cNaNameParserRuleCall_0; }
	}
	public class JoinsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.joins");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cJoinsAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cLEFTParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cOUTERParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cJOINParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cJoinsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cRIGHTParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cOUTERParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cJOINParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cJoinsAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cFULLParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cOUTERParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cJOINParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cJoinsAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cOUTERParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cJOINParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cJoinsAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cINNERParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cJOINParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//joins:
		//	{joins} LEFT OUTER JOIN
		//	| {joins} RIGHT OUTER JOIN
		//	| {joins} FULL OUTER JOIN
		//	| {joins} OUTER JOIN
		//	| {joins} INNER? JOIN;
		@Override public ParserRule getRule() { return rule; }
		
		//{joins} LEFT OUTER JOIN | {joins} RIGHT OUTER JOIN | {joins} FULL OUTER JOIN | {joins} OUTER JOIN | {joins} INNER? JOIN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{joins} LEFT OUTER JOIN
		public Group getGroup_0() { return cGroup_0; }
		
		//{joins}
		public Action getJoinsAction_0_0() { return cJoinsAction_0_0; }
		
		//LEFT
		public RuleCall getLEFTParserRuleCall_0_1() { return cLEFTParserRuleCall_0_1; }
		
		//OUTER
		public RuleCall getOUTERParserRuleCall_0_2() { return cOUTERParserRuleCall_0_2; }
		
		//JOIN
		public RuleCall getJOINParserRuleCall_0_3() { return cJOINParserRuleCall_0_3; }
		
		//{joins} RIGHT OUTER JOIN
		public Group getGroup_1() { return cGroup_1; }
		
		//{joins}
		public Action getJoinsAction_1_0() { return cJoinsAction_1_0; }
		
		//RIGHT
		public RuleCall getRIGHTParserRuleCall_1_1() { return cRIGHTParserRuleCall_1_1; }
		
		//OUTER
		public RuleCall getOUTERParserRuleCall_1_2() { return cOUTERParserRuleCall_1_2; }
		
		//JOIN
		public RuleCall getJOINParserRuleCall_1_3() { return cJOINParserRuleCall_1_3; }
		
		//{joins} FULL OUTER JOIN
		public Group getGroup_2() { return cGroup_2; }
		
		//{joins}
		public Action getJoinsAction_2_0() { return cJoinsAction_2_0; }
		
		//FULL
		public RuleCall getFULLParserRuleCall_2_1() { return cFULLParserRuleCall_2_1; }
		
		//OUTER
		public RuleCall getOUTERParserRuleCall_2_2() { return cOUTERParserRuleCall_2_2; }
		
		//JOIN
		public RuleCall getJOINParserRuleCall_2_3() { return cJOINParserRuleCall_2_3; }
		
		//{joins} OUTER JOIN
		public Group getGroup_3() { return cGroup_3; }
		
		//{joins}
		public Action getJoinsAction_3_0() { return cJoinsAction_3_0; }
		
		//OUTER
		public RuleCall getOUTERParserRuleCall_3_1() { return cOUTERParserRuleCall_3_1; }
		
		//JOIN
		public RuleCall getJOINParserRuleCall_3_2() { return cJOINParserRuleCall_3_2; }
		
		//{joins} INNER? JOIN
		public Group getGroup_4() { return cGroup_4; }
		
		//{joins}
		public Action getJoinsAction_4_0() { return cJoinsAction_4_0; }
		
		//INNER?
		public RuleCall getINNERParserRuleCall_4_1() { return cINNERParserRuleCall_4_1; }
		
		//JOIN
		public RuleCall getJOINParserRuleCall_4_2() { return cJOINParserRuleCall_4_2; }
	}
	public class StandardStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.StandardStream");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMainSourceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPostWindowHandlersAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPostWindowHandlersBasicSourceStreamHandlersParserRuleCall_1_0_0 = (RuleCall)cPostWindowHandlersAssignment_1_0.eContents().get(0);
		
		//StandardStream:
		//	MainSource => (postWindowHandlers=BasicSourceStreamHandlers?);
		@Override public ParserRule getRule() { return rule; }
		
		//MainSource => (postWindowHandlers=BasicSourceStreamHandlers?)
		public Group getGroup() { return cGroup; }
		
		//MainSource
		public RuleCall getMainSourceParserRuleCall_0() { return cMainSourceParserRuleCall_0; }
		
		//=> (postWindowHandlers=BasicSourceStreamHandlers?)
		public Group getGroup_1() { return cGroup_1; }
		
		//postWindowHandlers=BasicSourceStreamHandlers?
		public Assignment getPostWindowHandlersAssignment_1_0() { return cPostWindowHandlersAssignment_1_0; }
		
		//BasicSourceStreamHandlers
		public RuleCall getPostWindowHandlersBasicSourceStreamHandlersParserRuleCall_1_0_0() { return cPostWindowHandlersBasicSourceStreamHandlersParserRuleCall_1_0_0; }
	}
	public class MainSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MainSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSrcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSrcSourceParserRuleCall_0_0 = (RuleCall)cSrcAssignment_0.eContents().get(0);
		private final Assignment cBasicSShAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBasicSShBasicSourceStreamHandlers1ParserRuleCall_1_0 = (RuleCall)cBasicSShAssignment_1.eContents().get(0);
		
		//MainSource:
		//	src=Source basicSSh=BasicSourceStreamHandlers1;
		@Override public ParserRule getRule() { return rule; }
		
		////=>(src=Source =>(preWindowHandlers = BasicSourceStreamHandlers)? (=>(window = Win)?))
		//src=Source basicSSh=BasicSourceStreamHandlers1
		public Group getGroup() { return cGroup; }
		
		////=>(src=Source =>(preWindowHandlers = BasicSourceStreamHandlers)? (=>(window = Win)?))
		//src=Source
		public Assignment getSrcAssignment_0() { return cSrcAssignment_0; }
		
		//Source
		public RuleCall getSrcSourceParserRuleCall_0_0() { return cSrcSourceParserRuleCall_0_0; }
		
		//basicSSh=BasicSourceStreamHandlers1
		public Assignment getBasicSShAssignment_1() { return cBasicSShAssignment_1; }
		
		//BasicSourceStreamHandlers1
		public RuleCall getBasicSShBasicSourceStreamHandlers1ParserRuleCall_1_0() { return cBasicSShBasicSourceStreamHandlers1ParserRuleCall_1_0; }
	}
	public class PatternStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PatternStream");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEveryPatternSourceChainParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAbsentPatternSourceChainParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PatternStream:
		//	=> EveryPatternSourceChain
		//	| => AbsentPatternSourceChain;
		@Override public ParserRule getRule() { return rule; }
		
		//=> EveryPatternSourceChain | => AbsentPatternSourceChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> EveryPatternSourceChain
		public RuleCall getEveryPatternSourceChainParserRuleCall_0() { return cEveryPatternSourceChainParserRuleCall_0; }
		
		//=> AbsentPatternSourceChain
		public RuleCall getAbsentPatternSourceChainParserRuleCall_1() { return cAbsentPatternSourceChainParserRuleCall_1; }
	}
	public class EveryPatternSourceChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.EveryPatternSourceChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEveryPatternSourceChain1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cEveryPatternSourceChainLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightEveryPatternSourceChain1ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//EveryPatternSourceChain:
		//	EveryPatternSourceChain1 => ({EveryPatternSourceChain.left=current} op='->' right=EveryPatternSourceChain1)*;
		@Override public ParserRule getRule() { return rule; }
		
		//EveryPatternSourceChain1 => ({EveryPatternSourceChain.left=current} op='->' right=EveryPatternSourceChain1)*
		public Group getGroup() { return cGroup; }
		
		//EveryPatternSourceChain1
		public RuleCall getEveryPatternSourceChain1ParserRuleCall_0() { return cEveryPatternSourceChain1ParserRuleCall_0; }
		
		//=> ({EveryPatternSourceChain.left=current} op='->' right=EveryPatternSourceChain1)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{EveryPatternSourceChain.left=current} op='->' right=EveryPatternSourceChain1
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{EveryPatternSourceChain.left=current}
		public Action getEveryPatternSourceChainLeftAction_1_0_0() { return cEveryPatternSourceChainLeftAction_1_0_0; }
		
		//op='->'
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//'->'
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_1_0_1_0() { return cOpHyphenMinusGreaterThanSignKeyword_1_0_1_0; }
		
		//right=EveryPatternSourceChain1
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//EveryPatternSourceChain1
		public RuleCall getRightEveryPatternSourceChain1ParserRuleCall_1_0_2_0() { return cRightEveryPatternSourceChain1ParserRuleCall_1_0_2_0; }
	}
	public class EveryPatternSourceChain1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.EveryPatternSourceChain1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Assignment cEpsAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cEpsEveryPatternSourceChainParserRuleCall_0_0_1_0 = (RuleCall)cEpsAssignment_0_0_1.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final Assignment cWtAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cWtWithinTimeParserRuleCall_0_0_3_0 = (RuleCall)cWtAssignment_0_0_3.eContents().get(0);
		private final Assignment cPscAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPscPatternSourceChainParserRuleCall_1_0 = (RuleCall)cPscAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cEveryAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cEveryEVERYParserRuleCall_2_0_0 = (RuleCall)cEveryAssignment_2_0.eContents().get(0);
		private final Assignment cPscAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPscPatternSourceChain1ParserRuleCall_2_1_0 = (RuleCall)cPscAssignment_2_1.eContents().get(0);
		
		//EveryPatternSourceChain1 EveryPatternSourceChain:
		//	=> (OPEN_PAR eps=EveryPatternSourceChain CLOSE_PAR wt=WithinTime?) | psc=PatternSourceChain
		//	//|EVERY psc1=PatternSourceChain1 
		//	/*|every=EVERY OPEN_PAR psc=PatternSourceChain CLOSE_PAR wt=WithinTime? 
		//	|every=EVERY ps1=PatternSource wt=WithinTime? */
		//	| every=EVERY psc=PatternSourceChain1;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (OPEN_PAR eps=EveryPatternSourceChain CLOSE_PAR wt=WithinTime?) | psc=PatternSourceChain //|EVERY psc1=PatternSourceChain1 
		///*|every=EVERY OPEN_PAR psc=PatternSourceChain CLOSE_PAR wt=WithinTime? 
		//	|every=EVERY ps1=PatternSource wt=WithinTime? */ | every=EVERY psc=PatternSourceChain1
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (OPEN_PAR eps=EveryPatternSourceChain CLOSE_PAR wt=WithinTime?)
		public Group getGroup_0() { return cGroup_0; }
		
		//OPEN_PAR eps=EveryPatternSourceChain CLOSE_PAR wt=WithinTime?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_0_0_0() { return cOPEN_PARParserRuleCall_0_0_0; }
		
		//eps=EveryPatternSourceChain
		public Assignment getEpsAssignment_0_0_1() { return cEpsAssignment_0_0_1; }
		
		//EveryPatternSourceChain
		public RuleCall getEpsEveryPatternSourceChainParserRuleCall_0_0_1_0() { return cEpsEveryPatternSourceChainParserRuleCall_0_0_1_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_0_0_2() { return cCLOSE_PARParserRuleCall_0_0_2; }
		
		//wt=WithinTime?
		public Assignment getWtAssignment_0_0_3() { return cWtAssignment_0_0_3; }
		
		//WithinTime
		public RuleCall getWtWithinTimeParserRuleCall_0_0_3_0() { return cWtWithinTimeParserRuleCall_0_0_3_0; }
		
		//psc=PatternSourceChain
		public Assignment getPscAssignment_1() { return cPscAssignment_1; }
		
		//PatternSourceChain
		public RuleCall getPscPatternSourceChainParserRuleCall_1_0() { return cPscPatternSourceChainParserRuleCall_1_0; }
		
		//every=EVERY psc=PatternSourceChain1
		public Group getGroup_2() { return cGroup_2; }
		
		//every=EVERY
		public Assignment getEveryAssignment_2_0() { return cEveryAssignment_2_0; }
		
		//EVERY
		public RuleCall getEveryEVERYParserRuleCall_2_0_0() { return cEveryEVERYParserRuleCall_2_0_0; }
		
		//psc=PatternSourceChain1
		public Assignment getPscAssignment_2_1() { return cPscAssignment_2_1; }
		
		//PatternSourceChain1
		public RuleCall getPscPatternSourceChain1ParserRuleCall_2_1_0() { return cPscPatternSourceChain1ParserRuleCall_2_1_0; }
	}
	public class PatternSourceChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PatternSourceChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPatternSourceChain1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cPatternSourceChainLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpHyphenMinusGreaterThanSignKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightPatternSourceChain1ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//PatternSourceChain:
		//	PatternSourceChain1 -> ({PatternSourceChain.left=current} op='->' right=PatternSourceChain1)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PatternSourceChain1 -> ({PatternSourceChain.left=current} op='->' right=PatternSourceChain1)*
		public Group getGroup() { return cGroup; }
		
		//PatternSourceChain1
		public RuleCall getPatternSourceChain1ParserRuleCall_0() { return cPatternSourceChain1ParserRuleCall_0; }
		
		//-> ({PatternSourceChain.left=current} op='->' right=PatternSourceChain1)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PatternSourceChain.left=current} op='->' right=PatternSourceChain1
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{PatternSourceChain.left=current}
		public Action getPatternSourceChainLeftAction_1_0_0() { return cPatternSourceChainLeftAction_1_0_0; }
		
		//op='->'
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//'->'
		public Keyword getOpHyphenMinusGreaterThanSignKeyword_1_0_1_0() { return cOpHyphenMinusGreaterThanSignKeyword_1_0_1_0; }
		
		//right=PatternSourceChain1
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//PatternSourceChain1
		public RuleCall getRightPatternSourceChain1ParserRuleCall_1_0_2_0() { return cRightPatternSourceChain1ParserRuleCall_1_0_2_0; }
	}
	public class PatternSourceChain1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PatternSourceChain1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Assignment cPsc_2Assignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cPsc_2PatternSourceChainParserRuleCall_0_0_1_0 = (RuleCall)cPsc_2Assignment_0_0_1.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final Assignment cWtAssignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cWtWithinTimeParserRuleCall_0_0_3_0 = (RuleCall)cWtAssignment_0_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPsPatternSourceParserRuleCall_1_0_0 = (RuleCall)cPsAssignment_1_0.eContents().get(0);
		private final Assignment cWtAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWtWithinTimeParserRuleCall_1_1_0 = (RuleCall)cWtAssignment_1_1.eContents().get(0);
		
		//PatternSourceChain1 PatternSourceChain:
		//	=> (OPEN_PAR psc_2=PatternSourceChain CLOSE_PAR wt=WithinTime?) | ps=PatternSource wt=WithinTime?;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (OPEN_PAR psc_2=PatternSourceChain CLOSE_PAR wt=WithinTime?) | ps=PatternSource wt=WithinTime?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (OPEN_PAR psc_2=PatternSourceChain CLOSE_PAR wt=WithinTime?)
		public Group getGroup_0() { return cGroup_0; }
		
		//OPEN_PAR psc_2=PatternSourceChain CLOSE_PAR wt=WithinTime?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_0_0_0() { return cOPEN_PARParserRuleCall_0_0_0; }
		
		//psc_2=PatternSourceChain
		public Assignment getPsc_2Assignment_0_0_1() { return cPsc_2Assignment_0_0_1; }
		
		//PatternSourceChain
		public RuleCall getPsc_2PatternSourceChainParserRuleCall_0_0_1_0() { return cPsc_2PatternSourceChainParserRuleCall_0_0_1_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_0_0_2() { return cCLOSE_PARParserRuleCall_0_0_2; }
		
		//wt=WithinTime?
		public Assignment getWtAssignment_0_0_3() { return cWtAssignment_0_0_3; }
		
		//WithinTime
		public RuleCall getWtWithinTimeParserRuleCall_0_0_3_0() { return cWtWithinTimeParserRuleCall_0_0_3_0; }
		
		//ps=PatternSource wt=WithinTime?
		public Group getGroup_1() { return cGroup_1; }
		
		//ps=PatternSource
		public Assignment getPsAssignment_1_0() { return cPsAssignment_1_0; }
		
		//PatternSource
		public RuleCall getPsPatternSourceParserRuleCall_1_0_0() { return cPsPatternSourceParserRuleCall_1_0_0; }
		
		//wt=WithinTime?
		public Assignment getWtAssignment_1_1() { return cWtAssignment_1_1; }
		
		//WithinTime
		public RuleCall getWtWithinTimeParserRuleCall_1_1_0() { return cWtWithinTimeParserRuleCall_1_1_0; }
	}
	public class PatternSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PatternSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLssAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLssLogicalStatefulSourceParserRuleCall_0_0 = (RuleCall)cLssAssignment_0.eContents().get(0);
		private final Assignment cPssAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPssPatternCollectionStatefulSourceParserRuleCall_1_0 = (RuleCall)cPssAssignment_1.eContents().get(0);
		private final Assignment cStdssAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStdssStandardStatefulSourceParserRuleCall_2_0 = (RuleCall)cStdssAssignment_2.eContents().get(0);
		private final Assignment cLogicalAbsStatefulSrcAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cLogicalAbsStatefulSrcLogicalAbsentStatefulSourceParserRuleCall_3_0 = (RuleCall)cLogicalAbsStatefulSrcAssignment_3.eContents().get(0);
		
		//PatternSource:
		//	=> lss=LogicalStatefulSource | => pss=PatternCollectionStatefulSource | => stdss=StandardStatefulSource | =>
		//	logicalAbsStatefulSrc=LogicalAbsentStatefulSource;
		@Override public ParserRule getRule() { return rule; }
		
		//=> lss=LogicalStatefulSource | => pss=PatternCollectionStatefulSource | => stdss=StandardStatefulSource | =>
		//logicalAbsStatefulSrc=LogicalAbsentStatefulSource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> lss=LogicalStatefulSource
		public Assignment getLssAssignment_0() { return cLssAssignment_0; }
		
		//LogicalStatefulSource
		public RuleCall getLssLogicalStatefulSourceParserRuleCall_0_0() { return cLssLogicalStatefulSourceParserRuleCall_0_0; }
		
		//=> pss=PatternCollectionStatefulSource
		public Assignment getPssAssignment_1() { return cPssAssignment_1; }
		
		//PatternCollectionStatefulSource
		public RuleCall getPssPatternCollectionStatefulSourceParserRuleCall_1_0() { return cPssPatternCollectionStatefulSourceParserRuleCall_1_0; }
		
		//=> stdss=StandardStatefulSource
		public Assignment getStdssAssignment_2() { return cStdssAssignment_2; }
		
		//StandardStatefulSource
		public RuleCall getStdssStandardStatefulSourceParserRuleCall_2_0() { return cStdssStandardStatefulSourceParserRuleCall_2_0; }
		
		//=> logicalAbsStatefulSrc=LogicalAbsentStatefulSource
		public Assignment getLogicalAbsStatefulSrcAssignment_3() { return cLogicalAbsStatefulSrcAssignment_3; }
		
		//LogicalAbsentStatefulSource
		public RuleCall getLogicalAbsStatefulSrcLogicalAbsentStatefulSourceParserRuleCall_3_0() { return cLogicalAbsStatefulSrcLogicalAbsentStatefulSourceParserRuleCall_3_0; }
	}
	public class LogicalStatefulSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LogicalStatefulSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Group cGroup_0_0_0 = (Group)cGroup_0_0.eContents().get(0);
		private final Assignment cStdSourceAssignment_0_0_0_0 = (Assignment)cGroup_0_0_0.eContents().get(0);
		private final RuleCall cStdSourceStandardStatefulSourceParserRuleCall_0_0_0_0_0 = (RuleCall)cStdSourceAssignment_0_0_0_0.eContents().get(0);
		private final Assignment cAndAssignment_0_0_0_1 = (Assignment)cGroup_0_0_0.eContents().get(1);
		private final RuleCall cAndANDParserRuleCall_0_0_0_1_0 = (RuleCall)cAndAssignment_0_0_0_1.eContents().get(0);
		private final Assignment cStdSourceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStdSourceStandardStatefulSourceParserRuleCall_0_1_0 = (RuleCall)cStdSourceAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Assignment cStdSourceAssignment_1_0_0_0 = (Assignment)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cStdSourceStandardStatefulSourceParserRuleCall_1_0_0_0_0 = (RuleCall)cStdSourceAssignment_1_0_0_0.eContents().get(0);
		private final Assignment cOrAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cOrORParserRuleCall_1_0_0_1_0 = (RuleCall)cOrAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cStdSourceAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStdSourceStandardStatefulSourceParserRuleCall_1_1_0 = (RuleCall)cStdSourceAssignment_1_1.eContents().get(0);
		
		//LogicalStatefulSource: //=>(not=NOT stdSource+=StandardStatefulSource (and=AND stdSource+=StandardStatefulSource) )
		//	=> (stdSource+=StandardStatefulSource and=AND) stdSource+=StandardStatefulSource | =>
		//	(stdSource+=StandardStatefulSource or=OR) stdSource+=StandardStatefulSource;
		@Override public ParserRule getRule() { return rule; }
		
		////=>(not=NOT stdSource+=StandardStatefulSource (and=AND stdSource+=StandardStatefulSource) )
		//=> (stdSource+=StandardStatefulSource and=AND) stdSource+=StandardStatefulSource | => (stdSource+=StandardStatefulSource
		//or=OR) stdSource+=StandardStatefulSource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		////=>(not=NOT stdSource+=StandardStatefulSource (and=AND stdSource+=StandardStatefulSource) )
		//=> (stdSource+=StandardStatefulSource and=AND) stdSource+=StandardStatefulSource
		public Group getGroup_0() { return cGroup_0; }
		
		////=>(not=NOT stdSource+=StandardStatefulSource (and=AND stdSource+=StandardStatefulSource) )
		//=> (stdSource+=StandardStatefulSource and=AND)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//stdSource+=StandardStatefulSource and=AND
		public Group getGroup_0_0_0() { return cGroup_0_0_0; }
		
		//stdSource+=StandardStatefulSource
		public Assignment getStdSourceAssignment_0_0_0_0() { return cStdSourceAssignment_0_0_0_0; }
		
		//StandardStatefulSource
		public RuleCall getStdSourceStandardStatefulSourceParserRuleCall_0_0_0_0_0() { return cStdSourceStandardStatefulSourceParserRuleCall_0_0_0_0_0; }
		
		//and=AND
		public Assignment getAndAssignment_0_0_0_1() { return cAndAssignment_0_0_0_1; }
		
		//AND
		public RuleCall getAndANDParserRuleCall_0_0_0_1_0() { return cAndANDParserRuleCall_0_0_0_1_0; }
		
		//stdSource+=StandardStatefulSource
		public Assignment getStdSourceAssignment_0_1() { return cStdSourceAssignment_0_1; }
		
		//StandardStatefulSource
		public RuleCall getStdSourceStandardStatefulSourceParserRuleCall_0_1_0() { return cStdSourceStandardStatefulSourceParserRuleCall_0_1_0; }
		
		//=> (stdSource+=StandardStatefulSource or=OR) stdSource+=StandardStatefulSource
		public Group getGroup_1() { return cGroup_1; }
		
		//=> (stdSource+=StandardStatefulSource or=OR)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//stdSource+=StandardStatefulSource or=OR
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//stdSource+=StandardStatefulSource
		public Assignment getStdSourceAssignment_1_0_0_0() { return cStdSourceAssignment_1_0_0_0; }
		
		//StandardStatefulSource
		public RuleCall getStdSourceStandardStatefulSourceParserRuleCall_1_0_0_0_0() { return cStdSourceStandardStatefulSourceParserRuleCall_1_0_0_0_0; }
		
		//or=OR
		public Assignment getOrAssignment_1_0_0_1() { return cOrAssignment_1_0_0_1; }
		
		//OR
		public RuleCall getOrORParserRuleCall_1_0_0_1_0() { return cOrORParserRuleCall_1_0_0_1_0; }
		
		//stdSource+=StandardStatefulSource
		public Assignment getStdSourceAssignment_1_1() { return cStdSourceAssignment_1_1; }
		
		//StandardStatefulSource
		public RuleCall getStdSourceStandardStatefulSourceParserRuleCall_1_1_0() { return cStdSourceStandardStatefulSourceParserRuleCall_1_1_0; }
	}
	public class PatternCollectionStatefulSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PatternCollectionStatefulSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStandardStatefulSourceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCollAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCollCollectParserRuleCall_2_0 = (RuleCall)cCollAssignment_2.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PatternCollectionStatefulSource:
		//	StandardStatefulSource '<' coll=Collect '>';
		@Override public ParserRule getRule() { return rule; }
		
		//StandardStatefulSource '<' coll=Collect '>'
		public Group getGroup() { return cGroup; }
		
		//StandardStatefulSource
		public RuleCall getStandardStatefulSourceParserRuleCall_0() { return cStandardStatefulSourceParserRuleCall_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//coll=Collect
		public Assignment getCollAssignment_2() { return cCollAssignment_2; }
		
		//Collect
		public RuleCall getCollCollectParserRuleCall_2_0() { return cCollCollectParserRuleCall_2_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}
	public class CollectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Collect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCollectAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cStartAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cStartINT_LITERALParserRuleCall_1_0_0_0 = (RuleCall)cStartAssignment_1_0_0.eContents().get(0);
		private final Keyword cColonKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cEndAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cEndINT_LITERALParserRuleCall_1_0_2_0 = (RuleCall)cEndAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cStartAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cStartINT_LITERALParserRuleCall_1_1_0_0 = (RuleCall)cStartAssignment_1_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cColonKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cEndAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cEndINT_LITERALParserRuleCall_1_2_1_0 = (RuleCall)cEndAssignment_1_2_1.eContents().get(0);
		private final RuleCall cINT_LITERALParserRuleCall_1_3 = (RuleCall)cAlternatives_1.eContents().get(3);
		
		//Collect:
		//	{Collect} (start=INT_LITERAL ':' end=INT_LITERAL
		//	| start=INT_LITERAL ':'
		//	| ':' end=INT_LITERAL
		//	| INT_LITERAL);
		@Override public ParserRule getRule() { return rule; }
		
		//{Collect} (start=INT_LITERAL ':' end=INT_LITERAL | start=INT_LITERAL ':' | ':' end=INT_LITERAL | INT_LITERAL)
		public Group getGroup() { return cGroup; }
		
		//{Collect}
		public Action getCollectAction_0() { return cCollectAction_0; }
		
		//start=INT_LITERAL ':' end=INT_LITERAL | start=INT_LITERAL ':' | ':' end=INT_LITERAL | INT_LITERAL
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//start=INT_LITERAL ':' end=INT_LITERAL
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//start=INT_LITERAL
		public Assignment getStartAssignment_1_0_0() { return cStartAssignment_1_0_0; }
		
		//INT_LITERAL
		public RuleCall getStartINT_LITERALParserRuleCall_1_0_0_0() { return cStartINT_LITERALParserRuleCall_1_0_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_1() { return cColonKeyword_1_0_1; }
		
		//end=INT_LITERAL
		public Assignment getEndAssignment_1_0_2() { return cEndAssignment_1_0_2; }
		
		//INT_LITERAL
		public RuleCall getEndINT_LITERALParserRuleCall_1_0_2_0() { return cEndINT_LITERALParserRuleCall_1_0_2_0; }
		
		//start=INT_LITERAL ':'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//start=INT_LITERAL
		public Assignment getStartAssignment_1_1_0() { return cStartAssignment_1_1_0; }
		
		//INT_LITERAL
		public RuleCall getStartINT_LITERALParserRuleCall_1_1_0_0() { return cStartINT_LITERALParserRuleCall_1_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1_1() { return cColonKeyword_1_1_1; }
		
		//':' end=INT_LITERAL
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//':'
		public Keyword getColonKeyword_1_2_0() { return cColonKeyword_1_2_0; }
		
		//end=INT_LITERAL
		public Assignment getEndAssignment_1_2_1() { return cEndAssignment_1_2_1; }
		
		//INT_LITERAL
		public RuleCall getEndINT_LITERALParserRuleCall_1_2_1_0() { return cEndINT_LITERALParserRuleCall_1_2_1_0; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_1_3() { return cINT_LITERALParserRuleCall_1_3; }
	}
	public class WithinTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.WithinTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWITHINParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTvAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTvTimeValueParserRuleCall_1_0 = (RuleCall)cTvAssignment_1.eContents().get(0);
		
		//WithinTime:
		//	WITHIN tv=TimeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//WITHIN tv=TimeValue
		public Group getGroup() { return cGroup; }
		
		//WITHIN
		public RuleCall getWITHINParserRuleCall_0() { return cWITHINParserRuleCall_0; }
		
		//tv=TimeValue
		public Assignment getTvAssignment_1() { return cTvAssignment_1; }
		
		//TimeValue
		public RuleCall getTvTimeValueParserRuleCall_1_0() { return cTvTimeValueParserRuleCall_1_0; }
	}
	public class LogicalAbsentStatefulSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LogicalAbsentStatefulSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Assignment cLogicalAbsStatefulSrcAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cLogicalAbsStatefulSrcLogicalAbsentStatefulSourceParserRuleCall_0_0_1_0 = (RuleCall)cLogicalAbsStatefulSrcAssignment_0_0_1.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cStdSourceAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cStdSourceStandardStatefulSourceParserRuleCall_1_0_0_0 = (RuleCall)cStdSourceAssignment_1_0_0.eContents().get(0);
		private final Assignment cAndAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAndANDParserRuleCall_1_0_1_0 = (RuleCall)cAndAssignment_1_0_1.eContents().get(0);
		private final Assignment cNotAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cNotNOTParserRuleCall_1_0_2_0 = (RuleCall)cNotAssignment_1_0_2.eContents().get(0);
		private final Assignment cBsAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cBsBasicSourceParserRuleCall_1_0_3_0 = (RuleCall)cBsAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Group cGroup_2_0_0 = (Group)cGroup_2_0.eContents().get(0);
		private final RuleCall cNOTParserRuleCall_2_0_0_0 = (RuleCall)cGroup_2_0_0.eContents().get(0);
		private final Assignment cBsAssignment_2_0_0_1 = (Assignment)cGroup_2_0_0.eContents().get(1);
		private final RuleCall cBsBasicSourceParserRuleCall_2_0_0_1_0 = (RuleCall)cBsAssignment_2_0_0_1.eContents().get(0);
		private final Assignment cAndAssignment_2_0_0_2 = (Assignment)cGroup_2_0_0.eContents().get(2);
		private final RuleCall cAndANDParserRuleCall_2_0_0_2_0 = (RuleCall)cAndAssignment_2_0_0_2.eContents().get(0);
		private final Assignment cStdSourceAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStdSourceStandardStatefulSourceParserRuleCall_2_1_0 = (RuleCall)cStdSourceAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Assignment cStdSourceAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cStdSourceStandardStatefulSourceParserRuleCall_3_0_0_0 = (RuleCall)cStdSourceAssignment_3_0_0.eContents().get(0);
		private final Assignment cAndAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cAndANDParserRuleCall_3_0_1_0 = (RuleCall)cAndAssignment_3_0_1.eContents().get(0);
		private final Assignment cBasicAbsentPatternSource1Assignment_3_0_2 = (Assignment)cGroup_3_0.eContents().get(2);
		private final RuleCall cBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_3_0_2_0 = (RuleCall)cBasicAbsentPatternSource1Assignment_3_0_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Assignment cBasicAbsentPatternSource1Assignment_4_0_0 = (Assignment)cGroup_4_0.eContents().get(0);
		private final RuleCall cBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_4_0_0_0 = (RuleCall)cBasicAbsentPatternSource1Assignment_4_0_0.eContents().get(0);
		private final Assignment cAndAssignment_4_0_1 = (Assignment)cGroup_4_0.eContents().get(1);
		private final RuleCall cAndANDParserRuleCall_4_0_1_0 = (RuleCall)cAndAssignment_4_0_1.eContents().get(0);
		private final Assignment cStdSourceAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cStdSourceStandardStatefulSourceParserRuleCall_4_0_2_0 = (RuleCall)cStdSourceAssignment_4_0_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cGroup_5.eContents().get(0);
		private final Assignment cBasicAbsentPatternSource2Assignment_5_0_0 = (Assignment)cGroup_5_0.eContents().get(0);
		private final RuleCall cBasicAbsentPatternSource2BasicAbsentPatternSourceParserRuleCall_5_0_0_0 = (RuleCall)cBasicAbsentPatternSource2Assignment_5_0_0.eContents().get(0);
		private final Assignment cAndAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cAndANDParserRuleCall_5_0_1_0 = (RuleCall)cAndAssignment_5_0_1.eContents().get(0);
		private final Assignment cBasicAbsentPatternSourceAssignment_5_0_2 = (Assignment)cGroup_5_0.eContents().get(2);
		private final RuleCall cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_5_0_2_0 = (RuleCall)cBasicAbsentPatternSourceAssignment_5_0_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cGroup_6.eContents().get(0);
		private final Assignment cStdSourceAssignment_6_0_0 = (Assignment)cGroup_6_0.eContents().get(0);
		private final RuleCall cStdSourceStandardStatefulSourceParserRuleCall_6_0_0_0 = (RuleCall)cStdSourceAssignment_6_0_0.eContents().get(0);
		private final Assignment cOAssignment_6_0_1 = (Assignment)cGroup_6_0.eContents().get(1);
		private final RuleCall cOORParserRuleCall_6_0_1_0 = (RuleCall)cOAssignment_6_0_1.eContents().get(0);
		private final Assignment cBasicAbsentPatternSource1Assignment_6_0_2 = (Assignment)cGroup_6_0.eContents().get(2);
		private final RuleCall cBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_6_0_2_0 = (RuleCall)cBasicAbsentPatternSource1Assignment_6_0_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Group cGroup_7_0 = (Group)cGroup_7.eContents().get(0);
		private final Assignment cBasicAbsentPatternSource1Assignment_7_0_0 = (Assignment)cGroup_7_0.eContents().get(0);
		private final RuleCall cBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_7_0_0_0 = (RuleCall)cBasicAbsentPatternSource1Assignment_7_0_0.eContents().get(0);
		private final Assignment cOAssignment_7_0_1 = (Assignment)cGroup_7_0.eContents().get(1);
		private final RuleCall cOORParserRuleCall_7_0_1_0 = (RuleCall)cOAssignment_7_0_1.eContents().get(0);
		private final Assignment cStdSourceAssignment_7_0_2 = (Assignment)cGroup_7_0.eContents().get(2);
		private final RuleCall cStdSourceStandardStatefulSourceParserRuleCall_7_0_2_0 = (RuleCall)cStdSourceAssignment_7_0_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cGroup_8.eContents().get(0);
		private final Assignment cBasicAbsentPatternSource2Assignment_8_0_0 = (Assignment)cGroup_8_0.eContents().get(0);
		private final RuleCall cBasicAbsentPatternSource2BasicAbsentPatternSourceParserRuleCall_8_0_0_0 = (RuleCall)cBasicAbsentPatternSource2Assignment_8_0_0.eContents().get(0);
		private final Assignment cOAssignment_8_0_1 = (Assignment)cGroup_8_0.eContents().get(1);
		private final RuleCall cOORParserRuleCall_8_0_1_0 = (RuleCall)cOAssignment_8_0_1.eContents().get(0);
		private final Assignment cBasicAbsentPatternSourceAssignment_8_0_2 = (Assignment)cGroup_8_0.eContents().get(2);
		private final RuleCall cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_8_0_2_0 = (RuleCall)cBasicAbsentPatternSourceAssignment_8_0_2.eContents().get(0);
		
		//LogicalAbsentStatefulSource:
		//	=> (OPEN_PAR logicalAbsStatefulSrc=LogicalAbsentStatefulSource CLOSE_PAR) | => (stdSource=StandardStatefulSource
		//	and=AND not=NOT bs=BasicSource) | => (NOT bs=BasicSource and=AND) stdSource=StandardStatefulSource
		//	| => (stdSource=StandardStatefulSource and=AND basicAbsentPatternSource1=BasicAbsentPatternSource) | =>
		//	(basicAbsentPatternSource1=BasicAbsentPatternSource and=AND stdSource=StandardStatefulSource) | =>
		//	(basicAbsentPatternSource2=BasicAbsentPatternSource and=AND basicAbsentPatternSource=BasicAbsentPatternSource) | =>
		//	(stdSource=StandardStatefulSource o=OR basicAbsentPatternSource1=BasicAbsentPatternSource) | =>
		//	(basicAbsentPatternSource1=BasicAbsentPatternSource o=OR stdSource=StandardStatefulSource) | =>
		//	(basicAbsentPatternSource2=BasicAbsentPatternSource o=OR basicAbsentPatternSource=BasicAbsentPatternSource);
		@Override public ParserRule getRule() { return rule; }
		
		//=> (OPEN_PAR logicalAbsStatefulSrc=LogicalAbsentStatefulSource CLOSE_PAR) | => (stdSource=StandardStatefulSource and=AND
		//not=NOT bs=BasicSource) | => (NOT bs=BasicSource and=AND) stdSource=StandardStatefulSource | =>
		//(stdSource=StandardStatefulSource and=AND basicAbsentPatternSource1=BasicAbsentPatternSource) | =>
		//(basicAbsentPatternSource1=BasicAbsentPatternSource and=AND stdSource=StandardStatefulSource) | =>
		//(basicAbsentPatternSource2=BasicAbsentPatternSource and=AND basicAbsentPatternSource=BasicAbsentPatternSource) | =>
		//(stdSource=StandardStatefulSource o=OR basicAbsentPatternSource1=BasicAbsentPatternSource) | =>
		//(basicAbsentPatternSource1=BasicAbsentPatternSource o=OR stdSource=StandardStatefulSource) | =>
		//(basicAbsentPatternSource2=BasicAbsentPatternSource o=OR basicAbsentPatternSource=BasicAbsentPatternSource)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (OPEN_PAR logicalAbsStatefulSrc=LogicalAbsentStatefulSource CLOSE_PAR)
		public Group getGroup_0() { return cGroup_0; }
		
		//OPEN_PAR logicalAbsStatefulSrc=LogicalAbsentStatefulSource CLOSE_PAR
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_0_0_0() { return cOPEN_PARParserRuleCall_0_0_0; }
		
		//logicalAbsStatefulSrc=LogicalAbsentStatefulSource
		public Assignment getLogicalAbsStatefulSrcAssignment_0_0_1() { return cLogicalAbsStatefulSrcAssignment_0_0_1; }
		
		//LogicalAbsentStatefulSource
		public RuleCall getLogicalAbsStatefulSrcLogicalAbsentStatefulSourceParserRuleCall_0_0_1_0() { return cLogicalAbsStatefulSrcLogicalAbsentStatefulSourceParserRuleCall_0_0_1_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_0_0_2() { return cCLOSE_PARParserRuleCall_0_0_2; }
		
		//=> (stdSource=StandardStatefulSource and=AND not=NOT bs=BasicSource)
		public Group getGroup_1() { return cGroup_1; }
		
		//stdSource=StandardStatefulSource and=AND not=NOT bs=BasicSource
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//stdSource=StandardStatefulSource
		public Assignment getStdSourceAssignment_1_0_0() { return cStdSourceAssignment_1_0_0; }
		
		//StandardStatefulSource
		public RuleCall getStdSourceStandardStatefulSourceParserRuleCall_1_0_0_0() { return cStdSourceStandardStatefulSourceParserRuleCall_1_0_0_0; }
		
		//and=AND
		public Assignment getAndAssignment_1_0_1() { return cAndAssignment_1_0_1; }
		
		//AND
		public RuleCall getAndANDParserRuleCall_1_0_1_0() { return cAndANDParserRuleCall_1_0_1_0; }
		
		//not=NOT
		public Assignment getNotAssignment_1_0_2() { return cNotAssignment_1_0_2; }
		
		//NOT
		public RuleCall getNotNOTParserRuleCall_1_0_2_0() { return cNotNOTParserRuleCall_1_0_2_0; }
		
		//bs=BasicSource
		public Assignment getBsAssignment_1_0_3() { return cBsAssignment_1_0_3; }
		
		//BasicSource
		public RuleCall getBsBasicSourceParserRuleCall_1_0_3_0() { return cBsBasicSourceParserRuleCall_1_0_3_0; }
		
		//=> (NOT bs=BasicSource and=AND) stdSource=StandardStatefulSource
		public Group getGroup_2() { return cGroup_2; }
		
		//=> (NOT bs=BasicSource and=AND)
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//NOT bs=BasicSource and=AND
		public Group getGroup_2_0_0() { return cGroup_2_0_0; }
		
		//NOT
		public RuleCall getNOTParserRuleCall_2_0_0_0() { return cNOTParserRuleCall_2_0_0_0; }
		
		//bs=BasicSource
		public Assignment getBsAssignment_2_0_0_1() { return cBsAssignment_2_0_0_1; }
		
		//BasicSource
		public RuleCall getBsBasicSourceParserRuleCall_2_0_0_1_0() { return cBsBasicSourceParserRuleCall_2_0_0_1_0; }
		
		//and=AND
		public Assignment getAndAssignment_2_0_0_2() { return cAndAssignment_2_0_0_2; }
		
		//AND
		public RuleCall getAndANDParserRuleCall_2_0_0_2_0() { return cAndANDParserRuleCall_2_0_0_2_0; }
		
		//stdSource=StandardStatefulSource
		public Assignment getStdSourceAssignment_2_1() { return cStdSourceAssignment_2_1; }
		
		//StandardStatefulSource
		public RuleCall getStdSourceStandardStatefulSourceParserRuleCall_2_1_0() { return cStdSourceStandardStatefulSourceParserRuleCall_2_1_0; }
		
		//=> (stdSource=StandardStatefulSource and=AND basicAbsentPatternSource1=BasicAbsentPatternSource)
		public Group getGroup_3() { return cGroup_3; }
		
		//stdSource=StandardStatefulSource and=AND basicAbsentPatternSource1=BasicAbsentPatternSource
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//stdSource=StandardStatefulSource
		public Assignment getStdSourceAssignment_3_0_0() { return cStdSourceAssignment_3_0_0; }
		
		//StandardStatefulSource
		public RuleCall getStdSourceStandardStatefulSourceParserRuleCall_3_0_0_0() { return cStdSourceStandardStatefulSourceParserRuleCall_3_0_0_0; }
		
		//and=AND
		public Assignment getAndAssignment_3_0_1() { return cAndAssignment_3_0_1; }
		
		//AND
		public RuleCall getAndANDParserRuleCall_3_0_1_0() { return cAndANDParserRuleCall_3_0_1_0; }
		
		//basicAbsentPatternSource1=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSource1Assignment_3_0_2() { return cBasicAbsentPatternSource1Assignment_3_0_2; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_3_0_2_0() { return cBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_3_0_2_0; }
		
		//=> (basicAbsentPatternSource1=BasicAbsentPatternSource and=AND stdSource=StandardStatefulSource)
		public Group getGroup_4() { return cGroup_4; }
		
		//basicAbsentPatternSource1=BasicAbsentPatternSource and=AND stdSource=StandardStatefulSource
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//basicAbsentPatternSource1=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSource1Assignment_4_0_0() { return cBasicAbsentPatternSource1Assignment_4_0_0; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_4_0_0_0() { return cBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_4_0_0_0; }
		
		//and=AND
		public Assignment getAndAssignment_4_0_1() { return cAndAssignment_4_0_1; }
		
		//AND
		public RuleCall getAndANDParserRuleCall_4_0_1_0() { return cAndANDParserRuleCall_4_0_1_0; }
		
		//stdSource=StandardStatefulSource
		public Assignment getStdSourceAssignment_4_0_2() { return cStdSourceAssignment_4_0_2; }
		
		//StandardStatefulSource
		public RuleCall getStdSourceStandardStatefulSourceParserRuleCall_4_0_2_0() { return cStdSourceStandardStatefulSourceParserRuleCall_4_0_2_0; }
		
		//=> (basicAbsentPatternSource2=BasicAbsentPatternSource and=AND basicAbsentPatternSource=BasicAbsentPatternSource)
		public Group getGroup_5() { return cGroup_5; }
		
		//basicAbsentPatternSource2=BasicAbsentPatternSource and=AND basicAbsentPatternSource=BasicAbsentPatternSource
		public Group getGroup_5_0() { return cGroup_5_0; }
		
		//basicAbsentPatternSource2=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSource2Assignment_5_0_0() { return cBasicAbsentPatternSource2Assignment_5_0_0; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSource2BasicAbsentPatternSourceParserRuleCall_5_0_0_0() { return cBasicAbsentPatternSource2BasicAbsentPatternSourceParserRuleCall_5_0_0_0; }
		
		//and=AND
		public Assignment getAndAssignment_5_0_1() { return cAndAssignment_5_0_1; }
		
		//AND
		public RuleCall getAndANDParserRuleCall_5_0_1_0() { return cAndANDParserRuleCall_5_0_1_0; }
		
		//basicAbsentPatternSource=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSourceAssignment_5_0_2() { return cBasicAbsentPatternSourceAssignment_5_0_2; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_5_0_2_0() { return cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_5_0_2_0; }
		
		//=> (stdSource=StandardStatefulSource o=OR basicAbsentPatternSource1=BasicAbsentPatternSource)
		public Group getGroup_6() { return cGroup_6; }
		
		//stdSource=StandardStatefulSource o=OR basicAbsentPatternSource1=BasicAbsentPatternSource
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//stdSource=StandardStatefulSource
		public Assignment getStdSourceAssignment_6_0_0() { return cStdSourceAssignment_6_0_0; }
		
		//StandardStatefulSource
		public RuleCall getStdSourceStandardStatefulSourceParserRuleCall_6_0_0_0() { return cStdSourceStandardStatefulSourceParserRuleCall_6_0_0_0; }
		
		//o=OR
		public Assignment getOAssignment_6_0_1() { return cOAssignment_6_0_1; }
		
		//OR
		public RuleCall getOORParserRuleCall_6_0_1_0() { return cOORParserRuleCall_6_0_1_0; }
		
		//basicAbsentPatternSource1=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSource1Assignment_6_0_2() { return cBasicAbsentPatternSource1Assignment_6_0_2; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_6_0_2_0() { return cBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_6_0_2_0; }
		
		//=> (basicAbsentPatternSource1=BasicAbsentPatternSource o=OR stdSource=StandardStatefulSource)
		public Group getGroup_7() { return cGroup_7; }
		
		//basicAbsentPatternSource1=BasicAbsentPatternSource o=OR stdSource=StandardStatefulSource
		public Group getGroup_7_0() { return cGroup_7_0; }
		
		//basicAbsentPatternSource1=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSource1Assignment_7_0_0() { return cBasicAbsentPatternSource1Assignment_7_0_0; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_7_0_0_0() { return cBasicAbsentPatternSource1BasicAbsentPatternSourceParserRuleCall_7_0_0_0; }
		
		//o=OR
		public Assignment getOAssignment_7_0_1() { return cOAssignment_7_0_1; }
		
		//OR
		public RuleCall getOORParserRuleCall_7_0_1_0() { return cOORParserRuleCall_7_0_1_0; }
		
		//stdSource=StandardStatefulSource
		public Assignment getStdSourceAssignment_7_0_2() { return cStdSourceAssignment_7_0_2; }
		
		//StandardStatefulSource
		public RuleCall getStdSourceStandardStatefulSourceParserRuleCall_7_0_2_0() { return cStdSourceStandardStatefulSourceParserRuleCall_7_0_2_0; }
		
		//=> (basicAbsentPatternSource2=BasicAbsentPatternSource o=OR basicAbsentPatternSource=BasicAbsentPatternSource)
		public Group getGroup_8() { return cGroup_8; }
		
		//basicAbsentPatternSource2=BasicAbsentPatternSource o=OR basicAbsentPatternSource=BasicAbsentPatternSource
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//basicAbsentPatternSource2=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSource2Assignment_8_0_0() { return cBasicAbsentPatternSource2Assignment_8_0_0; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSource2BasicAbsentPatternSourceParserRuleCall_8_0_0_0() { return cBasicAbsentPatternSource2BasicAbsentPatternSourceParserRuleCall_8_0_0_0; }
		
		//o=OR
		public Assignment getOAssignment_8_0_1() { return cOAssignment_8_0_1; }
		
		//OR
		public RuleCall getOORParserRuleCall_8_0_1_0() { return cOORParserRuleCall_8_0_1_0; }
		
		//basicAbsentPatternSource=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSourceAssignment_8_0_2() { return cBasicAbsentPatternSourceAssignment_8_0_2; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_8_0_2_0() { return cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_8_0_2_0; }
	}
	public class AbsentPatternSourceChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AbsentPatternSourceChain");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cEVERYParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Assignment cAbsentPatternSrcChainAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cAbsentPatternSrcChainAbsentPatternSourceChainParserRuleCall_0_0_2_0 = (RuleCall)cAbsentPatternSrcChainAssignment_0_0_2.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_0_0_3 = (RuleCall)cGroup_0_0.eContents().get(3);
		private final Assignment cWt1Assignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cWt1WithinTimeParserRuleCall_0_0_4_0 = (RuleCall)cWt1Assignment_0_0_4.eContents().get(0);
		private final RuleCall cEveryAbsentPatternSourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeftAbsentPatternSourceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cRightAbsentPatternSourceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbsentPatternSourceChain:
		//	=> (EVERY? OPEN_PAR absentPatternSrcChain=AbsentPatternSourceChain CLOSE_PAR wt1=WithinTime?) |
		//	EveryAbsentPatternSource
		//	| => LeftAbsentPatternSource
		//	| => RightAbsentPatternSource;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (EVERY? OPEN_PAR absentPatternSrcChain=AbsentPatternSourceChain CLOSE_PAR wt1=WithinTime?) | EveryAbsentPatternSource
		//| => LeftAbsentPatternSource | => RightAbsentPatternSource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (EVERY? OPEN_PAR absentPatternSrcChain=AbsentPatternSourceChain CLOSE_PAR wt1=WithinTime?)
		public Group getGroup_0() { return cGroup_0; }
		
		//EVERY? OPEN_PAR absentPatternSrcChain=AbsentPatternSourceChain CLOSE_PAR wt1=WithinTime?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//EVERY?
		public RuleCall getEVERYParserRuleCall_0_0_0() { return cEVERYParserRuleCall_0_0_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_0_0_1() { return cOPEN_PARParserRuleCall_0_0_1; }
		
		//absentPatternSrcChain=AbsentPatternSourceChain
		public Assignment getAbsentPatternSrcChainAssignment_0_0_2() { return cAbsentPatternSrcChainAssignment_0_0_2; }
		
		//AbsentPatternSourceChain
		public RuleCall getAbsentPatternSrcChainAbsentPatternSourceChainParserRuleCall_0_0_2_0() { return cAbsentPatternSrcChainAbsentPatternSourceChainParserRuleCall_0_0_2_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_0_0_3() { return cCLOSE_PARParserRuleCall_0_0_3; }
		
		//wt1=WithinTime?
		public Assignment getWt1Assignment_0_0_4() { return cWt1Assignment_0_0_4; }
		
		//WithinTime
		public RuleCall getWt1WithinTimeParserRuleCall_0_0_4_0() { return cWt1WithinTimeParserRuleCall_0_0_4_0; }
		
		//EveryAbsentPatternSource
		public RuleCall getEveryAbsentPatternSourceParserRuleCall_1() { return cEveryAbsentPatternSourceParserRuleCall_1; }
		
		//=> LeftAbsentPatternSource
		public RuleCall getLeftAbsentPatternSourceParserRuleCall_2() { return cLeftAbsentPatternSourceParserRuleCall_2; }
		
		//=> RightAbsentPatternSource
		public RuleCall getRightAbsentPatternSourceParserRuleCall_3() { return cRightAbsentPatternSourceParserRuleCall_3; }
	}
	public class EveryAbsentPatternSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.EveryAbsentPatternSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cEVERYParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cBasicAbsentPSAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBasicAbsentPSBasicAbsentPatternSourceParserRuleCall_0_1_0 = (RuleCall)cBasicAbsentPSAssignment_0_1.eContents().get(0);
		
		//EveryAbsentPatternSource:
		//	=> (EVERY? basicAbsentPS=BasicAbsentPatternSource);
		@Override public ParserRule getRule() { return rule; }
		
		//=> (EVERY? basicAbsentPS=BasicAbsentPatternSource)
		public Group getGroup() { return cGroup; }
		
		//EVERY? basicAbsentPS=BasicAbsentPatternSource
		public Group getGroup_0() { return cGroup_0; }
		
		//EVERY?
		public RuleCall getEVERYParserRuleCall_0_0() { return cEVERYParserRuleCall_0_0; }
		
		//basicAbsentPS=BasicAbsentPatternSource
		public Assignment getBasicAbsentPSAssignment_0_1() { return cBasicAbsentPSAssignment_0_1; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPSBasicAbsentPatternSourceParserRuleCall_0_1_0() { return cBasicAbsentPSBasicAbsentPatternSourceParserRuleCall_0_1_0; }
	}
	public class BasicAbsentPatternSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.BasicAbsentPatternSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cNOTParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cBasicSrcAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBasicSrcBasicSourceParserRuleCall_0_1_0 = (RuleCall)cBasicSrcAssignment_0_1.eContents().get(0);
		private final Assignment cFtAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFtForTimeParserRuleCall_0_2_0 = (RuleCall)cFtAssignment_0_2.eContents().get(0);
		
		//BasicAbsentPatternSource:
		//	=> (NOT basicSrc=BasicSource ft=ForTime);
		@Override public ParserRule getRule() { return rule; }
		
		//=> (NOT basicSrc=BasicSource ft=ForTime)
		public Group getGroup() { return cGroup; }
		
		//NOT basicSrc=BasicSource ft=ForTime
		public Group getGroup_0() { return cGroup_0; }
		
		//NOT
		public RuleCall getNOTParserRuleCall_0_0() { return cNOTParserRuleCall_0_0; }
		
		//basicSrc=BasicSource
		public Assignment getBasicSrcAssignment_0_1() { return cBasicSrcAssignment_0_1; }
		
		//BasicSource
		public RuleCall getBasicSrcBasicSourceParserRuleCall_0_1_0() { return cBasicSrcBasicSourceParserRuleCall_0_1_0; }
		
		//ft=ForTime
		public Assignment getFtAssignment_0_2() { return cFtAssignment_0_2; }
		
		//ForTime
		public RuleCall getFtForTimeParserRuleCall_0_2_0() { return cFtForTimeParserRuleCall_0_2_0; }
	}
	public class ForTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ForTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFORParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTvAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTvTimeValueParserRuleCall_1_0 = (RuleCall)cTvAssignment_1.eContents().get(0);
		
		//ForTime:
		//	FOR tv=TimeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//FOR tv=TimeValue
		public Group getGroup() { return cGroup; }
		
		//FOR
		public RuleCall getFORParserRuleCall_0() { return cFORParserRuleCall_0; }
		
		//tv=TimeValue
		public Assignment getTvAssignment_1() { return cTvAssignment_1; }
		
		//TimeValue
		public RuleCall getTvTimeValueParserRuleCall_1_0() { return cTvTimeValueParserRuleCall_1_0; }
	}
	public class LeftAbsentPatternSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LeftAbsentPatternSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLeftAbsentPatternSource1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cLeftAbsentPatternSourceLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFb1Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cFb1HyphenMinusGreaterThanSignKeyword_1_0_1_0 = (Keyword)cFb1Assignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightLeftAbsentPatternSource1ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//LeftAbsentPatternSource:
		//	LeftAbsentPatternSource1 => ({LeftAbsentPatternSource.left=current} fb1='->' right=LeftAbsentPatternSource1)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LeftAbsentPatternSource1 => ({LeftAbsentPatternSource.left=current} fb1='->' right=LeftAbsentPatternSource1)*
		public Group getGroup() { return cGroup; }
		
		//LeftAbsentPatternSource1
		public RuleCall getLeftAbsentPatternSource1ParserRuleCall_0() { return cLeftAbsentPatternSource1ParserRuleCall_0; }
		
		//=> ({LeftAbsentPatternSource.left=current} fb1='->' right=LeftAbsentPatternSource1)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LeftAbsentPatternSource.left=current} fb1='->' right=LeftAbsentPatternSource1
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{LeftAbsentPatternSource.left=current}
		public Action getLeftAbsentPatternSourceLeftAction_1_0_0() { return cLeftAbsentPatternSourceLeftAction_1_0_0; }
		
		//fb1='->'
		public Assignment getFb1Assignment_1_0_1() { return cFb1Assignment_1_0_1; }
		
		//'->'
		public Keyword getFb1HyphenMinusGreaterThanSignKeyword_1_0_1_0() { return cFb1HyphenMinusGreaterThanSignKeyword_1_0_1_0; }
		
		//right=LeftAbsentPatternSource1
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//LeftAbsentPatternSource1
		public RuleCall getRightLeftAbsentPatternSource1ParserRuleCall_1_0_2_0() { return cRightLeftAbsentPatternSource1ParserRuleCall_1_0_2_0; }
	}
	public class LeftAbsentPatternSource1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LeftAbsentPatternSource1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLeftAbsentPatternSource2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cLeftAbsentPatternSource1LeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFbAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cFbHyphenMinusGreaterThanSignKeyword_1_0_1_0 = (Keyword)cFbAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightEveryAbsentPatternSourceParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//LeftAbsentPatternSource1 LeftAbsentPatternSource:
		//	LeftAbsentPatternSource2 => ({LeftAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LeftAbsentPatternSource2 => ({LeftAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource)*
		public Group getGroup() { return cGroup; }
		
		//LeftAbsentPatternSource2
		public RuleCall getLeftAbsentPatternSource2ParserRuleCall_0() { return cLeftAbsentPatternSource2ParserRuleCall_0; }
		
		//=> ({LeftAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LeftAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{LeftAbsentPatternSource1.left=current}
		public Action getLeftAbsentPatternSource1LeftAction_1_0_0() { return cLeftAbsentPatternSource1LeftAction_1_0_0; }
		
		//fb='->'
		public Assignment getFbAssignment_1_0_1() { return cFbAssignment_1_0_1; }
		
		//'->'
		public Keyword getFbHyphenMinusGreaterThanSignKeyword_1_0_1_0() { return cFbHyphenMinusGreaterThanSignKeyword_1_0_1_0; }
		
		//right=EveryAbsentPatternSource
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//EveryAbsentPatternSource
		public RuleCall getRightEveryAbsentPatternSourceParserRuleCall_1_0_2_0() { return cRightEveryAbsentPatternSourceParserRuleCall_1_0_2_0; }
	}
	public class LeftAbsentPatternSource2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LeftAbsentPatternSource2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cEVERYParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Assignment cLeftAbsPSAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cLeftAbsPSLeftAbsentPatternSourceParserRuleCall_0_0_2_0 = (RuleCall)cLeftAbsPSAssignment_0_0_2.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_0_0_3 = (RuleCall)cGroup_0_0.eContents().get(3);
		private final Assignment cWt2Assignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cWt2WithinTimeParserRuleCall_0_0_4_0 = (RuleCall)cWt2Assignment_0_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cEveryAbsPSAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cEveryAbsPSEveryAbsentPatternSourceParserRuleCall_1_0_0_0 = (RuleCall)cEveryAbsPSAssignment_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cEveryPSCAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cEveryPSCEveryPatternSourceChainParserRuleCall_1_0_2_0 = (RuleCall)cEveryPSCAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cEveryPSCAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cEveryPSCEveryPatternSourceChainParserRuleCall_2_0_0_0 = (RuleCall)cEveryPSCAssignment_2_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cLeftAbsPatternSrcAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cLeftAbsPatternSrcLeftAbsentPatternSourceParserRuleCall_2_0_2_0 = (RuleCall)cLeftAbsPatternSrcAssignment_2_0_2.eContents().get(0);
		
		//LeftAbsentPatternSource2 LeftAbsentPatternSource:
		//	=> (EVERY? OPEN_PAR leftAbsPS=LeftAbsentPatternSource CLOSE_PAR wt2+=WithinTime?) | =>
		//	(everyAbsPS=EveryAbsentPatternSource '->' everyPSC=EveryPatternSourceChain) | => (everyPSC=EveryPatternSourceChain
		//	'->' leftAbsPatternSrc=LeftAbsentPatternSource);
		@Override public ParserRule getRule() { return rule; }
		
		//=> (EVERY? OPEN_PAR leftAbsPS=LeftAbsentPatternSource CLOSE_PAR wt2+=WithinTime?) | =>
		//(everyAbsPS=EveryAbsentPatternSource '->' everyPSC=EveryPatternSourceChain) | => (everyPSC=EveryPatternSourceChain
		//'->' leftAbsPatternSrc=LeftAbsentPatternSource)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (EVERY? OPEN_PAR leftAbsPS=LeftAbsentPatternSource CLOSE_PAR wt2+=WithinTime?)
		public Group getGroup_0() { return cGroup_0; }
		
		//EVERY? OPEN_PAR leftAbsPS=LeftAbsentPatternSource CLOSE_PAR wt2+=WithinTime?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//EVERY?
		public RuleCall getEVERYParserRuleCall_0_0_0() { return cEVERYParserRuleCall_0_0_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_0_0_1() { return cOPEN_PARParserRuleCall_0_0_1; }
		
		//leftAbsPS=LeftAbsentPatternSource
		public Assignment getLeftAbsPSAssignment_0_0_2() { return cLeftAbsPSAssignment_0_0_2; }
		
		//LeftAbsentPatternSource
		public RuleCall getLeftAbsPSLeftAbsentPatternSourceParserRuleCall_0_0_2_0() { return cLeftAbsPSLeftAbsentPatternSourceParserRuleCall_0_0_2_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_0_0_3() { return cCLOSE_PARParserRuleCall_0_0_3; }
		
		//wt2+=WithinTime?
		public Assignment getWt2Assignment_0_0_4() { return cWt2Assignment_0_0_4; }
		
		//WithinTime
		public RuleCall getWt2WithinTimeParserRuleCall_0_0_4_0() { return cWt2WithinTimeParserRuleCall_0_0_4_0; }
		
		//=> (everyAbsPS=EveryAbsentPatternSource '->' everyPSC=EveryPatternSourceChain)
		public Group getGroup_1() { return cGroup_1; }
		
		//everyAbsPS=EveryAbsentPatternSource '->' everyPSC=EveryPatternSourceChain
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//everyAbsPS=EveryAbsentPatternSource
		public Assignment getEveryAbsPSAssignment_1_0_0() { return cEveryAbsPSAssignment_1_0_0; }
		
		//EveryAbsentPatternSource
		public RuleCall getEveryAbsPSEveryAbsentPatternSourceParserRuleCall_1_0_0_0() { return cEveryAbsPSEveryAbsentPatternSourceParserRuleCall_1_0_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_0_1; }
		
		//everyPSC=EveryPatternSourceChain
		public Assignment getEveryPSCAssignment_1_0_2() { return cEveryPSCAssignment_1_0_2; }
		
		//EveryPatternSourceChain
		public RuleCall getEveryPSCEveryPatternSourceChainParserRuleCall_1_0_2_0() { return cEveryPSCEveryPatternSourceChainParserRuleCall_1_0_2_0; }
		
		//=> (everyPSC=EveryPatternSourceChain '->' leftAbsPatternSrc=LeftAbsentPatternSource)
		public Group getGroup_2() { return cGroup_2; }
		
		//everyPSC=EveryPatternSourceChain '->' leftAbsPatternSrc=LeftAbsentPatternSource
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//everyPSC=EveryPatternSourceChain
		public Assignment getEveryPSCAssignment_2_0_0() { return cEveryPSCAssignment_2_0_0; }
		
		//EveryPatternSourceChain
		public RuleCall getEveryPSCEveryPatternSourceChainParserRuleCall_2_0_0_0() { return cEveryPSCEveryPatternSourceChainParserRuleCall_2_0_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0_1() { return cHyphenMinusGreaterThanSignKeyword_2_0_1; }
		
		//leftAbsPatternSrc=LeftAbsentPatternSource
		public Assignment getLeftAbsPatternSrcAssignment_2_0_2() { return cLeftAbsPatternSrcAssignment_2_0_2; }
		
		//LeftAbsentPatternSource
		public RuleCall getLeftAbsPatternSrcLeftAbsentPatternSourceParserRuleCall_2_0_2_0() { return cLeftAbsPatternSrcLeftAbsentPatternSourceParserRuleCall_2_0_2_0; }
	}
	public class RightAbsentPatternSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.RightAbsentPatternSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRightAbsentPatternSource1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cRightAbsentPatternSourceLeft1Action_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFb2Assignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cFb2HyphenMinusGreaterThanSignKeyword_1_0_1_0 = (Keyword)cFb2Assignment_1_0_1.eContents().get(0);
		private final Assignment cRight1Assignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRight1RightAbsentPatternSource1ParserRuleCall_1_0_2_0 = (RuleCall)cRight1Assignment_1_0_2.eContents().get(0);
		
		//RightAbsentPatternSource:
		//	RightAbsentPatternSource1 => ({RightAbsentPatternSource.left1=current} fb2='->' right1=RightAbsentPatternSource1)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RightAbsentPatternSource1 => ({RightAbsentPatternSource.left1=current} fb2='->' right1=RightAbsentPatternSource1)*
		public Group getGroup() { return cGroup; }
		
		//RightAbsentPatternSource1
		public RuleCall getRightAbsentPatternSource1ParserRuleCall_0() { return cRightAbsentPatternSource1ParserRuleCall_0; }
		
		//=> ({RightAbsentPatternSource.left1=current} fb2='->' right1=RightAbsentPatternSource1)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RightAbsentPatternSource.left1=current} fb2='->' right1=RightAbsentPatternSource1
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{RightAbsentPatternSource.left1=current}
		public Action getRightAbsentPatternSourceLeft1Action_1_0_0() { return cRightAbsentPatternSourceLeft1Action_1_0_0; }
		
		//fb2='->'
		public Assignment getFb2Assignment_1_0_1() { return cFb2Assignment_1_0_1; }
		
		//'->'
		public Keyword getFb2HyphenMinusGreaterThanSignKeyword_1_0_1_0() { return cFb2HyphenMinusGreaterThanSignKeyword_1_0_1_0; }
		
		//right1=RightAbsentPatternSource1
		public Assignment getRight1Assignment_1_0_2() { return cRight1Assignment_1_0_2; }
		
		//RightAbsentPatternSource1
		public RuleCall getRight1RightAbsentPatternSource1ParserRuleCall_1_0_2_0() { return cRight1RightAbsentPatternSource1ParserRuleCall_1_0_2_0; }
	}
	public class RightAbsentPatternSource1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.RightAbsentPatternSource1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRightAbsentPatternSource2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cRightAbsentPatternSource1LeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFbAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cFbHyphenMinusGreaterThanSignKeyword_1_0_1_0 = (Keyword)cFbAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightEveryAbsentPatternSourceParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//RightAbsentPatternSource1 RightAbsentPatternSource:
		//	RightAbsentPatternSource2 => ({RightAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RightAbsentPatternSource2 => ({RightAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource)*
		public Group getGroup() { return cGroup; }
		
		//RightAbsentPatternSource2
		public RuleCall getRightAbsentPatternSource2ParserRuleCall_0() { return cRightAbsentPatternSource2ParserRuleCall_0; }
		
		//=> ({RightAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RightAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{RightAbsentPatternSource1.left=current}
		public Action getRightAbsentPatternSource1LeftAction_1_0_0() { return cRightAbsentPatternSource1LeftAction_1_0_0; }
		
		//fb='->'
		public Assignment getFbAssignment_1_0_1() { return cFbAssignment_1_0_1; }
		
		//'->'
		public Keyword getFbHyphenMinusGreaterThanSignKeyword_1_0_1_0() { return cFbHyphenMinusGreaterThanSignKeyword_1_0_1_0; }
		
		//right=EveryAbsentPatternSource
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//EveryAbsentPatternSource
		public RuleCall getRightEveryAbsentPatternSourceParserRuleCall_1_0_2_0() { return cRightEveryAbsentPatternSourceParserRuleCall_1_0_2_0; }
	}
	public class RightAbsentPatternSource2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.RightAbsentPatternSource2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cEVERYParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Assignment cRightAbsPSAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cRightAbsPSRightAbsentPatternSourceParserRuleCall_0_0_2_0 = (RuleCall)cRightAbsPSAssignment_0_0_2.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_0_0_3 = (RuleCall)cGroup_0_0.eContents().get(3);
		private final Assignment cWt3Assignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cWt3WithinTimeParserRuleCall_0_0_4_0 = (RuleCall)cWt3Assignment_0_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cEveryPSC1Assignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cEveryPSC1EveryPatternSourceChainParserRuleCall_1_0_0_0 = (RuleCall)cEveryPSC1Assignment_1_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cEveryAbsPS1Assignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cEveryAbsPS1EveryAbsentPatternSourceParserRuleCall_1_0_2_0 = (RuleCall)cEveryAbsPS1Assignment_1_0_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cEveryAbsPS1Assignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cEveryAbsPS1EveryAbsentPatternSourceParserRuleCall_2_0_0_0 = (RuleCall)cEveryAbsPS1Assignment_2_0_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cRightAbsPSAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cRightAbsPSRightAbsentPatternSourceParserRuleCall_2_0_2_0 = (RuleCall)cRightAbsPSAssignment_2_0_2.eContents().get(0);
		
		//RightAbsentPatternSource2 RightAbsentPatternSource:
		//	=> (EVERY? OPEN_PAR rightAbsPS=RightAbsentPatternSource CLOSE_PAR wt3+=WithinTime?) | =>
		//	(everyPSC1=EveryPatternSourceChain '->' everyAbsPS1=EveryAbsentPatternSource) | =>
		//	(everyAbsPS1=EveryAbsentPatternSource '->' rightAbsPS=RightAbsentPatternSource);
		@Override public ParserRule getRule() { return rule; }
		
		//=> (EVERY? OPEN_PAR rightAbsPS=RightAbsentPatternSource CLOSE_PAR wt3+=WithinTime?) | =>
		//(everyPSC1=EveryPatternSourceChain '->' everyAbsPS1=EveryAbsentPatternSource) | =>
		//(everyAbsPS1=EveryAbsentPatternSource '->' rightAbsPS=RightAbsentPatternSource)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (EVERY? OPEN_PAR rightAbsPS=RightAbsentPatternSource CLOSE_PAR wt3+=WithinTime?)
		public Group getGroup_0() { return cGroup_0; }
		
		//EVERY? OPEN_PAR rightAbsPS=RightAbsentPatternSource CLOSE_PAR wt3+=WithinTime?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//EVERY?
		public RuleCall getEVERYParserRuleCall_0_0_0() { return cEVERYParserRuleCall_0_0_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_0_0_1() { return cOPEN_PARParserRuleCall_0_0_1; }
		
		//rightAbsPS=RightAbsentPatternSource
		public Assignment getRightAbsPSAssignment_0_0_2() { return cRightAbsPSAssignment_0_0_2; }
		
		//RightAbsentPatternSource
		public RuleCall getRightAbsPSRightAbsentPatternSourceParserRuleCall_0_0_2_0() { return cRightAbsPSRightAbsentPatternSourceParserRuleCall_0_0_2_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_0_0_3() { return cCLOSE_PARParserRuleCall_0_0_3; }
		
		//wt3+=WithinTime?
		public Assignment getWt3Assignment_0_0_4() { return cWt3Assignment_0_0_4; }
		
		//WithinTime
		public RuleCall getWt3WithinTimeParserRuleCall_0_0_4_0() { return cWt3WithinTimeParserRuleCall_0_0_4_0; }
		
		//=> (everyPSC1=EveryPatternSourceChain '->' everyAbsPS1=EveryAbsentPatternSource)
		public Group getGroup_1() { return cGroup_1; }
		
		//everyPSC1=EveryPatternSourceChain '->' everyAbsPS1=EveryAbsentPatternSource
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//everyPSC1=EveryPatternSourceChain
		public Assignment getEveryPSC1Assignment_1_0_0() { return cEveryPSC1Assignment_1_0_0; }
		
		//EveryPatternSourceChain
		public RuleCall getEveryPSC1EveryPatternSourceChainParserRuleCall_1_0_0_0() { return cEveryPSC1EveryPatternSourceChainParserRuleCall_1_0_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0_1() { return cHyphenMinusGreaterThanSignKeyword_1_0_1; }
		
		//everyAbsPS1=EveryAbsentPatternSource
		public Assignment getEveryAbsPS1Assignment_1_0_2() { return cEveryAbsPS1Assignment_1_0_2; }
		
		//EveryAbsentPatternSource
		public RuleCall getEveryAbsPS1EveryAbsentPatternSourceParserRuleCall_1_0_2_0() { return cEveryAbsPS1EveryAbsentPatternSourceParserRuleCall_1_0_2_0; }
		
		//=> (everyAbsPS1=EveryAbsentPatternSource '->' rightAbsPS=RightAbsentPatternSource)
		public Group getGroup_2() { return cGroup_2; }
		
		//everyAbsPS1=EveryAbsentPatternSource '->' rightAbsPS=RightAbsentPatternSource
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//everyAbsPS1=EveryAbsentPatternSource
		public Assignment getEveryAbsPS1Assignment_2_0_0() { return cEveryAbsPS1Assignment_2_0_0; }
		
		//EveryAbsentPatternSource
		public RuleCall getEveryAbsPS1EveryAbsentPatternSourceParserRuleCall_2_0_0_0() { return cEveryAbsPS1EveryAbsentPatternSourceParserRuleCall_2_0_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_0_1() { return cHyphenMinusGreaterThanSignKeyword_2_0_1; }
		
		//rightAbsPS=RightAbsentPatternSource
		public Assignment getRightAbsPSAssignment_2_0_2() { return cRightAbsPSAssignment_2_0_2; }
		
		//RightAbsentPatternSource
		public RuleCall getRightAbsPSRightAbsentPatternSourceParserRuleCall_2_0_2_0() { return cRightAbsPSRightAbsentPatternSourceParserRuleCall_2_0_2_0; }
	}
	public class SequenceStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SequenceStream");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEverySequenceSourceChainAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEverySequenceSourceChainEverySequenceSourceChainParserRuleCall_0_0 = (RuleCall)cEverySequenceSourceChainAssignment_0.eContents().get(0);
		private final Assignment cEveryAbsentSequenceSourceChainAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEveryAbsentSequenceSourceChainEveryAbsentSequenceSourceChainParserRuleCall_1_0 = (RuleCall)cEveryAbsentSequenceSourceChainAssignment_1.eContents().get(0);
		
		//SequenceStream:
		//	=> everySequenceSourceChain=EverySequenceSourceChain
		//	| => everyAbsentSequenceSourceChain=EveryAbsentSequenceSourceChain;
		@Override public ParserRule getRule() { return rule; }
		
		//=> everySequenceSourceChain=EverySequenceSourceChain | => everyAbsentSequenceSourceChain=EveryAbsentSequenceSourceChain
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> everySequenceSourceChain=EverySequenceSourceChain
		public Assignment getEverySequenceSourceChainAssignment_0() { return cEverySequenceSourceChainAssignment_0; }
		
		//EverySequenceSourceChain
		public RuleCall getEverySequenceSourceChainEverySequenceSourceChainParserRuleCall_0_0() { return cEverySequenceSourceChainEverySequenceSourceChainParserRuleCall_0_0; }
		
		//=> everyAbsentSequenceSourceChain=EveryAbsentSequenceSourceChain
		public Assignment getEveryAbsentSequenceSourceChainAssignment_1() { return cEveryAbsentSequenceSourceChainAssignment_1; }
		
		//EveryAbsentSequenceSourceChain
		public RuleCall getEveryAbsentSequenceSourceChainEveryAbsentSequenceSourceChainParserRuleCall_1_0() { return cEveryAbsentSequenceSourceChainEveryAbsentSequenceSourceChainParserRuleCall_1_0; }
	}
	public class EverySequenceSourceChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.EverySequenceSourceChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cEVERYParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cSeqSourceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cSeqSourceSequenceSourceParserRuleCall_0_1_0 = (RuleCall)cSeqSourceAssignment_0_1.eContents().get(0);
		private final Assignment cWtAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cWtWithinTimeParserRuleCall_0_2_0 = (RuleCall)cWtAssignment_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cSscAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cSscSequenceSourceChainParserRuleCall_0_4_0 = (RuleCall)cSscAssignment_0_4.eContents().get(0);
		
		//EverySequenceSourceChain:
		//	=> (EVERY? seqSource=SequenceSource wt=WithinTime? ',' ssc=SequenceSourceChain);
		@Override public ParserRule getRule() { return rule; }
		
		//=> (EVERY? seqSource=SequenceSource wt=WithinTime? ',' ssc=SequenceSourceChain)
		public Group getGroup() { return cGroup; }
		
		//EVERY? seqSource=SequenceSource wt=WithinTime? ',' ssc=SequenceSourceChain
		public Group getGroup_0() { return cGroup_0; }
		
		//EVERY?
		public RuleCall getEVERYParserRuleCall_0_0() { return cEVERYParserRuleCall_0_0; }
		
		//seqSource=SequenceSource
		public Assignment getSeqSourceAssignment_0_1() { return cSeqSourceAssignment_0_1; }
		
		//SequenceSource
		public RuleCall getSeqSourceSequenceSourceParserRuleCall_0_1_0() { return cSeqSourceSequenceSourceParserRuleCall_0_1_0; }
		
		//wt=WithinTime?
		public Assignment getWtAssignment_0_2() { return cWtAssignment_0_2; }
		
		//WithinTime
		public RuleCall getWtWithinTimeParserRuleCall_0_2_0() { return cWtWithinTimeParserRuleCall_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//ssc=SequenceSourceChain
		public Assignment getSscAssignment_0_4() { return cSscAssignment_0_4; }
		
		//SequenceSourceChain
		public RuleCall getSscSequenceSourceChainParserRuleCall_0_4_0() { return cSscSequenceSourceChainParserRuleCall_0_4_0; }
	}
	public class EveryAbsentSequenceSourceChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.EveryAbsentSequenceSourceChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cEVERYParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cAbsSeqSrcChainAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAbsSeqSrcChainAbsentSequenceSourceChainParserRuleCall_0_1_0 = (RuleCall)cAbsSeqSrcChainAssignment_0_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSeqSrcChainAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cSeqSrcChainSequenceSourceChainParserRuleCall_0_3_0 = (RuleCall)cSeqSrcChainAssignment_0_3.eContents().get(0);
		
		//EveryAbsentSequenceSourceChain:
		//	=> (EVERY? absSeqSrcChain=AbsentSequenceSourceChain ',' seqSrcChain=SequenceSourceChain);
		@Override public ParserRule getRule() { return rule; }
		
		//=> (EVERY? absSeqSrcChain=AbsentSequenceSourceChain ',' seqSrcChain=SequenceSourceChain)
		public Group getGroup() { return cGroup; }
		
		//EVERY? absSeqSrcChain=AbsentSequenceSourceChain ',' seqSrcChain=SequenceSourceChain
		public Group getGroup_0() { return cGroup_0; }
		
		//EVERY?
		public RuleCall getEVERYParserRuleCall_0_0() { return cEVERYParserRuleCall_0_0; }
		
		//absSeqSrcChain=AbsentSequenceSourceChain
		public Assignment getAbsSeqSrcChainAssignment_0_1() { return cAbsSeqSrcChainAssignment_0_1; }
		
		//AbsentSequenceSourceChain
		public RuleCall getAbsSeqSrcChainAbsentSequenceSourceChainParserRuleCall_0_1_0() { return cAbsSeqSrcChainAbsentSequenceSourceChainParserRuleCall_0_1_0; }
		
		//','
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }
		
		//seqSrcChain=SequenceSourceChain
		public Assignment getSeqSrcChainAssignment_0_3() { return cSeqSrcChainAssignment_0_3; }
		
		//SequenceSourceChain
		public RuleCall getSeqSrcChainSequenceSourceChainParserRuleCall_0_3_0() { return cSeqSrcChainSequenceSourceChainParserRuleCall_0_3_0; }
	}
	public class AbsentSequenceSourceChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AbsentSequenceSourceChain");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Assignment cAbsentSequenceSourceChainAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cAbsentSequenceSourceChainAbsentSequenceSourceChainParserRuleCall_0_0_1_0 = (RuleCall)cAbsentSequenceSourceChainAssignment_0_0_1.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final Assignment cWt5Assignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cWt5WithinTimeParserRuleCall_0_0_3_0 = (RuleCall)cWt5Assignment_0_0_3.eContents().get(0);
		private final Assignment cBasicAbsentPatternSourceAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_1_0 = (RuleCall)cBasicAbsentPatternSourceAssignment_1.eContents().get(0);
		private final Assignment cLeftAbsentSequenceSourceAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLeftAbsentSequenceSourceLeftAbsentSequenceSourceParserRuleCall_2_0 = (RuleCall)cLeftAbsentSequenceSourceAssignment_2.eContents().get(0);
		private final Assignment cRightAbsentSequenceSourceAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cRightAbsentSequenceSourceRightAbsentSequenceSourceParserRuleCall_3_0 = (RuleCall)cRightAbsentSequenceSourceAssignment_3.eContents().get(0);
		
		//AbsentSequenceSourceChain:
		//	=> (OPEN_PAR absentSequenceSourceChain=AbsentSequenceSourceChain CLOSE_PAR wt5=WithinTime?) | =>
		//	basicAbsentPatternSource=BasicAbsentPatternSource
		//	| => leftAbsentSequenceSource=LeftAbsentSequenceSource
		//	| => rightAbsentSequenceSource=RightAbsentSequenceSource;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (OPEN_PAR absentSequenceSourceChain=AbsentSequenceSourceChain CLOSE_PAR wt5=WithinTime?) | =>
		//basicAbsentPatternSource=BasicAbsentPatternSource | => leftAbsentSequenceSource=LeftAbsentSequenceSource | =>
		//rightAbsentSequenceSource=RightAbsentSequenceSource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (OPEN_PAR absentSequenceSourceChain=AbsentSequenceSourceChain CLOSE_PAR wt5=WithinTime?)
		public Group getGroup_0() { return cGroup_0; }
		
		//OPEN_PAR absentSequenceSourceChain=AbsentSequenceSourceChain CLOSE_PAR wt5=WithinTime?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_0_0_0() { return cOPEN_PARParserRuleCall_0_0_0; }
		
		//absentSequenceSourceChain=AbsentSequenceSourceChain
		public Assignment getAbsentSequenceSourceChainAssignment_0_0_1() { return cAbsentSequenceSourceChainAssignment_0_0_1; }
		
		//AbsentSequenceSourceChain
		public RuleCall getAbsentSequenceSourceChainAbsentSequenceSourceChainParserRuleCall_0_0_1_0() { return cAbsentSequenceSourceChainAbsentSequenceSourceChainParserRuleCall_0_0_1_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_0_0_2() { return cCLOSE_PARParserRuleCall_0_0_2; }
		
		//wt5=WithinTime?
		public Assignment getWt5Assignment_0_0_3() { return cWt5Assignment_0_0_3; }
		
		//WithinTime
		public RuleCall getWt5WithinTimeParserRuleCall_0_0_3_0() { return cWt5WithinTimeParserRuleCall_0_0_3_0; }
		
		//=> basicAbsentPatternSource=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSourceAssignment_1() { return cBasicAbsentPatternSourceAssignment_1; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_1_0() { return cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_1_0; }
		
		//=> leftAbsentSequenceSource=LeftAbsentSequenceSource
		public Assignment getLeftAbsentSequenceSourceAssignment_2() { return cLeftAbsentSequenceSourceAssignment_2; }
		
		//LeftAbsentSequenceSource
		public RuleCall getLeftAbsentSequenceSourceLeftAbsentSequenceSourceParserRuleCall_2_0() { return cLeftAbsentSequenceSourceLeftAbsentSequenceSourceParserRuleCall_2_0; }
		
		//=> rightAbsentSequenceSource=RightAbsentSequenceSource
		public Assignment getRightAbsentSequenceSourceAssignment_3() { return cRightAbsentSequenceSourceAssignment_3; }
		
		//RightAbsentSequenceSource
		public RuleCall getRightAbsentSequenceSourceRightAbsentSequenceSourceParserRuleCall_3_0() { return cRightAbsentSequenceSourceRightAbsentSequenceSourceParserRuleCall_3_0; }
	}
	public class LeftAbsentSequenceSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LeftAbsentSequenceSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLeftAbsentSequenceSource1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cLeftAbsentSequenceSourceLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cCommAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cCommCommaKeyword_1_0_1_0 = (Keyword)cCommAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightLeftAbsentSequenceSource1ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//LeftAbsentSequenceSource:
		//	LeftAbsentSequenceSource1 => ({LeftAbsentSequenceSource.left=current} comm=',' right=LeftAbsentSequenceSource1)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LeftAbsentSequenceSource1 => ({LeftAbsentSequenceSource.left=current} comm=',' right=LeftAbsentSequenceSource1)*
		public Group getGroup() { return cGroup; }
		
		//LeftAbsentSequenceSource1
		public RuleCall getLeftAbsentSequenceSource1ParserRuleCall_0() { return cLeftAbsentSequenceSource1ParserRuleCall_0; }
		
		//=> ({LeftAbsentSequenceSource.left=current} comm=',' right=LeftAbsentSequenceSource1)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LeftAbsentSequenceSource.left=current} comm=',' right=LeftAbsentSequenceSource1
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{LeftAbsentSequenceSource.left=current}
		public Action getLeftAbsentSequenceSourceLeftAction_1_0_0() { return cLeftAbsentSequenceSourceLeftAction_1_0_0; }
		
		//comm=','
		public Assignment getCommAssignment_1_0_1() { return cCommAssignment_1_0_1; }
		
		//','
		public Keyword getCommCommaKeyword_1_0_1_0() { return cCommCommaKeyword_1_0_1_0; }
		
		//right=LeftAbsentSequenceSource1
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//LeftAbsentSequenceSource1
		public RuleCall getRightLeftAbsentSequenceSource1ParserRuleCall_1_0_2_0() { return cRightLeftAbsentSequenceSource1ParserRuleCall_1_0_2_0; }
	}
	public class LeftAbsentSequenceSource1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LeftAbsentSequenceSource1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLeftAbsentSequenceSource2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cLeftAbsentSequenceSource1LeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cCommAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cCommCommaKeyword_1_0_1_0 = (Keyword)cCommAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightBasicAbsentPatternSourceParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//LeftAbsentSequenceSource1 LeftAbsentSequenceSource:
		//	LeftAbsentSequenceSource2 => ({LeftAbsentSequenceSource1.left=current} comm=',' right=BasicAbsentPatternSource)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LeftAbsentSequenceSource2 => ({LeftAbsentSequenceSource1.left=current} comm=',' right=BasicAbsentPatternSource)*
		public Group getGroup() { return cGroup; }
		
		//LeftAbsentSequenceSource2
		public RuleCall getLeftAbsentSequenceSource2ParserRuleCall_0() { return cLeftAbsentSequenceSource2ParserRuleCall_0; }
		
		//=> ({LeftAbsentSequenceSource1.left=current} comm=',' right=BasicAbsentPatternSource)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{LeftAbsentSequenceSource1.left=current} comm=',' right=BasicAbsentPatternSource
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{LeftAbsentSequenceSource1.left=current}
		public Action getLeftAbsentSequenceSource1LeftAction_1_0_0() { return cLeftAbsentSequenceSource1LeftAction_1_0_0; }
		
		//comm=','
		public Assignment getCommAssignment_1_0_1() { return cCommAssignment_1_0_1; }
		
		//','
		public Keyword getCommCommaKeyword_1_0_1_0() { return cCommCommaKeyword_1_0_1_0; }
		
		//right=BasicAbsentPatternSource
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//BasicAbsentPatternSource
		public RuleCall getRightBasicAbsentPatternSourceParserRuleCall_1_0_2_0() { return cRightBasicAbsentPatternSourceParserRuleCall_1_0_2_0; }
	}
	public class LeftAbsentSequenceSource2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LeftAbsentSequenceSource2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cOpOPEN_PARParserRuleCall_0_0_0_0 = (RuleCall)cOpAssignment_0_0_0.eContents().get(0);
		private final Assignment cLeftAbsentSequenceSourceAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cLeftAbsentSequenceSourceLeftAbsentSequenceSourceParserRuleCall_0_0_1_0 = (RuleCall)cLeftAbsentSequenceSourceAssignment_0_0_1.eContents().get(0);
		private final Assignment cCpAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cCpCLOSE_PARParserRuleCall_0_0_2_0 = (RuleCall)cCpAssignment_0_0_2.eContents().get(0);
		private final Assignment cWt6Assignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cWt6WithinTimeParserRuleCall_0_0_3_0 = (RuleCall)cWt6Assignment_0_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cBasicAbsentPatternSourceAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_1_0_0_0 = (RuleCall)cBasicAbsentPatternSourceAssignment_1_0_0.eContents().get(0);
		private final Assignment cCommaAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaCommaKeyword_1_0_1_0 = (Keyword)cCommaAssignment_1_0_1.eContents().get(0);
		private final Assignment cSequenceSourceChainAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cSequenceSourceChainSequenceSourceChainParserRuleCall_1_0_2_0 = (RuleCall)cSequenceSourceChainAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cSequenceSourceChainAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cSequenceSourceChainSequenceSourceChainParserRuleCall_2_0_0_0 = (RuleCall)cSequenceSourceChainAssignment_2_0_0.eContents().get(0);
		private final Assignment cCommaAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final Keyword cCommaCommaKeyword_2_0_1_0 = (Keyword)cCommaAssignment_2_0_1.eContents().get(0);
		private final Assignment cLeftAbsentSequenceSourceAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cLeftAbsentSequenceSourceLeftAbsentSequenceSourceParserRuleCall_2_0_2_0 = (RuleCall)cLeftAbsentSequenceSourceAssignment_2_0_2.eContents().get(0);
		
		//LeftAbsentSequenceSource2 LeftAbsentSequenceSource:
		//	=> (op=OPEN_PAR leftAbsentSequenceSource=LeftAbsentSequenceSource cp=CLOSE_PAR wt6=WithinTime?) | =>
		//	(basicAbsentPatternSource=BasicAbsentPatternSource comma=',' sequenceSourceChain=SequenceSourceChain) | =>
		//	(sequenceSourceChain=SequenceSourceChain comma=',' leftAbsentSequenceSource=LeftAbsentSequenceSource);
		@Override public ParserRule getRule() { return rule; }
		
		//=> (op=OPEN_PAR leftAbsentSequenceSource=LeftAbsentSequenceSource cp=CLOSE_PAR wt6=WithinTime?) | =>
		//(basicAbsentPatternSource=BasicAbsentPatternSource comma=',' sequenceSourceChain=SequenceSourceChain) | =>
		//(sequenceSourceChain=SequenceSourceChain comma=',' leftAbsentSequenceSource=LeftAbsentSequenceSource)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (op=OPEN_PAR leftAbsentSequenceSource=LeftAbsentSequenceSource cp=CLOSE_PAR wt6=WithinTime?)
		public Group getGroup_0() { return cGroup_0; }
		
		//op=OPEN_PAR leftAbsentSequenceSource=LeftAbsentSequenceSource cp=CLOSE_PAR wt6=WithinTime?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//op=OPEN_PAR
		public Assignment getOpAssignment_0_0_0() { return cOpAssignment_0_0_0; }
		
		//OPEN_PAR
		public RuleCall getOpOPEN_PARParserRuleCall_0_0_0_0() { return cOpOPEN_PARParserRuleCall_0_0_0_0; }
		
		//leftAbsentSequenceSource=LeftAbsentSequenceSource
		public Assignment getLeftAbsentSequenceSourceAssignment_0_0_1() { return cLeftAbsentSequenceSourceAssignment_0_0_1; }
		
		//LeftAbsentSequenceSource
		public RuleCall getLeftAbsentSequenceSourceLeftAbsentSequenceSourceParserRuleCall_0_0_1_0() { return cLeftAbsentSequenceSourceLeftAbsentSequenceSourceParserRuleCall_0_0_1_0; }
		
		//cp=CLOSE_PAR
		public Assignment getCpAssignment_0_0_2() { return cCpAssignment_0_0_2; }
		
		//CLOSE_PAR
		public RuleCall getCpCLOSE_PARParserRuleCall_0_0_2_0() { return cCpCLOSE_PARParserRuleCall_0_0_2_0; }
		
		//wt6=WithinTime?
		public Assignment getWt6Assignment_0_0_3() { return cWt6Assignment_0_0_3; }
		
		//WithinTime
		public RuleCall getWt6WithinTimeParserRuleCall_0_0_3_0() { return cWt6WithinTimeParserRuleCall_0_0_3_0; }
		
		//=> (basicAbsentPatternSource=BasicAbsentPatternSource comma=',' sequenceSourceChain=SequenceSourceChain)
		public Group getGroup_1() { return cGroup_1; }
		
		//basicAbsentPatternSource=BasicAbsentPatternSource comma=',' sequenceSourceChain=SequenceSourceChain
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//basicAbsentPatternSource=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSourceAssignment_1_0_0() { return cBasicAbsentPatternSourceAssignment_1_0_0; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_1_0_0_0() { return cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_1_0_0_0; }
		
		//comma=','
		public Assignment getCommaAssignment_1_0_1() { return cCommaAssignment_1_0_1; }
		
		//','
		public Keyword getCommaCommaKeyword_1_0_1_0() { return cCommaCommaKeyword_1_0_1_0; }
		
		//sequenceSourceChain=SequenceSourceChain
		public Assignment getSequenceSourceChainAssignment_1_0_2() { return cSequenceSourceChainAssignment_1_0_2; }
		
		//SequenceSourceChain
		public RuleCall getSequenceSourceChainSequenceSourceChainParserRuleCall_1_0_2_0() { return cSequenceSourceChainSequenceSourceChainParserRuleCall_1_0_2_0; }
		
		//=> (sequenceSourceChain=SequenceSourceChain comma=',' leftAbsentSequenceSource=LeftAbsentSequenceSource)
		public Group getGroup_2() { return cGroup_2; }
		
		//sequenceSourceChain=SequenceSourceChain comma=',' leftAbsentSequenceSource=LeftAbsentSequenceSource
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//sequenceSourceChain=SequenceSourceChain
		public Assignment getSequenceSourceChainAssignment_2_0_0() { return cSequenceSourceChainAssignment_2_0_0; }
		
		//SequenceSourceChain
		public RuleCall getSequenceSourceChainSequenceSourceChainParserRuleCall_2_0_0_0() { return cSequenceSourceChainSequenceSourceChainParserRuleCall_2_0_0_0; }
		
		//comma=','
		public Assignment getCommaAssignment_2_0_1() { return cCommaAssignment_2_0_1; }
		
		//','
		public Keyword getCommaCommaKeyword_2_0_1_0() { return cCommaCommaKeyword_2_0_1_0; }
		
		//leftAbsentSequenceSource=LeftAbsentSequenceSource
		public Assignment getLeftAbsentSequenceSourceAssignment_2_0_2() { return cLeftAbsentSequenceSourceAssignment_2_0_2; }
		
		//LeftAbsentSequenceSource
		public RuleCall getLeftAbsentSequenceSourceLeftAbsentSequenceSourceParserRuleCall_2_0_2_0() { return cLeftAbsentSequenceSourceLeftAbsentSequenceSourceParserRuleCall_2_0_2_0; }
	}
	public class RightAbsentSequenceSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.RightAbsentSequenceSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRightAbsentSequenceSource1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cRightAbsentSequenceSourceLeft1Action_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cCommAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cCommCommaKeyword_1_0_1_0 = (Keyword)cCommAssignment_1_0_1.eContents().get(0);
		private final Assignment cRight1Assignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRight1RightAbsentSequenceSource1ParserRuleCall_1_0_2_0 = (RuleCall)cRight1Assignment_1_0_2.eContents().get(0);
		
		//RightAbsentSequenceSource:
		//	RightAbsentSequenceSource1 => ({RightAbsentSequenceSource.left1=current} comm=','
		//	right1=RightAbsentSequenceSource1)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RightAbsentSequenceSource1 => ({RightAbsentSequenceSource.left1=current} comm=',' right1=RightAbsentSequenceSource1)*
		public Group getGroup() { return cGroup; }
		
		//RightAbsentSequenceSource1
		public RuleCall getRightAbsentSequenceSource1ParserRuleCall_0() { return cRightAbsentSequenceSource1ParserRuleCall_0; }
		
		//=> ({RightAbsentSequenceSource.left1=current} comm=',' right1=RightAbsentSequenceSource1)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RightAbsentSequenceSource.left1=current} comm=',' right1=RightAbsentSequenceSource1
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{RightAbsentSequenceSource.left1=current}
		public Action getRightAbsentSequenceSourceLeft1Action_1_0_0() { return cRightAbsentSequenceSourceLeft1Action_1_0_0; }
		
		//comm=','
		public Assignment getCommAssignment_1_0_1() { return cCommAssignment_1_0_1; }
		
		//','
		public Keyword getCommCommaKeyword_1_0_1_0() { return cCommCommaKeyword_1_0_1_0; }
		
		//right1=RightAbsentSequenceSource1
		public Assignment getRight1Assignment_1_0_2() { return cRight1Assignment_1_0_2; }
		
		//RightAbsentSequenceSource1
		public RuleCall getRight1RightAbsentSequenceSource1ParserRuleCall_1_0_2_0() { return cRight1RightAbsentSequenceSource1ParserRuleCall_1_0_2_0; }
	}
	public class RightAbsentSequenceSource1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.RightAbsentSequenceSource1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRightAbsentSequenceSource2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cRightAbsentSequenceSource1LeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cCommAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cCommCommaKeyword_1_0_1_0 = (Keyword)cCommAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightSequenceSourceChainParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//RightAbsentSequenceSource1 RightAbsentSequenceSource:
		//	RightAbsentSequenceSource2 => ({RightAbsentSequenceSource1.left=current} comm=',' right=SequenceSourceChain)*;
		@Override public ParserRule getRule() { return rule; }
		
		//RightAbsentSequenceSource2 => ({RightAbsentSequenceSource1.left=current} comm=',' right=SequenceSourceChain)*
		public Group getGroup() { return cGroup; }
		
		//RightAbsentSequenceSource2
		public RuleCall getRightAbsentSequenceSource2ParserRuleCall_0() { return cRightAbsentSequenceSource2ParserRuleCall_0; }
		
		//=> ({RightAbsentSequenceSource1.left=current} comm=',' right=SequenceSourceChain)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{RightAbsentSequenceSource1.left=current} comm=',' right=SequenceSourceChain
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{RightAbsentSequenceSource1.left=current}
		public Action getRightAbsentSequenceSource1LeftAction_1_0_0() { return cRightAbsentSequenceSource1LeftAction_1_0_0; }
		
		//comm=','
		public Assignment getCommAssignment_1_0_1() { return cCommAssignment_1_0_1; }
		
		//','
		public Keyword getCommCommaKeyword_1_0_1_0() { return cCommCommaKeyword_1_0_1_0; }
		
		//right=SequenceSourceChain
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//SequenceSourceChain
		public RuleCall getRightSequenceSourceChainParserRuleCall_1_0_2_0() { return cRightSequenceSourceChainParserRuleCall_1_0_2_0; }
	}
	public class RightAbsentSequenceSource2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.RightAbsentSequenceSource2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Assignment cOpAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cOpOPEN_PARParserRuleCall_0_0_0_0 = (RuleCall)cOpAssignment_0_0_0.eContents().get(0);
		private final Assignment cRightAbsentSequenceSourceAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cRightAbsentSequenceSourceRightAbsentSequenceSourceParserRuleCall_0_0_1_0 = (RuleCall)cRightAbsentSequenceSourceAssignment_0_0_1.eContents().get(0);
		private final Assignment cCpAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cCpCLOSE_PARParserRuleCall_0_0_2_0 = (RuleCall)cCpAssignment_0_0_2.eContents().get(0);
		private final Assignment cWt7Assignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cWt7WithinTimeParserRuleCall_0_0_3_0 = (RuleCall)cWt7Assignment_0_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Assignment cSequenceSourceChainAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cSequenceSourceChainSequenceSourceChainParserRuleCall_1_0_0_0 = (RuleCall)cSequenceSourceChainAssignment_1_0_0.eContents().get(0);
		private final Assignment cCommaAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cCommaCommaKeyword_1_0_1_0 = (Keyword)cCommaAssignment_1_0_1.eContents().get(0);
		private final Assignment cBasicAbsentPatternSourceAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_1_0_2_0 = (RuleCall)cBasicAbsentPatternSourceAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Assignment cBasicAbsentPatternSourceAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_2_0_0_0 = (RuleCall)cBasicAbsentPatternSourceAssignment_2_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_0_1 = (Keyword)cGroup_2_0.eContents().get(1);
		private final Assignment cRightAbsentSequenceSourceAssignment_2_0_2 = (Assignment)cGroup_2_0.eContents().get(2);
		private final RuleCall cRightAbsentSequenceSourceRightAbsentSequenceSourceParserRuleCall_2_0_2_0 = (RuleCall)cRightAbsentSequenceSourceAssignment_2_0_2.eContents().get(0);
		
		//RightAbsentSequenceSource2 RightAbsentSequenceSource:
		//	=> (op=OPEN_PAR rightAbsentSequenceSource=RightAbsentSequenceSource cp=CLOSE_PAR wt7=WithinTime?) | =>
		//	(sequenceSourceChain=SequenceSourceChain comma=',' basicAbsentPatternSource=BasicAbsentPatternSource) | =>
		//	(basicAbsentPatternSource=BasicAbsentPatternSource ',' rightAbsentSequenceSource=RightAbsentSequenceSource);
		@Override public ParserRule getRule() { return rule; }
		
		//=> (op=OPEN_PAR rightAbsentSequenceSource=RightAbsentSequenceSource cp=CLOSE_PAR wt7=WithinTime?) | =>
		//(sequenceSourceChain=SequenceSourceChain comma=',' basicAbsentPatternSource=BasicAbsentPatternSource) | =>
		//(basicAbsentPatternSource=BasicAbsentPatternSource ',' rightAbsentSequenceSource=RightAbsentSequenceSource)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (op=OPEN_PAR rightAbsentSequenceSource=RightAbsentSequenceSource cp=CLOSE_PAR wt7=WithinTime?)
		public Group getGroup_0() { return cGroup_0; }
		
		//op=OPEN_PAR rightAbsentSequenceSource=RightAbsentSequenceSource cp=CLOSE_PAR wt7=WithinTime?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//op=OPEN_PAR
		public Assignment getOpAssignment_0_0_0() { return cOpAssignment_0_0_0; }
		
		//OPEN_PAR
		public RuleCall getOpOPEN_PARParserRuleCall_0_0_0_0() { return cOpOPEN_PARParserRuleCall_0_0_0_0; }
		
		//rightAbsentSequenceSource=RightAbsentSequenceSource
		public Assignment getRightAbsentSequenceSourceAssignment_0_0_1() { return cRightAbsentSequenceSourceAssignment_0_0_1; }
		
		//RightAbsentSequenceSource
		public RuleCall getRightAbsentSequenceSourceRightAbsentSequenceSourceParserRuleCall_0_0_1_0() { return cRightAbsentSequenceSourceRightAbsentSequenceSourceParserRuleCall_0_0_1_0; }
		
		//cp=CLOSE_PAR
		public Assignment getCpAssignment_0_0_2() { return cCpAssignment_0_0_2; }
		
		//CLOSE_PAR
		public RuleCall getCpCLOSE_PARParserRuleCall_0_0_2_0() { return cCpCLOSE_PARParserRuleCall_0_0_2_0; }
		
		//wt7=WithinTime?
		public Assignment getWt7Assignment_0_0_3() { return cWt7Assignment_0_0_3; }
		
		//WithinTime
		public RuleCall getWt7WithinTimeParserRuleCall_0_0_3_0() { return cWt7WithinTimeParserRuleCall_0_0_3_0; }
		
		//=> (sequenceSourceChain=SequenceSourceChain comma=',' basicAbsentPatternSource=BasicAbsentPatternSource)
		public Group getGroup_1() { return cGroup_1; }
		
		//sequenceSourceChain=SequenceSourceChain comma=',' basicAbsentPatternSource=BasicAbsentPatternSource
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//sequenceSourceChain=SequenceSourceChain
		public Assignment getSequenceSourceChainAssignment_1_0_0() { return cSequenceSourceChainAssignment_1_0_0; }
		
		//SequenceSourceChain
		public RuleCall getSequenceSourceChainSequenceSourceChainParserRuleCall_1_0_0_0() { return cSequenceSourceChainSequenceSourceChainParserRuleCall_1_0_0_0; }
		
		//comma=','
		public Assignment getCommaAssignment_1_0_1() { return cCommaAssignment_1_0_1; }
		
		//','
		public Keyword getCommaCommaKeyword_1_0_1_0() { return cCommaCommaKeyword_1_0_1_0; }
		
		//basicAbsentPatternSource=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSourceAssignment_1_0_2() { return cBasicAbsentPatternSourceAssignment_1_0_2; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_1_0_2_0() { return cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_1_0_2_0; }
		
		//=> (basicAbsentPatternSource=BasicAbsentPatternSource ',' rightAbsentSequenceSource=RightAbsentSequenceSource)
		public Group getGroup_2() { return cGroup_2; }
		
		//basicAbsentPatternSource=BasicAbsentPatternSource ',' rightAbsentSequenceSource=RightAbsentSequenceSource
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//basicAbsentPatternSource=BasicAbsentPatternSource
		public Assignment getBasicAbsentPatternSourceAssignment_2_0_0() { return cBasicAbsentPatternSourceAssignment_2_0_0; }
		
		//BasicAbsentPatternSource
		public RuleCall getBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_2_0_0_0() { return cBasicAbsentPatternSourceBasicAbsentPatternSourceParserRuleCall_2_0_0_0; }
		
		//','
		public Keyword getCommaKeyword_2_0_1() { return cCommaKeyword_2_0_1; }
		
		//rightAbsentSequenceSource=RightAbsentSequenceSource
		public Assignment getRightAbsentSequenceSourceAssignment_2_0_2() { return cRightAbsentSequenceSourceAssignment_2_0_2; }
		
		//RightAbsentSequenceSource
		public RuleCall getRightAbsentSequenceSourceRightAbsentSequenceSourceParserRuleCall_2_0_2_0() { return cRightAbsentSequenceSourceRightAbsentSequenceSourceParserRuleCall_2_0_2_0; }
	}
	public class SequenceSourceChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SequenceSourceChain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSequenceSourceChain1ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cSequenceSourceChainLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Keyword cOpCommaKeyword_1_0_1_0 = (Keyword)cOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightSequenceSourceChain1ParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//SequenceSourceChain:
		//	SequenceSourceChain1 => ({SequenceSourceChain.left=current} op=',' right=SequenceSourceChain1)*;
		@Override public ParserRule getRule() { return rule; }
		
		//SequenceSourceChain1 => ({SequenceSourceChain.left=current} op=',' right=SequenceSourceChain1)*
		public Group getGroup() { return cGroup; }
		
		//SequenceSourceChain1
		public RuleCall getSequenceSourceChain1ParserRuleCall_0() { return cSequenceSourceChain1ParserRuleCall_0; }
		
		//=> ({SequenceSourceChain.left=current} op=',' right=SequenceSourceChain1)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SequenceSourceChain.left=current} op=',' right=SequenceSourceChain1
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{SequenceSourceChain.left=current}
		public Action getSequenceSourceChainLeftAction_1_0_0() { return cSequenceSourceChainLeftAction_1_0_0; }
		
		//op=','
		public Assignment getOpAssignment_1_0_1() { return cOpAssignment_1_0_1; }
		
		//','
		public Keyword getOpCommaKeyword_1_0_1_0() { return cOpCommaKeyword_1_0_1_0; }
		
		//right=SequenceSourceChain1
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//SequenceSourceChain1
		public RuleCall getRightSequenceSourceChain1ParserRuleCall_1_0_2_0() { return cRightSequenceSourceChain1ParserRuleCall_1_0_2_0; }
	}
	public class SequenceSourceChain1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SequenceSourceChain1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cSequenceSourceChainParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cCLOSE_PARParserRuleCall_0_0_2 = (RuleCall)cGroup_0_0.eContents().get(2);
		private final Assignment cWt1Assignment_0_0_3 = (Assignment)cGroup_0_0.eContents().get(3);
		private final RuleCall cWt1WithinTimeParserRuleCall_0_0_3_0 = (RuleCall)cWt1Assignment_0_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cSequenceSourceParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cWtAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWtWithinTimeParserRuleCall_1_1_0 = (RuleCall)cWtAssignment_1_1.eContents().get(0);
		
		//SequenceSourceChain1 SequenceSourceChain:
		//	=> (OPEN_PAR SequenceSourceChain CLOSE_PAR wt1+=WithinTime?) | SequenceSource wt=WithinTime?;
		@Override public ParserRule getRule() { return rule; }
		
		//=> (OPEN_PAR SequenceSourceChain CLOSE_PAR wt1+=WithinTime?) | SequenceSource wt=WithinTime?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> (OPEN_PAR SequenceSourceChain CLOSE_PAR wt1+=WithinTime?)
		public Group getGroup_0() { return cGroup_0; }
		
		//OPEN_PAR SequenceSourceChain CLOSE_PAR wt1+=WithinTime?
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_0_0_0() { return cOPEN_PARParserRuleCall_0_0_0; }
		
		//SequenceSourceChain
		public RuleCall getSequenceSourceChainParserRuleCall_0_0_1() { return cSequenceSourceChainParserRuleCall_0_0_1; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_0_0_2() { return cCLOSE_PARParserRuleCall_0_0_2; }
		
		//wt1+=WithinTime?
		public Assignment getWt1Assignment_0_0_3() { return cWt1Assignment_0_0_3; }
		
		//WithinTime
		public RuleCall getWt1WithinTimeParserRuleCall_0_0_3_0() { return cWt1WithinTimeParserRuleCall_0_0_3_0; }
		
		//SequenceSource wt=WithinTime?
		public Group getGroup_1() { return cGroup_1; }
		
		//SequenceSource
		public RuleCall getSequenceSourceParserRuleCall_1_0() { return cSequenceSourceParserRuleCall_1_0; }
		
		//wt=WithinTime?
		public Assignment getWtAssignment_1_1() { return cWtAssignment_1_1; }
		
		//WithinTime
		public RuleCall getWtWithinTimeParserRuleCall_1_1_0() { return cWtWithinTimeParserRuleCall_1_1_0; }
	}
	public class SequenceSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SequenceSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogicalStatefulSourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSequenceCollectionStatefulSourceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStandardStatefulSourceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLogicalAbsentStatefulSourceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SequenceSource:
		//	=> LogicalStatefulSource | => SequenceCollectionStatefulSource | => StandardStatefulSource | =>
		//	LogicalAbsentStatefulSource;
		@Override public ParserRule getRule() { return rule; }
		
		//=> LogicalStatefulSource | => SequenceCollectionStatefulSource | => StandardStatefulSource | =>
		//LogicalAbsentStatefulSource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> LogicalStatefulSource
		public RuleCall getLogicalStatefulSourceParserRuleCall_0() { return cLogicalStatefulSourceParserRuleCall_0; }
		
		//=> SequenceCollectionStatefulSource
		public RuleCall getSequenceCollectionStatefulSourceParserRuleCall_1() { return cSequenceCollectionStatefulSourceParserRuleCall_1; }
		
		//=> StandardStatefulSource
		public RuleCall getStandardStatefulSourceParserRuleCall_2() { return cStandardStatefulSourceParserRuleCall_2; }
		
		//=> LogicalAbsentStatefulSource
		public RuleCall getLogicalAbsentStatefulSourceParserRuleCall_3() { return cLogicalAbsentStatefulSourceParserRuleCall_3; }
	}
	public class SequenceCollectionStatefulSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SequenceCollectionStatefulSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cStandardStatefulSourceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cCollAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cCollCollectParserRuleCall_1_0_1_0 = (RuleCall)cCollAssignment_1_0_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cZero_or_moreAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cZero_or_moreAsteriskKeyword_1_1_0 = (Keyword)cZero_or_moreAssignment_1_1.eContents().get(0);
		private final Assignment cZero_or_oneAssignment_1_2 = (Assignment)cAlternatives_1.eContents().get(2);
		private final Keyword cZero_or_oneQuestionMarkKeyword_1_2_0 = (Keyword)cZero_or_oneAssignment_1_2.eContents().get(0);
		private final Assignment cOne_or_moreAssignment_1_3 = (Assignment)cAlternatives_1.eContents().get(3);
		private final Keyword cOne_or_morePlusSignKeyword_1_3_0 = (Keyword)cOne_or_moreAssignment_1_3.eContents().get(0);
		
		//SequenceCollectionStatefulSource:
		//	StandardStatefulSource ('<' coll=Collect '>' | zero_or_more='*' | zero_or_one='?' | one_or_more='+');
		@Override public ParserRule getRule() { return rule; }
		
		//StandardStatefulSource ('<' coll=Collect '>' | zero_or_more='*' | zero_or_one='?' | one_or_more='+')
		public Group getGroup() { return cGroup; }
		
		//StandardStatefulSource
		public RuleCall getStandardStatefulSourceParserRuleCall_0() { return cStandardStatefulSourceParserRuleCall_0; }
		
		//'<' coll=Collect '>' | zero_or_more='*' | zero_or_one='?' | one_or_more='+'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'<' coll=Collect '>'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0_0() { return cLessThanSignKeyword_1_0_0; }
		
		//coll=Collect
		public Assignment getCollAssignment_1_0_1() { return cCollAssignment_1_0_1; }
		
		//Collect
		public RuleCall getCollCollectParserRuleCall_1_0_1_0() { return cCollCollectParserRuleCall_1_0_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_1_0_2() { return cGreaterThanSignKeyword_1_0_2; }
		
		//zero_or_more='*'
		public Assignment getZero_or_moreAssignment_1_1() { return cZero_or_moreAssignment_1_1; }
		
		//'*'
		public Keyword getZero_or_moreAsteriskKeyword_1_1_0() { return cZero_or_moreAsteriskKeyword_1_1_0; }
		
		//zero_or_one='?'
		public Assignment getZero_or_oneAssignment_1_2() { return cZero_or_oneAssignment_1_2; }
		
		//'?'
		public Keyword getZero_or_oneQuestionMarkKeyword_1_2_0() { return cZero_or_oneQuestionMarkKeyword_1_2_0; }
		
		//one_or_more='+'
		public Assignment getOne_or_moreAssignment_1_3() { return cOne_or_moreAssignment_1_3; }
		
		//'+'
		public Keyword getOne_or_morePlusSignKeyword_1_3_0() { return cOne_or_morePlusSignKeyword_1_3_0; }
	}
	public class AnonymousStreamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AnonymousStream");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cAnonymousStreamParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cCLOSE_PARParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cFROMParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cQiAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cQiQueryInputParserRuleCall_1_1_0 = (RuleCall)cQiAssignment_1_1.eContents().get(0);
		private final Assignment cQsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cQsQuerySectionParserRuleCall_1_2_0 = (RuleCall)cQsAssignment_1_2.eContents().get(0);
		private final Assignment cOut_rateAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOut_rateOutputRateParserRuleCall_1_3_0 = (RuleCall)cOut_rateAssignment_1_3.eContents().get(0);
		private final RuleCall cRETURNParserRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Assignment cOp_event_typeAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cOp_event_typeOutputEventTypeParserRuleCall_1_5_0 = (RuleCall)cOp_event_typeAssignment_1_5.eContents().get(0);
		
		//AnonymousStream:
		//	OPEN_PAR AnonymousStream CLOSE_PAR
		//	| FROM qi=QueryInput qs=QuerySection? out_rate=OutputRate? RETURN op_event_type=OutputEventType?;
		@Override public ParserRule getRule() { return rule; }
		
		//OPEN_PAR AnonymousStream CLOSE_PAR | FROM qi=QueryInput qs=QuerySection? out_rate=OutputRate? RETURN
		//op_event_type=OutputEventType?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OPEN_PAR AnonymousStream CLOSE_PAR
		public Group getGroup_0() { return cGroup_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_0_0() { return cOPEN_PARParserRuleCall_0_0; }
		
		//AnonymousStream
		public RuleCall getAnonymousStreamParserRuleCall_0_1() { return cAnonymousStreamParserRuleCall_0_1; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_0_2() { return cCLOSE_PARParserRuleCall_0_2; }
		
		//FROM qi=QueryInput qs=QuerySection? out_rate=OutputRate? RETURN op_event_type=OutputEventType?
		public Group getGroup_1() { return cGroup_1; }
		
		//FROM
		public RuleCall getFROMParserRuleCall_1_0() { return cFROMParserRuleCall_1_0; }
		
		//qi=QueryInput
		public Assignment getQiAssignment_1_1() { return cQiAssignment_1_1; }
		
		//QueryInput
		public RuleCall getQiQueryInputParserRuleCall_1_1_0() { return cQiQueryInputParserRuleCall_1_1_0; }
		
		//qs=QuerySection?
		public Assignment getQsAssignment_1_2() { return cQsAssignment_1_2; }
		
		//QuerySection
		public RuleCall getQsQuerySectionParserRuleCall_1_2_0() { return cQsQuerySectionParserRuleCall_1_2_0; }
		
		//out_rate=OutputRate?
		public Assignment getOut_rateAssignment_1_3() { return cOut_rateAssignment_1_3; }
		
		//OutputRate
		public RuleCall getOut_rateOutputRateParserRuleCall_1_3_0() { return cOut_rateOutputRateParserRuleCall_1_3_0; }
		
		//RETURN
		public RuleCall getRETURNParserRuleCall_1_4() { return cRETURNParserRuleCall_1_4; }
		
		//op_event_type=OutputEventType?
		public Assignment getOp_event_typeAssignment_1_5() { return cOp_event_typeAssignment_1_5; }
		
		//OutputEventType
		public RuleCall getOp_event_typeOutputEventTypeParserRuleCall_1_5_0() { return cOp_event_typeOutputEventTypeParserRuleCall_1_5_0; }
	}
	public class OutputRateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OutputRate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOutputRateAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cOUTPUTParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cOp_rate_typeAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOp_rate_typeOutputRateTypeParserRuleCall_0_2_0 = (RuleCall)cOp_rate_typeAssignment_0_2.eContents().get(0);
		private final Assignment cEveryAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cEveryEVERYParserRuleCall_0_3_0 = (RuleCall)cEveryAssignment_0_3.eContents().get(0);
		private final Alternatives cAlternatives_0_4 = (Alternatives)cGroup_0.eContents().get(4);
		private final Assignment cTvAssignment_0_4_0 = (Assignment)cAlternatives_0_4.eContents().get(0);
		private final RuleCall cTvTimeValueParserRuleCall_0_4_0_0 = (RuleCall)cTvAssignment_0_4_0.eContents().get(0);
		private final Group cGroup_0_4_1 = (Group)cAlternatives_0_4.eContents().get(1);
		private final RuleCall cINT_LITERALParserRuleCall_0_4_1_0 = (RuleCall)cGroup_0_4_1.eContents().get(0);
		private final RuleCall cEVENTSParserRuleCall_0_4_1_1 = (RuleCall)cGroup_0_4_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutputRateAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cOUTPUTParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cSNAPSHOTParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Assignment cEveryAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEveryEVERYParserRuleCall_1_3_0 = (RuleCall)cEveryAssignment_1_3.eContents().get(0);
		private final Assignment cTvAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cTvTimeValueParserRuleCall_1_4_0 = (RuleCall)cTvAssignment_1_4.eContents().get(0);
		
		//OutputRate:
		//	{OutputRate} OUTPUT op_rate_type=OutputRateType? every=EVERY (tv=TimeValue | INT_LITERAL EVENTS) | {OutputRate}
		//	OUTPUT SNAPSHOT every=EVERY tv=TimeValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{OutputRate} OUTPUT op_rate_type=OutputRateType? every=EVERY (tv=TimeValue | INT_LITERAL EVENTS) | {OutputRate} OUTPUT
		//SNAPSHOT every=EVERY tv=TimeValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OutputRate} OUTPUT op_rate_type=OutputRateType? every=EVERY (tv=TimeValue | INT_LITERAL EVENTS)
		public Group getGroup_0() { return cGroup_0; }
		
		//{OutputRate}
		public Action getOutputRateAction_0_0() { return cOutputRateAction_0_0; }
		
		//OUTPUT
		public RuleCall getOUTPUTParserRuleCall_0_1() { return cOUTPUTParserRuleCall_0_1; }
		
		//op_rate_type=OutputRateType?
		public Assignment getOp_rate_typeAssignment_0_2() { return cOp_rate_typeAssignment_0_2; }
		
		//OutputRateType
		public RuleCall getOp_rate_typeOutputRateTypeParserRuleCall_0_2_0() { return cOp_rate_typeOutputRateTypeParserRuleCall_0_2_0; }
		
		//every=EVERY
		public Assignment getEveryAssignment_0_3() { return cEveryAssignment_0_3; }
		
		//EVERY
		public RuleCall getEveryEVERYParserRuleCall_0_3_0() { return cEveryEVERYParserRuleCall_0_3_0; }
		
		//tv=TimeValue | INT_LITERAL EVENTS
		public Alternatives getAlternatives_0_4() { return cAlternatives_0_4; }
		
		//tv=TimeValue
		public Assignment getTvAssignment_0_4_0() { return cTvAssignment_0_4_0; }
		
		//TimeValue
		public RuleCall getTvTimeValueParserRuleCall_0_4_0_0() { return cTvTimeValueParserRuleCall_0_4_0_0; }
		
		//INT_LITERAL EVENTS
		public Group getGroup_0_4_1() { return cGroup_0_4_1; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_0_4_1_0() { return cINT_LITERALParserRuleCall_0_4_1_0; }
		
		//EVENTS
		public RuleCall getEVENTSParserRuleCall_0_4_1_1() { return cEVENTSParserRuleCall_0_4_1_1; }
		
		//{OutputRate} OUTPUT SNAPSHOT every=EVERY tv=TimeValue
		public Group getGroup_1() { return cGroup_1; }
		
		//{OutputRate}
		public Action getOutputRateAction_1_0() { return cOutputRateAction_1_0; }
		
		//OUTPUT
		public RuleCall getOUTPUTParserRuleCall_1_1() { return cOUTPUTParserRuleCall_1_1; }
		
		//SNAPSHOT
		public RuleCall getSNAPSHOTParserRuleCall_1_2() { return cSNAPSHOTParserRuleCall_1_2; }
		
		//every=EVERY
		public Assignment getEveryAssignment_1_3() { return cEveryAssignment_1_3; }
		
		//EVERY
		public RuleCall getEveryEVERYParserRuleCall_1_3_0() { return cEveryEVERYParserRuleCall_1_3_0; }
		
		//tv=TimeValue
		public Assignment getTvAssignment_1_4() { return cTvAssignment_1_4; }
		
		//TimeValue
		public RuleCall getTvTimeValueParserRuleCall_1_4_0() { return cTvTimeValueParserRuleCall_1_4_0; }
	}
	public class OutputRateTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OutputRateType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOutputRateTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cALLParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutputRateTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLASTParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOutputRateTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cFIRSTParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//OutputRateType:
		//	{OutputRateType} ALL
		//	| {OutputRateType} LAST
		//	| {OutputRateType} FIRST;
		@Override public ParserRule getRule() { return rule; }
		
		//{OutputRateType} ALL | {OutputRateType} LAST | {OutputRateType} FIRST
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OutputRateType} ALL
		public Group getGroup_0() { return cGroup_0; }
		
		//{OutputRateType}
		public Action getOutputRateTypeAction_0_0() { return cOutputRateTypeAction_0_0; }
		
		//ALL
		public RuleCall getALLParserRuleCall_0_1() { return cALLParserRuleCall_0_1; }
		
		//{OutputRateType} LAST
		public Group getGroup_1() { return cGroup_1; }
		
		//{OutputRateType}
		public Action getOutputRateTypeAction_1_0() { return cOutputRateTypeAction_1_0; }
		
		//LAST
		public RuleCall getLASTParserRuleCall_1_1() { return cLASTParserRuleCall_1_1; }
		
		//{OutputRateType} FIRST
		public Group getGroup_2() { return cGroup_2; }
		
		//{OutputRateType}
		public Action getOutputRateTypeAction_2_0() { return cOutputRateTypeAction_2_0; }
		
		//FIRST
		public RuleCall getFIRSTParserRuleCall_2_1() { return cFIRSTParserRuleCall_2_1; }
	}
	public class QueryOutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.QueryOutput");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cINSERTParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cOutEventTypeAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOutEventTypeOutputEventTypeParserRuleCall_0_1_0 = (RuleCall)cOutEventTypeAssignment_0_1.eContents().get(0);
		private final RuleCall cINTOParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Assignment cTarAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cTarSource1ParserRuleCall_0_3_0 = (RuleCall)cTarAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cDELETEParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cTarAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTarSource1ParserRuleCall_1_1_0 = (RuleCall)cTarAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cFORParserRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cOutEventTypeAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cOutEventTypeOutputEventTypeParserRuleCall_1_2_1_0 = (RuleCall)cOutEventTypeAssignment_1_2_1.eContents().get(0);
		private final Assignment cOnAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cOnONParserRuleCall_1_3_0 = (RuleCall)cOnAssignment_1_3.eContents().get(0);
		private final Assignment cExprAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cExprExpressionParserRuleCall_1_4_0 = (RuleCall)cExprAssignment_1_4.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cUPDATEParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cOrAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cOrORParserRuleCall_2_1_0_0 = (RuleCall)cOrAssignment_2_1_0.eContents().get(0);
		private final RuleCall cINSERTParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final RuleCall cINTOParserRuleCall_2_1_2 = (RuleCall)cGroup_2_1.eContents().get(2);
		private final Assignment cTarAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTarSource1ParserRuleCall_2_2_0 = (RuleCall)cTarAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final RuleCall cFORParserRuleCall_2_3_0 = (RuleCall)cGroup_2_3.eContents().get(0);
		private final Assignment cOutEventTypeAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cOutEventTypeOutputEventTypeParserRuleCall_2_3_1_0 = (RuleCall)cOutEventTypeAssignment_2_3_1.eContents().get(0);
		private final Assignment cSetClauseAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cSetClauseSetClauseParserRuleCall_2_4_0 = (RuleCall)cSetClauseAssignment_2_4.eContents().get(0);
		private final Assignment cOnAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cOnONParserRuleCall_2_5_0 = (RuleCall)cOnAssignment_2_5.eContents().get(0);
		private final Assignment cExprAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cExprExpressionParserRuleCall_2_6_0 = (RuleCall)cExprAssignment_2_6.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cRETURNParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Assignment cOutEventTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOutEventTypeOutputEventTypeParserRuleCall_3_1_0 = (RuleCall)cOutEventTypeAssignment_3_1.eContents().get(0);
		
		//QueryOutput:
		//	INSERT outEventType=OutputEventType? INTO tar=Source1 | DELETE tar=Source1 (FOR outEventType=OutputEventType)? on=ON
		//	expr=Expression | UPDATE (or=OR INSERT INTO)? tar=Source1 (FOR outEventType=OutputEventType)? setClause=SetClause?
		//	on=ON expr=Expression | RETURN outEventType=OutputEventType?;
		@Override public ParserRule getRule() { return rule; }
		
		//INSERT outEventType=OutputEventType? INTO tar=Source1 | DELETE tar=Source1 (FOR outEventType=OutputEventType)? on=ON
		//expr=Expression | UPDATE (or=OR INSERT INTO)? tar=Source1 (FOR outEventType=OutputEventType)? setClause=SetClause?
		//on=ON expr=Expression | RETURN outEventType=OutputEventType?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INSERT outEventType=OutputEventType? INTO tar=Source1
		public Group getGroup_0() { return cGroup_0; }
		
		//INSERT
		public RuleCall getINSERTParserRuleCall_0_0() { return cINSERTParserRuleCall_0_0; }
		
		//outEventType=OutputEventType?
		public Assignment getOutEventTypeAssignment_0_1() { return cOutEventTypeAssignment_0_1; }
		
		//OutputEventType
		public RuleCall getOutEventTypeOutputEventTypeParserRuleCall_0_1_0() { return cOutEventTypeOutputEventTypeParserRuleCall_0_1_0; }
		
		//INTO
		public RuleCall getINTOParserRuleCall_0_2() { return cINTOParserRuleCall_0_2; }
		
		//tar=Source1
		public Assignment getTarAssignment_0_3() { return cTarAssignment_0_3; }
		
		//Source1
		public RuleCall getTarSource1ParserRuleCall_0_3_0() { return cTarSource1ParserRuleCall_0_3_0; }
		
		//DELETE tar=Source1 (FOR outEventType=OutputEventType)? on=ON expr=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//DELETE
		public RuleCall getDELETEParserRuleCall_1_0() { return cDELETEParserRuleCall_1_0; }
		
		//tar=Source1
		public Assignment getTarAssignment_1_1() { return cTarAssignment_1_1; }
		
		//Source1
		public RuleCall getTarSource1ParserRuleCall_1_1_0() { return cTarSource1ParserRuleCall_1_1_0; }
		
		//(FOR outEventType=OutputEventType)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//FOR
		public RuleCall getFORParserRuleCall_1_2_0() { return cFORParserRuleCall_1_2_0; }
		
		//outEventType=OutputEventType
		public Assignment getOutEventTypeAssignment_1_2_1() { return cOutEventTypeAssignment_1_2_1; }
		
		//OutputEventType
		public RuleCall getOutEventTypeOutputEventTypeParserRuleCall_1_2_1_0() { return cOutEventTypeOutputEventTypeParserRuleCall_1_2_1_0; }
		
		//on=ON
		public Assignment getOnAssignment_1_3() { return cOnAssignment_1_3; }
		
		//ON
		public RuleCall getOnONParserRuleCall_1_3_0() { return cOnONParserRuleCall_1_3_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_4() { return cExprAssignment_1_4; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_4_0() { return cExprExpressionParserRuleCall_1_4_0; }
		
		//UPDATE (or=OR INSERT INTO)? tar=Source1 (FOR outEventType=OutputEventType)? setClause=SetClause? on=ON expr=Expression
		public Group getGroup_2() { return cGroup_2; }
		
		//UPDATE
		public RuleCall getUPDATEParserRuleCall_2_0() { return cUPDATEParserRuleCall_2_0; }
		
		//(or=OR INSERT INTO)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//or=OR
		public Assignment getOrAssignment_2_1_0() { return cOrAssignment_2_1_0; }
		
		//OR
		public RuleCall getOrORParserRuleCall_2_1_0_0() { return cOrORParserRuleCall_2_1_0_0; }
		
		//INSERT
		public RuleCall getINSERTParserRuleCall_2_1_1() { return cINSERTParserRuleCall_2_1_1; }
		
		//INTO
		public RuleCall getINTOParserRuleCall_2_1_2() { return cINTOParserRuleCall_2_1_2; }
		
		//tar=Source1
		public Assignment getTarAssignment_2_2() { return cTarAssignment_2_2; }
		
		//Source1
		public RuleCall getTarSource1ParserRuleCall_2_2_0() { return cTarSource1ParserRuleCall_2_2_0; }
		
		//(FOR outEventType=OutputEventType)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//FOR
		public RuleCall getFORParserRuleCall_2_3_0() { return cFORParserRuleCall_2_3_0; }
		
		//outEventType=OutputEventType
		public Assignment getOutEventTypeAssignment_2_3_1() { return cOutEventTypeAssignment_2_3_1; }
		
		//OutputEventType
		public RuleCall getOutEventTypeOutputEventTypeParserRuleCall_2_3_1_0() { return cOutEventTypeOutputEventTypeParserRuleCall_2_3_1_0; }
		
		//setClause=SetClause?
		public Assignment getSetClauseAssignment_2_4() { return cSetClauseAssignment_2_4; }
		
		//SetClause
		public RuleCall getSetClauseSetClauseParserRuleCall_2_4_0() { return cSetClauseSetClauseParserRuleCall_2_4_0; }
		
		//on=ON
		public Assignment getOnAssignment_2_5() { return cOnAssignment_2_5; }
		
		//ON
		public RuleCall getOnONParserRuleCall_2_5_0() { return cOnONParserRuleCall_2_5_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_2_6() { return cExprAssignment_2_6; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_6_0() { return cExprExpressionParserRuleCall_2_6_0; }
		
		//RETURN outEventType=OutputEventType?
		public Group getGroup_3() { return cGroup_3; }
		
		//RETURN
		public RuleCall getRETURNParserRuleCall_3_0() { return cRETURNParserRuleCall_3_0; }
		
		//outEventType=OutputEventType?
		public Assignment getOutEventTypeAssignment_3_1() { return cOutEventTypeAssignment_3_1; }
		
		//OutputEventType
		public RuleCall getOutEventTypeOutputEventTypeParserRuleCall_3_1_0() { return cOutEventTypeOutputEventTypeParserRuleCall_3_1_0; }
	}
	public class SetClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SetClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSETParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cSetAssignmentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSetAssignmentSetAssignmentParserRuleCall_1_0 = (RuleCall)cSetAssignmentAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSetAssignmentAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSetAssignmentSetAssignmentParserRuleCall_2_1_0 = (RuleCall)cSetAssignmentAssignment_2_1.eContents().get(0);
		
		//SetClause:
		//	SET setAssignment+=SetAssignment (',' setAssignment+=SetAssignment)*;
		@Override public ParserRule getRule() { return rule; }
		
		//SET setAssignment+=SetAssignment (',' setAssignment+=SetAssignment)*
		public Group getGroup() { return cGroup; }
		
		//SET
		public RuleCall getSETParserRuleCall_0() { return cSETParserRuleCall_0; }
		
		//setAssignment+=SetAssignment
		public Assignment getSetAssignmentAssignment_1() { return cSetAssignmentAssignment_1; }
		
		//SetAssignment
		public RuleCall getSetAssignmentSetAssignmentParserRuleCall_1_0() { return cSetAssignmentSetAssignmentParserRuleCall_1_0; }
		
		//(',' setAssignment+=SetAssignment)*
		public Group getGroup_2() { return cGroup_2; }
		
		//','
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }
		
		//setAssignment+=SetAssignment
		public Assignment getSetAssignmentAssignment_2_1() { return cSetAssignmentAssignment_2_1; }
		
		//SetAssignment
		public RuleCall getSetAssignmentSetAssignmentParserRuleCall_2_1_0() { return cSetAssignmentSetAssignmentParserRuleCall_2_1_0; }
	}
	public class SetAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SetAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAttributeReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//SetAssignment:
		//	AttributeReference '=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeReference '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//AttributeReference
		public RuleCall getAttributeReferenceParserRuleCall_0() { return cAttributeReferenceParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class OutputEventTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OutputEventType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOutputEventTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cALLParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cEVENTSParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutputEventTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cALLParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cRAWParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cEVENTSParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOutputEventTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cEXPIREDParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cEVENTSParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOutputEventTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cEXPIREDParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cRAWParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final RuleCall cEVENTSParserRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cOutputEventTypeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final RuleCall cCURRENTParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cEVENTSParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//OutputEventType:
		//	{OutputEventType} ALL EVENTS | {OutputEventType} ALL RAW EVENTS | {OutputEventType} EXPIRED EVENTS |
		//	{OutputEventType} EXPIRED RAW EVENTS | {OutputEventType} CURRENT? EVENTS;
		@Override public ParserRule getRule() { return rule; }
		
		//{OutputEventType} ALL EVENTS | {OutputEventType} ALL RAW EVENTS | {OutputEventType} EXPIRED EVENTS | {OutputEventType}
		//EXPIRED RAW EVENTS | {OutputEventType} CURRENT? EVENTS
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OutputEventType} ALL EVENTS
		public Group getGroup_0() { return cGroup_0; }
		
		//{OutputEventType}
		public Action getOutputEventTypeAction_0_0() { return cOutputEventTypeAction_0_0; }
		
		//ALL
		public RuleCall getALLParserRuleCall_0_1() { return cALLParserRuleCall_0_1; }
		
		//EVENTS
		public RuleCall getEVENTSParserRuleCall_0_2() { return cEVENTSParserRuleCall_0_2; }
		
		//{OutputEventType} ALL RAW EVENTS
		public Group getGroup_1() { return cGroup_1; }
		
		//{OutputEventType}
		public Action getOutputEventTypeAction_1_0() { return cOutputEventTypeAction_1_0; }
		
		//ALL
		public RuleCall getALLParserRuleCall_1_1() { return cALLParserRuleCall_1_1; }
		
		//RAW
		public RuleCall getRAWParserRuleCall_1_2() { return cRAWParserRuleCall_1_2; }
		
		//EVENTS
		public RuleCall getEVENTSParserRuleCall_1_3() { return cEVENTSParserRuleCall_1_3; }
		
		//{OutputEventType} EXPIRED EVENTS
		public Group getGroup_2() { return cGroup_2; }
		
		//{OutputEventType}
		public Action getOutputEventTypeAction_2_0() { return cOutputEventTypeAction_2_0; }
		
		//EXPIRED
		public RuleCall getEXPIREDParserRuleCall_2_1() { return cEXPIREDParserRuleCall_2_1; }
		
		//EVENTS
		public RuleCall getEVENTSParserRuleCall_2_2() { return cEVENTSParserRuleCall_2_2; }
		
		//{OutputEventType} EXPIRED RAW EVENTS
		public Group getGroup_3() { return cGroup_3; }
		
		//{OutputEventType}
		public Action getOutputEventTypeAction_3_0() { return cOutputEventTypeAction_3_0; }
		
		//EXPIRED
		public RuleCall getEXPIREDParserRuleCall_3_1() { return cEXPIREDParserRuleCall_3_1; }
		
		//RAW
		public RuleCall getRAWParserRuleCall_3_2() { return cRAWParserRuleCall_3_2; }
		
		//EVENTS
		public RuleCall getEVENTSParserRuleCall_3_3() { return cEVENTSParserRuleCall_3_3; }
		
		//{OutputEventType} CURRENT? EVENTS
		public Group getGroup_4() { return cGroup_4; }
		
		//{OutputEventType}
		public Action getOutputEventTypeAction_4_0() { return cOutputEventTypeAction_4_0; }
		
		//CURRENT?
		public RuleCall getCURRENTParserRuleCall_4_1() { return cCURRENTParserRuleCall_4_1; }
		
		//EVENTS
		public RuleCall getEVENTSParserRuleCall_4_2() { return cEVENTSParserRuleCall_4_2; }
	}
	public class BasicSourceStreamHandlersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.BasicSourceStreamHandlers");
		private final Assignment cBasicSsHandlerAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cBasicSsHandlerBasicSourceStreamHandlerParserRuleCall_0 = (RuleCall)cBasicSsHandlerAssignment.eContents().get(0);
		
		//BasicSourceStreamHandlers:
		//	basicSsHandler+=BasicSourceStreamHandler+;
		@Override public ParserRule getRule() { return rule; }
		
		//basicSsHandler+=BasicSourceStreamHandler+
		public Assignment getBasicSsHandlerAssignment() { return cBasicSsHandlerAssignment; }
		
		//BasicSourceStreamHandler
		public RuleCall getBasicSsHandlerBasicSourceStreamHandlerParserRuleCall_0() { return cBasicSsHandlerBasicSourceStreamHandlerParserRuleCall_0; }
	}
	public class BasicSourceStreamHandlers1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.BasicSourceStreamHandlers1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBasicSourceStreamHandlers1Action_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_1_0_0_0 = (Keyword)cGroup_1_0_0.eContents().get(0);
		private final RuleCall cOPEN_SQARE_BRACKETSParserRuleCall_1_0_0_1 = (RuleCall)cGroup_1_0_0.eContents().get(1);
		private final Assignment cExpAssignment_1_0_0_2 = (Assignment)cGroup_1_0_0.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_1_0_0_2_0 = (RuleCall)cExpAssignment_1_0_0_2.eContents().get(0);
		private final RuleCall cCLOSE_SQARE_BRACKETSParserRuleCall_1_0_0_3 = (RuleCall)cGroup_1_0_0.eContents().get(3);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cGroup_1_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Assignment cFoAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cFoFunctionOperationParserRuleCall_1_1_0_1_0 = (RuleCall)cFoAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Keyword cNumberSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final RuleCall cWINDOWParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cFunc_opAssignment_2_0_3 = (Assignment)cGroup_2_0.eContents().get(3);
		private final RuleCall cFunc_opFunctionOperationParserRuleCall_2_0_3_0 = (RuleCall)cFunc_opAssignment_2_0_3.eContents().get(0);
		
		//BasicSourceStreamHandlers1:
		//	{BasicSourceStreamHandlers1} (=> ('#'? OPEN_SQARE_BRACKETS exp=Expression CLOSE_SQARE_BRACKETS) | => ('#'
		//	fo=FunctionOperation))? => ('#' WINDOW '.' func_op=FunctionOperation)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BasicSourceStreamHandlers1} (=> ('#'? OPEN_SQARE_BRACKETS exp=Expression CLOSE_SQARE_BRACKETS) | => ('#'
		//fo=FunctionOperation))? => ('#' WINDOW '.' func_op=FunctionOperation)?
		public Group getGroup() { return cGroup; }
		
		//{BasicSourceStreamHandlers1}
		public Action getBasicSourceStreamHandlers1Action_0() { return cBasicSourceStreamHandlers1Action_0; }
		
		//(=> ('#'? OPEN_SQARE_BRACKETS exp=Expression CLOSE_SQARE_BRACKETS) | => ('#' fo=FunctionOperation))?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//=> ('#'? OPEN_SQARE_BRACKETS exp=Expression CLOSE_SQARE_BRACKETS)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'#'? OPEN_SQARE_BRACKETS exp=Expression CLOSE_SQARE_BRACKETS
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//'#'?
		public Keyword getNumberSignKeyword_1_0_0_0() { return cNumberSignKeyword_1_0_0_0; }
		
		//OPEN_SQARE_BRACKETS
		public RuleCall getOPEN_SQARE_BRACKETSParserRuleCall_1_0_0_1() { return cOPEN_SQARE_BRACKETSParserRuleCall_1_0_0_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_1_0_0_2() { return cExpAssignment_1_0_0_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_1_0_0_2_0() { return cExpExpressionParserRuleCall_1_0_0_2_0; }
		
		//CLOSE_SQARE_BRACKETS
		public RuleCall getCLOSE_SQARE_BRACKETSParserRuleCall_1_0_0_3() { return cCLOSE_SQARE_BRACKETSParserRuleCall_1_0_0_3; }
		
		//=> ('#' fo=FunctionOperation)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'#' fo=FunctionOperation
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_1_1_0_0() { return cNumberSignKeyword_1_1_0_0; }
		
		//fo=FunctionOperation
		public Assignment getFoAssignment_1_1_0_1() { return cFoAssignment_1_1_0_1; }
		
		//FunctionOperation
		public RuleCall getFoFunctionOperationParserRuleCall_1_1_0_1_0() { return cFoFunctionOperationParserRuleCall_1_1_0_1_0; }
		
		//=> ('#' WINDOW '.' func_op=FunctionOperation)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'#' WINDOW '.' func_op=FunctionOperation
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//'#'
		public Keyword getNumberSignKeyword_2_0_0() { return cNumberSignKeyword_2_0_0; }
		
		//WINDOW
		public RuleCall getWINDOWParserRuleCall_2_0_1() { return cWINDOWParserRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_2() { return cFullStopKeyword_2_0_2; }
		
		//func_op=FunctionOperation
		public Assignment getFunc_opAssignment_2_0_3() { return cFunc_opAssignment_2_0_3; }
		
		//FunctionOperation
		public RuleCall getFunc_opFunctionOperationParserRuleCall_2_0_3_0() { return cFunc_opFunctionOperationParserRuleCall_2_0_3_0; }
	}
	public class BasicSourceStreamHandlerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.BasicSourceStreamHandler");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFilAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFilFilterParserRuleCall_0_0 = (RuleCall)cFilAssignment_0.eContents().get(0);
		private final Assignment cSfAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSfStreamFunctionParserRuleCall_1_0 = (RuleCall)cSfAssignment_1.eContents().get(0);
		
		//BasicSourceStreamHandler:
		//	fil=Filter | sf=StreamFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//fil=Filter | sf=StreamFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//fil=Filter
		public Assignment getFilAssignment_0() { return cFilAssignment_0; }
		
		//Filter
		public RuleCall getFilFilterParserRuleCall_0_0() { return cFilFilterParserRuleCall_0_0; }
		
		//sf=StreamFunction
		public Assignment getSfAssignment_1() { return cSfAssignment_1; }
		
		//StreamFunction
		public RuleCall getSfStreamFunctionParserRuleCall_1_0() { return cSfStreamFunctionParserRuleCall_1_0; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Filter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cOPEN_SQARE_BRACKETSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		private final RuleCall cCLOSE_SQARE_BRACKETSParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Filter:
		//	'#'? OPEN_SQARE_BRACKETS exp=Expression CLOSE_SQARE_BRACKETS;
		@Override public ParserRule getRule() { return rule; }
		
		//'#'? OPEN_SQARE_BRACKETS exp=Expression CLOSE_SQARE_BRACKETS
		public Group getGroup() { return cGroup; }
		
		//'#'?
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//OPEN_SQARE_BRACKETS
		public RuleCall getOPEN_SQARE_BRACKETSParserRuleCall_1() { return cOPEN_SQARE_BRACKETSParserRuleCall_1; }
		
		//exp=Expression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//Expression
		public RuleCall getExpExpressionParserRuleCall_2_0() { return cExpExpressionParserRuleCall_2_0; }
		
		//CLOSE_SQARE_BRACKETS
		public RuleCall getCLOSE_SQARE_BRACKETSParserRuleCall_3() { return cCLOSE_SQARE_BRACKETSParserRuleCall_3; }
	}
	public class StreamFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.StreamFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFoFunctionOperationParserRuleCall_1_0 = (RuleCall)cFoAssignment_1.eContents().get(0);
		
		//StreamFunction:
		//	'#' fo=FunctionOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' fo=FunctionOperation
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//fo=FunctionOperation
		public Assignment getFoAssignment_1() { return cFoAssignment_1; }
		
		//FunctionOperation
		public RuleCall getFoFunctionOperationParserRuleCall_1_0() { return cFoFunctionOperationParserRuleCall_1_0; }
	}
	public class WinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Win");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWINDOWParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFunc_opAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFunc_opFunctionOperationParserRuleCall_3_0 = (RuleCall)cFunc_opAssignment_3.eContents().get(0);
		
		//Win:
		//	'#' WINDOW '.' func_op=FunctionOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//'#' WINDOW '.' func_op=FunctionOperation
		public Group getGroup() { return cGroup; }
		
		//'#'
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//WINDOW
		public RuleCall getWINDOWParserRuleCall_1() { return cWINDOWParserRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//func_op=FunctionOperation
		public Assignment getFunc_opAssignment_3() { return cFunc_opAssignment_3; }
		
		//FunctionOperation
		public RuleCall getFunc_opFunctionOperationParserRuleCall_3_0() { return cFunc_opFunctionOperationParserRuleCall_3_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Expression");
		private final RuleCall cMathOperationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	MathOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//MathOperation
		public RuleCall getMathOperationParserRuleCall() { return cMathOperationParserRuleCall; }
	}
	public class FunctionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FunctionOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cFuncNamespaceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFuncNamespaceFunctionNamespaceParserRuleCall_1_0_0 = (RuleCall)cFuncNamespaceAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cFuncIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFuncIdFunctionIdParserRuleCall_2_0 = (RuleCall)cFuncIdAssignment_2.eContents().get(0);
		private final RuleCall cOPEN_PARParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cAttrListAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttrListAttributeListParserRuleCall_4_0 = (RuleCall)cAttrListAssignment_4.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//FunctionOperation:
		//	{FunctionOperation} (funcNamespace=FunctionNamespace ':')? funcId=FunctionId OPEN_PAR attrList=AttributeList?
		//	CLOSE_PAR;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionOperation} (funcNamespace=FunctionNamespace ':')? funcId=FunctionId OPEN_PAR attrList=AttributeList? CLOSE_PAR
		public Group getGroup() { return cGroup; }
		
		//{FunctionOperation}
		public Action getFunctionOperationAction_0() { return cFunctionOperationAction_0; }
		
		//(funcNamespace=FunctionNamespace ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//funcNamespace=FunctionNamespace
		public Assignment getFuncNamespaceAssignment_1_0() { return cFuncNamespaceAssignment_1_0; }
		
		//FunctionNamespace
		public RuleCall getFuncNamespaceFunctionNamespaceParserRuleCall_1_0_0() { return cFuncNamespaceFunctionNamespaceParserRuleCall_1_0_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//funcId=FunctionId
		public Assignment getFuncIdAssignment_2() { return cFuncIdAssignment_2; }
		
		//FunctionId
		public RuleCall getFuncIdFunctionIdParserRuleCall_2_0() { return cFuncIdFunctionIdParserRuleCall_2_0; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_3() { return cOPEN_PARParserRuleCall_3; }
		
		//attrList=AttributeList?
		public Assignment getAttrListAssignment_4() { return cAttrListAssignment_4; }
		
		//AttributeList
		public RuleCall getAttrListAttributeListParserRuleCall_4_0() { return cAttrListAttributeListParserRuleCall_4_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_5() { return cCLOSE_PARParserRuleCall_5; }
	}
	public class FunctionNamespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FunctionNamespace");
		private final Assignment cNaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNaIdNewParserRuleCall_0 = (RuleCall)cNaAssignment.eContents().get(0);
		
		//FunctionNamespace:
		//	na=IdNew;
		@Override public ParserRule getRule() { return rule; }
		
		//na=IdNew
		public Assignment getNaAssignment() { return cNaAssignment; }
		
		//IdNew
		public RuleCall getNaIdNewParserRuleCall_0() { return cNaIdNewParserRuleCall_0; }
	}
	public class FunctionIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FunctionId");
		private final Assignment cNaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNaNameParserRuleCall_0 = (RuleCall)cNaAssignment.eContents().get(0);
		
		//FunctionId:
		//	na=Name;
		@Override public ParserRule getRule() { return rule; }
		
		//na=Name
		public Assignment getNaAssignment() { return cNaAssignment; }
		
		//Name
		public RuleCall getNaNameParserRuleCall_0() { return cNaNameParserRuleCall_0; }
	}
	public class AttributeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AttributeList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttributeListAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cAttrAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cAttrAttributeParserRuleCall_0_1_0_0 = (RuleCall)cAttrAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cGroup_0_1.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cAttrAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cAttrAttributeParserRuleCall_0_1_1_1_0 = (RuleCall)cAttrAssignment_0_1_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttributeListAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//AttributeList:
		//	{AttributeList} (attr+=Attribute (',' attr+=Attribute)*) | {AttributeList} '*';
		@Override public ParserRule getRule() { return rule; }
		
		//{AttributeList} (attr+=Attribute (',' attr+=Attribute)*) | {AttributeList} '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AttributeList} (attr+=Attribute (',' attr+=Attribute)*)
		public Group getGroup_0() { return cGroup_0; }
		
		//{AttributeList}
		public Action getAttributeListAction_0_0() { return cAttributeListAction_0_0; }
		
		//attr+=Attribute (',' attr+=Attribute)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//attr+=Attribute
		public Assignment getAttrAssignment_0_1_0() { return cAttrAssignment_0_1_0; }
		
		//Attribute
		public RuleCall getAttrAttributeParserRuleCall_0_1_0_0() { return cAttrAttributeParserRuleCall_0_1_0_0; }
		
		//(',' attr+=Attribute)*
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//','
		public Keyword getCommaKeyword_0_1_1_0() { return cCommaKeyword_0_1_1_0; }
		
		//attr+=Attribute
		public Assignment getAttrAssignment_0_1_1_1() { return cAttrAssignment_0_1_1_1; }
		
		//Attribute
		public RuleCall getAttrAttributeParserRuleCall_0_1_1_1_0() { return cAttrAttributeParserRuleCall_0_1_1_1_0; }
		
		//{AttributeList} '*'
		public Group getGroup_1() { return cGroup_1; }
		
		//{AttributeList}
		public Action getAttributeListAction_1_0() { return cAttributeListAction_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Attribute");
		private final Assignment cMathOpAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMathOpMathOperationParserRuleCall_0 = (RuleCall)cMathOpAssignment.eContents().get(0);
		
		//Attribute:
		//	mathOp=MathOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//mathOp=MathOperation
		public Assignment getMathOpAssignment() { return cMathOpAssignment; }
		
		//MathOperation
		public RuleCall getMathOpMathOperationParserRuleCall_0() { return cMathOpMathOperationParserRuleCall_0; }
	}
	public class GroupByQuerySelectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.GroupByQuerySelection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGroupByQuerySelectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cSELECTParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cOut_attAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cOut_attOutputAttributeParserRuleCall_1_1_1_0_0 = (RuleCall)cOut_attAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cOut_attAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cOut_attOutputAttributeParserRuleCall_1_1_1_1_1_0 = (RuleCall)cOut_attAssignment_1_1_1_1_1.eContents().get(0);
		private final Assignment cGrp_byAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGrp_byGroupByParserRuleCall_2_0 = (RuleCall)cGrp_byAssignment_2.eContents().get(0);
		
		//GroupByQuerySelection:
		//	{GroupByQuerySelection} (SELECT ('*' | out_att+=OutputAttribute (',' out_att+=OutputAttribute)*)) grp_by=GroupBy?;
		@Override public ParserRule getRule() { return rule; }
		
		//{GroupByQuerySelection} (SELECT ('*' | out_att+=OutputAttribute (',' out_att+=OutputAttribute)*)) grp_by=GroupBy?
		public Group getGroup() { return cGroup; }
		
		//{GroupByQuerySelection}
		public Action getGroupByQuerySelectionAction_0() { return cGroupByQuerySelectionAction_0; }
		
		//SELECT ('*' | out_att+=OutputAttribute (',' out_att+=OutputAttribute)*)
		public Group getGroup_1() { return cGroup_1; }
		
		//SELECT
		public RuleCall getSELECTParserRuleCall_1_0() { return cSELECTParserRuleCall_1_0; }
		
		//'*' | out_att+=OutputAttribute (',' out_att+=OutputAttribute)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1_0() { return cAsteriskKeyword_1_1_0; }
		
		//out_att+=OutputAttribute (',' out_att+=OutputAttribute)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//out_att+=OutputAttribute
		public Assignment getOut_attAssignment_1_1_1_0() { return cOut_attAssignment_1_1_1_0; }
		
		//OutputAttribute
		public RuleCall getOut_attOutputAttributeParserRuleCall_1_1_1_0_0() { return cOut_attOutputAttributeParserRuleCall_1_1_1_0_0; }
		
		//(',' out_att+=OutputAttribute)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }
		
		//out_att+=OutputAttribute
		public Assignment getOut_attAssignment_1_1_1_1_1() { return cOut_attAssignment_1_1_1_1_1; }
		
		//OutputAttribute
		public RuleCall getOut_attOutputAttributeParserRuleCall_1_1_1_1_1_0() { return cOut_attOutputAttributeParserRuleCall_1_1_1_1_1_0; }
		
		//grp_by=GroupBy?
		public Assignment getGrp_byAssignment_2() { return cGrp_byAssignment_2; }
		
		//GroupBy
		public RuleCall getGrp_byGroupByParserRuleCall_2_0() { return cGrp_byGroupByParserRuleCall_2_0; }
	}
	public class QuerySectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.QuerySection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cQuerySectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cGrpByQuerySelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGrpByQuerySelGroupByQuerySelectionParserRuleCall_1_0 = (RuleCall)cGrpByQuerySelAssignment_1.eContents().get(0);
		private final Assignment cHavingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cHavingHavingExprParserRuleCall_2_0 = (RuleCall)cHavingAssignment_2.eContents().get(0);
		
		//QuerySection:
		//	{QuerySection} grpByQuerySel=GroupByQuerySelection having=HavingExpr?;
		@Override public ParserRule getRule() { return rule; }
		
		//{QuerySection} grpByQuerySel=GroupByQuerySelection having=HavingExpr?
		public Group getGroup() { return cGroup; }
		
		//{QuerySection}
		public Action getQuerySectionAction_0() { return cQuerySectionAction_0; }
		
		//grpByQuerySel=GroupByQuerySelection
		public Assignment getGrpByQuerySelAssignment_1() { return cGrpByQuerySelAssignment_1; }
		
		//GroupByQuerySelection
		public RuleCall getGrpByQuerySelGroupByQuerySelectionParserRuleCall_1_0() { return cGrpByQuerySelGroupByQuerySelectionParserRuleCall_1_0; }
		
		//having=HavingExpr?
		public Assignment getHavingAssignment_2() { return cHavingAssignment_2; }
		
		//HavingExpr
		public RuleCall getHavingHavingExprParserRuleCall_2_0() { return cHavingHavingExprParserRuleCall_2_0; }
	}
	public class OutputAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OutputAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOutputAttributeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cOutAttrAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOutAttrOutAttrParserRuleCall_0_1_0 = (RuleCall)cOutAttrAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutputAttributeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAttr_refAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAttr_refAttributeReferenceParserRuleCall_1_1_0 = (RuleCall)cAttr_refAssignment_1_1.eContents().get(0);
		
		//OutputAttribute:
		//	{OutputAttribute} outAttr=OutAttr | {OutputAttribute} attr_ref=AttributeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//{OutputAttribute} outAttr=OutAttr | {OutputAttribute} attr_ref=AttributeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OutputAttribute} outAttr=OutAttr
		public Group getGroup_0() { return cGroup_0; }
		
		//{OutputAttribute}
		public Action getOutputAttributeAction_0_0() { return cOutputAttributeAction_0_0; }
		
		//outAttr=OutAttr
		public Assignment getOutAttrAssignment_0_1() { return cOutAttrAssignment_0_1; }
		
		//OutAttr
		public RuleCall getOutAttrOutAttrParserRuleCall_0_1_0() { return cOutAttrOutAttrParserRuleCall_0_1_0; }
		
		//{OutputAttribute} attr_ref=AttributeReference
		public Group getGroup_1() { return cGroup_1; }
		
		//{OutputAttribute}
		public Action getOutputAttributeAction_1_0() { return cOutputAttributeAction_1_0; }
		
		//attr_ref=AttributeReference
		public Assignment getAttr_refAssignment_1_1() { return cAttr_refAssignment_1_1; }
		
		//AttributeReference
		public RuleCall getAttr_refAttributeReferenceParserRuleCall_1_1_0() { return cAttr_refAttributeReferenceParserRuleCall_1_1_0; }
	}
	public class OutAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OutAttr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAttrAttributeParserRuleCall_0_0 = (RuleCall)cAttrAssignment_0.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAASParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIdNewParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//OutAttr:
		//	attr=Attribute a=AS name=IdNew;
		@Override public ParserRule getRule() { return rule; }
		
		//attr=Attribute a=AS name=IdNew
		public Group getGroup() { return cGroup; }
		
		//attr=Attribute
		public Assignment getAttrAssignment_0() { return cAttrAssignment_0; }
		
		//Attribute
		public RuleCall getAttrAttributeParserRuleCall_0_0() { return cAttrAttributeParserRuleCall_0_0; }
		
		//a=AS
		public Assignment getAAssignment_1() { return cAAssignment_1; }
		
		//AS
		public RuleCall getAASParserRuleCall_1_0() { return cAASParserRuleCall_1_0; }
		
		//name=IdNew
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//IdNew
		public RuleCall getNameIdNewParserRuleCall_2_0() { return cNameIdNewParserRuleCall_2_0; }
	}
	public class GroupByElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.GroupBy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cGROUPParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cBYParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cAttr_refAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAttr_refAttributeReferenceParserRuleCall_2_0 = (RuleCall)cAttr_refAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAttr_refAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAttr_refAttributeReferenceParserRuleCall_3_1_0 = (RuleCall)cAttr_refAssignment_3_1.eContents().get(0);
		
		//GroupBy:
		//	GROUP BY attr_ref+=AttributeReference (',' attr_ref+=AttributeReference)*;
		@Override public ParserRule getRule() { return rule; }
		
		//GROUP BY attr_ref+=AttributeReference (',' attr_ref+=AttributeReference)*
		public Group getGroup() { return cGroup; }
		
		//GROUP
		public RuleCall getGROUPParserRuleCall_0() { return cGROUPParserRuleCall_0; }
		
		//BY
		public RuleCall getBYParserRuleCall_1() { return cBYParserRuleCall_1; }
		
		//attr_ref+=AttributeReference
		public Assignment getAttr_refAssignment_2() { return cAttr_refAssignment_2; }
		
		//AttributeReference
		public RuleCall getAttr_refAttributeReferenceParserRuleCall_2_0() { return cAttr_refAttributeReferenceParserRuleCall_2_0; }
		
		//(',' attr_ref+=AttributeReference)*
		public Group getGroup_3() { return cGroup_3; }
		
		//','
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//attr_ref+=AttributeReference
		public Assignment getAttr_refAssignment_3_1() { return cAttr_refAssignment_3_1; }
		
		//AttributeReference
		public RuleCall getAttr_refAttributeReferenceParserRuleCall_3_1_0() { return cAttr_refAttributeReferenceParserRuleCall_3_1_0; }
	}
	public class HavingExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.HavingExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHAVINGParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExpressionParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//HavingExpr:
		//	HAVING expr=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//HAVING expr=Expression
		public Group getGroup() { return cGroup; }
		
		//HAVING
		public RuleCall getHAVINGParserRuleCall_0() { return cHAVINGParserRuleCall_0; }
		
		//expr=Expression
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_0() { return cExprExpressionParserRuleCall_1_0; }
	}
	public class MathOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MathOperation");
		private final Assignment cMloAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMloMathLogicalOperationParserRuleCall_0 = (RuleCall)cMloAssignment.eContents().get(0);
		
		//MathOperation:
		//	mlo=MathLogicalOperation;
		@Override public ParserRule getRule() { return rule; }
		
		//mlo=MathLogicalOperation
		public Assignment getMloAssignment() { return cMloAssignment; }
		
		//MathLogicalOperation
		public RuleCall getMloMathLogicalOperationParserRuleCall_0() { return cMloMathLogicalOperationParserRuleCall_0; }
	}
	public class MathLogicalOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MathLogicalOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMathInOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMathLogicalOperationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cAndAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cAndANDParserRuleCall_1_0_1_0_0 = (RuleCall)cAndAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cOrAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final RuleCall cOrORParserRuleCall_1_0_1_1_0 = (RuleCall)cOrAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMathInOperationParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//MathLogicalOperation MathOperation:
		//	MathInOperation => ({MathLogicalOperation.left=current} (and=AND | or=OR) right=MathInOperation)* //and,or errors
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MathInOperation => ({MathLogicalOperation.left=current} (and=AND | or=OR) right=MathInOperation)*
		public Group getGroup() { return cGroup; }
		
		//MathInOperation
		public RuleCall getMathInOperationParserRuleCall_0() { return cMathInOperationParserRuleCall_0; }
		
		//=> ({MathLogicalOperation.left=current} (and=AND | or=OR) right=MathInOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MathLogicalOperation.left=current} (and=AND | or=OR) right=MathInOperation
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MathLogicalOperation.left=current}
		public Action getMathLogicalOperationLeftAction_1_0_0() { return cMathLogicalOperationLeftAction_1_0_0; }
		
		//and=AND | or=OR
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//and=AND
		public Assignment getAndAssignment_1_0_1_0() { return cAndAssignment_1_0_1_0; }
		
		//AND
		public RuleCall getAndANDParserRuleCall_1_0_1_0_0() { return cAndANDParserRuleCall_1_0_1_0_0; }
		
		//or=OR
		public Assignment getOrAssignment_1_0_1_1() { return cOrAssignment_1_0_1_1; }
		
		//OR
		public RuleCall getOrORParserRuleCall_1_0_1_1_0() { return cOrORParserRuleCall_1_0_1_1_0; }
		
		//right=MathInOperation
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//MathInOperation
		public RuleCall getRightMathInOperationParserRuleCall_1_0_2_0() { return cRightMathInOperationParserRuleCall_1_0_2_0; }
	}
	public class MathInOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MathInOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMathGtLtOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMathInOperationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cInAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cInINParserRuleCall_1_0_1_0 = (RuleCall)cInAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightNameParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//MathInOperation MathOperation:
		//	MathGtLtOperation => ({MathInOperation.left=current} in=IN right=Name)* //in error
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MathGtLtOperation => ({MathInOperation.left=current} in=IN right=Name)*
		public Group getGroup() { return cGroup; }
		
		//MathGtLtOperation
		public RuleCall getMathGtLtOperationParserRuleCall_0() { return cMathGtLtOperationParserRuleCall_0; }
		
		//=> ({MathInOperation.left=current} in=IN right=Name)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MathInOperation.left=current} in=IN right=Name
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MathInOperation.left=current}
		public Action getMathInOperationLeftAction_1_0_0() { return cMathInOperationLeftAction_1_0_0; }
		
		//in=IN
		public Assignment getInAssignment_1_0_1() { return cInAssignment_1_0_1; }
		
		//IN
		public RuleCall getInINParserRuleCall_1_0_1_0() { return cInINParserRuleCall_1_0_1_0; }
		
		//right=Name
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//Name
		public RuleCall getRightNameParserRuleCall_1_0_2_0() { return cRightNameParserRuleCall_1_0_2_0; }
	}
	public class MathGtLtOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MathGtLtOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMathEqualOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMathGtLtOperationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cSymbolAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final Alternatives cSymbolAlternatives_1_0_1_0 = (Alternatives)cSymbolAssignment_1_0_1.eContents().get(0);
		private final Keyword cSymbolGreaterThanSignEqualsSignKeyword_1_0_1_0_0 = (Keyword)cSymbolAlternatives_1_0_1_0.eContents().get(0);
		private final Keyword cSymbolLessThanSignEqualsSignKeyword_1_0_1_0_1 = (Keyword)cSymbolAlternatives_1_0_1_0.eContents().get(1);
		private final Keyword cSymbolGreaterThanSignKeyword_1_0_1_0_2 = (Keyword)cSymbolAlternatives_1_0_1_0.eContents().get(2);
		private final Keyword cSymbolLessThanSignKeyword_1_0_1_0_3 = (Keyword)cSymbolAlternatives_1_0_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMathGtLtOperationParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//MathGtLtOperation MathOperation:
		//	MathEqualOperation => ({MathGtLtOperation.left=current} symbol=('>=' | '<=' | '>' | '<') right=MathGtLtOperation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MathEqualOperation => ({MathGtLtOperation.left=current} symbol=('>=' | '<=' | '>' | '<') right=MathGtLtOperation)*
		public Group getGroup() { return cGroup; }
		
		//MathEqualOperation
		public RuleCall getMathEqualOperationParserRuleCall_0() { return cMathEqualOperationParserRuleCall_0; }
		
		//=> ({MathGtLtOperation.left=current} symbol=('>=' | '<=' | '>' | '<') right=MathGtLtOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MathGtLtOperation.left=current} symbol=('>=' | '<=' | '>' | '<') right=MathGtLtOperation
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MathGtLtOperation.left=current}
		public Action getMathGtLtOperationLeftAction_1_0_0() { return cMathGtLtOperationLeftAction_1_0_0; }
		
		//symbol=('>=' | '<=' | '>' | '<')
		public Assignment getSymbolAssignment_1_0_1() { return cSymbolAssignment_1_0_1; }
		
		//('>=' | '<=' | '>' | '<')
		public Alternatives getSymbolAlternatives_1_0_1_0() { return cSymbolAlternatives_1_0_1_0; }
		
		//'>='
		public Keyword getSymbolGreaterThanSignEqualsSignKeyword_1_0_1_0_0() { return cSymbolGreaterThanSignEqualsSignKeyword_1_0_1_0_0; }
		
		//'<='
		public Keyword getSymbolLessThanSignEqualsSignKeyword_1_0_1_0_1() { return cSymbolLessThanSignEqualsSignKeyword_1_0_1_0_1; }
		
		//'>'
		public Keyword getSymbolGreaterThanSignKeyword_1_0_1_0_2() { return cSymbolGreaterThanSignKeyword_1_0_1_0_2; }
		
		//'<'
		public Keyword getSymbolLessThanSignKeyword_1_0_1_0_3() { return cSymbolLessThanSignKeyword_1_0_1_0_3; }
		
		///*(gt_eq='>='|lt_eq='<='|gt='>'|lt='<')*/ right=MathGtLtOperation
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//MathGtLtOperation
		public RuleCall getRightMathGtLtOperationParserRuleCall_1_0_2_0() { return cRightMathGtLtOperationParserRuleCall_1_0_2_0; }
	}
	public class MathEqualOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MathEqualOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMathAddsubOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMathEqualOperationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cEqAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cEqEqualsSignEqualsSignKeyword_1_0_1_0_0 = (Keyword)cEqAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cNot_eqAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cNot_eqExclamationMarkEqualsSignKeyword_1_0_1_1_0 = (Keyword)cNot_eqAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMathAddsubOperationParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//MathEqualOperation MathOperation:
		//	MathAddsubOperation => ({MathEqualOperation.left=current} (eq='==' | not_eq='!=') right=MathAddsubOperation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MathAddsubOperation => ({MathEqualOperation.left=current} (eq='==' | not_eq='!=') right=MathAddsubOperation)*
		public Group getGroup() { return cGroup; }
		
		//MathAddsubOperation
		public RuleCall getMathAddsubOperationParserRuleCall_0() { return cMathAddsubOperationParserRuleCall_0; }
		
		//=> ({MathEqualOperation.left=current} (eq='==' | not_eq='!=') right=MathAddsubOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MathEqualOperation.left=current} (eq='==' | not_eq='!=') right=MathAddsubOperation
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MathEqualOperation.left=current}
		public Action getMathEqualOperationLeftAction_1_0_0() { return cMathEqualOperationLeftAction_1_0_0; }
		
		//eq='==' | not_eq='!='
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//eq='=='
		public Assignment getEqAssignment_1_0_1_0() { return cEqAssignment_1_0_1_0; }
		
		//'=='
		public Keyword getEqEqualsSignEqualsSignKeyword_1_0_1_0_0() { return cEqEqualsSignEqualsSignKeyword_1_0_1_0_0; }
		
		//not_eq='!='
		public Assignment getNot_eqAssignment_1_0_1_1() { return cNot_eqAssignment_1_0_1_1; }
		
		//'!='
		public Keyword getNot_eqExclamationMarkEqualsSignKeyword_1_0_1_1_0() { return cNot_eqExclamationMarkEqualsSignKeyword_1_0_1_1_0; }
		
		//right=MathAddsubOperation
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//MathAddsubOperation
		public RuleCall getRightMathAddsubOperationParserRuleCall_1_0_2_0() { return cRightMathAddsubOperationParserRuleCall_1_0_2_0; }
	}
	public class MathAddsubOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MathAddsubOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMathDivmulOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMathAddsubOperationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cAddAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cAddPlusSignKeyword_1_0_1_0_0 = (Keyword)cAddAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cSubstractAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cSubstractHyphenMinusKeyword_1_0_1_1_0 = (Keyword)cSubstractAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMathDivmulOperationParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//MathAddsubOperation MathOperation:
		//	MathDivmulOperation => ({MathAddsubOperation.left=current} (add='+' | substract='-') right=MathDivmulOperation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MathDivmulOperation => ({MathAddsubOperation.left=current} (add='+' | substract='-') right=MathDivmulOperation)*
		public Group getGroup() { return cGroup; }
		
		//MathDivmulOperation
		public RuleCall getMathDivmulOperationParserRuleCall_0() { return cMathDivmulOperationParserRuleCall_0; }
		
		//=> ({MathAddsubOperation.left=current} (add='+' | substract='-') right=MathDivmulOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MathAddsubOperation.left=current} (add='+' | substract='-') right=MathDivmulOperation
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MathAddsubOperation.left=current}
		public Action getMathAddsubOperationLeftAction_1_0_0() { return cMathAddsubOperationLeftAction_1_0_0; }
		
		//add='+' | substract='-'
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//add='+'
		public Assignment getAddAssignment_1_0_1_0() { return cAddAssignment_1_0_1_0; }
		
		//'+'
		public Keyword getAddPlusSignKeyword_1_0_1_0_0() { return cAddPlusSignKeyword_1_0_1_0_0; }
		
		//substract='-'
		public Assignment getSubstractAssignment_1_0_1_1() { return cSubstractAssignment_1_0_1_1; }
		
		//'-'
		public Keyword getSubstractHyphenMinusKeyword_1_0_1_1_0() { return cSubstractHyphenMinusKeyword_1_0_1_1_0; }
		
		//right=MathDivmulOperation
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//MathDivmulOperation
		public RuleCall getRightMathDivmulOperationParserRuleCall_1_0_2_0() { return cRightMathDivmulOperationParserRuleCall_1_0_2_0; }
	}
	public class MathDivmulOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MathDivmulOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMathOtherOperationsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cMathDivmulOperationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cMultiplyAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final Keyword cMultiplyAsteriskKeyword_1_0_1_0_0 = (Keyword)cMultiplyAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cDevideAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final Keyword cDevideSolidusKeyword_1_0_1_1_0 = (Keyword)cDevideAssignment_1_0_1_1.eContents().get(0);
		private final Assignment cModAssignment_1_0_1_2 = (Assignment)cAlternatives_1_0_1.eContents().get(2);
		private final Keyword cModPercentSignKeyword_1_0_1_2_0 = (Keyword)cModAssignment_1_0_1_2.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMathOtherOperationsParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//MathDivmulOperation MathOperation:
		//	MathOtherOperations => ({MathDivmulOperation.left=current} (multiply='*' | devide='/' | mod='%')
		//	right=MathOtherOperations)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MathOtherOperations => ({MathDivmulOperation.left=current} (multiply='*' | devide='/' | mod='%')
		//right=MathOtherOperations)*
		public Group getGroup() { return cGroup; }
		
		//MathOtherOperations
		public RuleCall getMathOtherOperationsParserRuleCall_0() { return cMathOtherOperationsParserRuleCall_0; }
		
		//=> ({MathDivmulOperation.left=current} (multiply='*' | devide='/' | mod='%') right=MathOtherOperations)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MathDivmulOperation.left=current} (multiply='*' | devide='/' | mod='%') right=MathOtherOperations
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{MathDivmulOperation.left=current}
		public Action getMathDivmulOperationLeftAction_1_0_0() { return cMathDivmulOperationLeftAction_1_0_0; }
		
		//multiply='*' | devide='/' | mod='%'
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//multiply='*'
		public Assignment getMultiplyAssignment_1_0_1_0() { return cMultiplyAssignment_1_0_1_0; }
		
		//'*'
		public Keyword getMultiplyAsteriskKeyword_1_0_1_0_0() { return cMultiplyAsteriskKeyword_1_0_1_0_0; }
		
		//devide='/'
		public Assignment getDevideAssignment_1_0_1_1() { return cDevideAssignment_1_0_1_1; }
		
		//'/'
		public Keyword getDevideSolidusKeyword_1_0_1_1_0() { return cDevideSolidusKeyword_1_0_1_1_0; }
		
		//mod='%'
		public Assignment getModAssignment_1_0_1_2() { return cModAssignment_1_0_1_2; }
		
		//'%'
		public Keyword getModPercentSignKeyword_1_0_1_2_0() { return cModPercentSignKeyword_1_0_1_2_0; }
		
		//right=MathOtherOperations
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//MathOtherOperations
		public RuleCall getRightMathOtherOperationsParserRuleCall_1_0_2_0() { return cRightMathOtherOperationsParserRuleCall_1_0_2_0; }
	}
	public class MathOtherOperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MathOtherOperations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cNotOperationAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final Assignment cNotAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cNotNOTParserRuleCall_0_0_1_0 = (RuleCall)cNotAssignment_0_0_1.eContents().get(0);
		private final Assignment cOpAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cOpMathOperationParserRuleCall_0_0_2_0 = (RuleCall)cOpAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOPEN_PARParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpMathOperationParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final RuleCall cCLOSE_PARParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cNullCheckParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Assignment cMathOtherOperations1Assignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cMathOtherOperations1MathOtherOperations1ParserRuleCall_3_0 = (RuleCall)cMathOtherOperations1Assignment_3.eContents().get(0);
		
		//MathOtherOperations MathOperation:
		//	=> ({NotOperation} not=NOT op=MathOperation) | OPEN_PAR op=MathOperation CLOSE_PAR
		//	| => NullCheck
		//	| mathOtherOperations1=MathOtherOperations1;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ({NotOperation} not=NOT op=MathOperation) | OPEN_PAR op=MathOperation CLOSE_PAR | => NullCheck |
		//mathOtherOperations1=MathOtherOperations1
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ({NotOperation} not=NOT op=MathOperation)
		public Group getGroup_0() { return cGroup_0; }
		
		//{NotOperation} not=NOT op=MathOperation
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{NotOperation}
		public Action getNotOperationAction_0_0_0() { return cNotOperationAction_0_0_0; }
		
		//not=NOT
		public Assignment getNotAssignment_0_0_1() { return cNotAssignment_0_0_1; }
		
		//NOT
		public RuleCall getNotNOTParserRuleCall_0_0_1_0() { return cNotNOTParserRuleCall_0_0_1_0; }
		
		//op=MathOperation
		public Assignment getOpAssignment_0_0_2() { return cOpAssignment_0_0_2; }
		
		//MathOperation
		public RuleCall getOpMathOperationParserRuleCall_0_0_2_0() { return cOpMathOperationParserRuleCall_0_0_2_0; }
		
		//OPEN_PAR op=MathOperation CLOSE_PAR
		public Group getGroup_1() { return cGroup_1; }
		
		//OPEN_PAR
		public RuleCall getOPEN_PARParserRuleCall_1_0() { return cOPEN_PARParserRuleCall_1_0; }
		
		//op=MathOperation
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//MathOperation
		public RuleCall getOpMathOperationParserRuleCall_1_1_0() { return cOpMathOperationParserRuleCall_1_1_0; }
		
		//CLOSE_PAR
		public RuleCall getCLOSE_PARParserRuleCall_1_2() { return cCLOSE_PARParserRuleCall_1_2; }
		
		//=> NullCheck
		public RuleCall getNullCheckParserRuleCall_2() { return cNullCheckParserRuleCall_2; }
		
		//mathOtherOperations1=MathOtherOperations1
		public Assignment getMathOtherOperations1Assignment_3() { return cMathOtherOperations1Assignment_3; }
		
		//MathOtherOperations1
		public RuleCall getMathOtherOperations1MathOtherOperations1ParserRuleCall_3_0() { return cMathOtherOperations1MathOtherOperations1ParserRuleCall_3_0; }
	}
	public class NullCheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.NullCheck");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cStream_refAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cStream_refStreamReferenceParserRuleCall_0_0_0 = (RuleCall)cStream_refAssignment_0_0.eContents().get(0);
		private final Assignment cAttr_refAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cAttr_refAttributeReferenceParserRuleCall_0_1_0 = (RuleCall)cAttr_refAssignment_0_1.eContents().get(0);
		private final Assignment cFoAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cFoFunctionOperationParserRuleCall_0_2_0 = (RuleCall)cFoAssignment_0_2.eContents().get(0);
		private final RuleCall cISParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNULLParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//NullCheck:
		//	(=> stream_ref=StreamReference | => attr_ref=AttributeReference | => fo=FunctionOperation) IS NULL;
		@Override public ParserRule getRule() { return rule; }
		
		//(=> stream_ref=StreamReference | => attr_ref=AttributeReference | => fo=FunctionOperation) IS NULL
		public Group getGroup() { return cGroup; }
		
		//=> stream_ref=StreamReference | => attr_ref=AttributeReference | => fo=FunctionOperation
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//=> stream_ref=StreamReference
		public Assignment getStream_refAssignment_0_0() { return cStream_refAssignment_0_0; }
		
		//StreamReference
		public RuleCall getStream_refStreamReferenceParserRuleCall_0_0_0() { return cStream_refStreamReferenceParserRuleCall_0_0_0; }
		
		//=> attr_ref=AttributeReference
		public Assignment getAttr_refAssignment_0_1() { return cAttr_refAssignment_0_1; }
		
		//AttributeReference
		public RuleCall getAttr_refAttributeReferenceParserRuleCall_0_1_0() { return cAttr_refAttributeReferenceParserRuleCall_0_1_0; }
		
		//=> fo=FunctionOperation
		public Assignment getFoAssignment_0_2() { return cFoAssignment_0_2; }
		
		//FunctionOperation
		public RuleCall getFoFunctionOperationParserRuleCall_0_2_0() { return cFoFunctionOperationParserRuleCall_0_2_0; }
		
		//IS
		public RuleCall getISParserRuleCall_1() { return cISParserRuleCall_1; }
		
		//NULL
		public RuleCall getNULLParserRuleCall_2() { return cNULLParserRuleCall_2; }
	}
	public class StreamReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.StreamReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHashAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cHashNumberSignKeyword_0_0 = (Keyword)cHashAssignment_0.eContents().get(0);
		private final Assignment cNaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNaNameParserRuleCall_1_0 = (RuleCall)cNaAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cOPEN_SQARE_BRACKETSParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cAatr_indexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cAatr_indexAttributeIndexParserRuleCall_2_1_0 = (RuleCall)cAatr_indexAssignment_2_1.eContents().get(0);
		private final RuleCall cCLOSE_SQARE_BRACKETSParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		
		//StreamReference:
		//	hash='#'? na=Name (OPEN_SQARE_BRACKETS aatr_index=AttributeIndex CLOSE_SQARE_BRACKETS)?;
		@Override public ParserRule getRule() { return rule; }
		
		//hash='#'? na=Name (OPEN_SQARE_BRACKETS aatr_index=AttributeIndex CLOSE_SQARE_BRACKETS)?
		public Group getGroup() { return cGroup; }
		
		//hash='#'?
		public Assignment getHashAssignment_0() { return cHashAssignment_0; }
		
		//'#'
		public Keyword getHashNumberSignKeyword_0_0() { return cHashNumberSignKeyword_0_0; }
		
		//na=Name
		public Assignment getNaAssignment_1() { return cNaAssignment_1; }
		
		//Name
		public RuleCall getNaNameParserRuleCall_1_0() { return cNaNameParserRuleCall_1_0; }
		
		//(OPEN_SQARE_BRACKETS aatr_index=AttributeIndex CLOSE_SQARE_BRACKETS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//OPEN_SQARE_BRACKETS
		public RuleCall getOPEN_SQARE_BRACKETSParserRuleCall_2_0() { return cOPEN_SQARE_BRACKETSParserRuleCall_2_0; }
		
		//aatr_index=AttributeIndex
		public Assignment getAatr_indexAssignment_2_1() { return cAatr_indexAssignment_2_1; }
		
		//AttributeIndex
		public RuleCall getAatr_indexAttributeIndexParserRuleCall_2_1_0() { return cAatr_indexAttributeIndexParserRuleCall_2_1_0; }
		
		//CLOSE_SQARE_BRACKETS
		public RuleCall getCLOSE_SQARE_BRACKETSParserRuleCall_2_2() { return cCLOSE_SQARE_BRACKETSParserRuleCall_2_2; }
	}
	public class MathOtherOperations1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MathOtherOperations1");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConst_valAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConst_valConstantValueParserRuleCall_0_0 = (RuleCall)cConst_valAssignment_0.eContents().get(0);
		private final Assignment cFoAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFoFunctionOperationParserRuleCall_1_0 = (RuleCall)cFoAssignment_1.eContents().get(0);
		private final Assignment cAttrRefAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cAttrRefAttributeReferenceParserRuleCall_2_0 = (RuleCall)cAttrRefAssignment_2.eContents().get(0);
		
		//MathOtherOperations1:
		//	const_val=ConstantValue
		//	| fo=FunctionOperation
		//	| attrRef=AttributeReference;
		@Override public ParserRule getRule() { return rule; }
		
		//const_val=ConstantValue | fo=FunctionOperation | attrRef=AttributeReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//const_val=ConstantValue
		public Assignment getConst_valAssignment_0() { return cConst_valAssignment_0; }
		
		//ConstantValue
		public RuleCall getConst_valConstantValueParserRuleCall_0_0() { return cConst_valConstantValueParserRuleCall_0_0; }
		
		//fo=FunctionOperation
		public Assignment getFoAssignment_1() { return cFoAssignment_1; }
		
		//FunctionOperation
		public RuleCall getFoFunctionOperationParserRuleCall_1_0() { return cFoFunctionOperationParserRuleCall_1_0; }
		
		//attrRef=AttributeReference
		public Assignment getAttrRefAssignment_2() { return cAttrRefAssignment_2; }
		
		//AttributeReference
		public RuleCall getAttrRefAttributeReferenceParserRuleCall_2_0() { return cAttrRefAttributeReferenceParserRuleCall_2_0; }
	}
	public class AttributeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AttributeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttributeReferenceAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cHash1Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cHash1NumberSignKeyword_0_1_0 = (Keyword)cHash1Assignment_0_1.eContents().get(0);
		private final Assignment cName1Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cName1SourceOrEventReferenceParserRuleCall_0_2_0 = (RuleCall)cName1Assignment_0_2.eContents().get(0);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final RuleCall cOPEN_SQARE_BRACKETSParserRuleCall_0_3_0 = (RuleCall)cGroup_0_3.eContents().get(0);
		private final Assignment cAttribute_index1Assignment_0_3_1 = (Assignment)cGroup_0_3.eContents().get(1);
		private final RuleCall cAttribute_index1AttributeIndexParserRuleCall_0_3_1_0 = (RuleCall)cAttribute_index1Assignment_0_3_1.eContents().get(0);
		private final RuleCall cCLOSE_SQARE_BRACKETSParserRuleCall_0_3_2 = (RuleCall)cGroup_0_3.eContents().get(2);
		private final Group cGroup_0_4 = (Group)cGroup_0.eContents().get(4);
		private final Assignment cHash2Assignment_0_4_0 = (Assignment)cGroup_0_4.eContents().get(0);
		private final Keyword cHash2NumberSignKeyword_0_4_0_0 = (Keyword)cHash2Assignment_0_4_0.eContents().get(0);
		private final Assignment cName2Assignment_0_4_1 = (Assignment)cGroup_0_4.eContents().get(1);
		private final RuleCall cName2SourceOrEventReferenceParserRuleCall_0_4_1_0 = (RuleCall)cName2Assignment_0_4_1.eContents().get(0);
		private final Group cGroup_0_4_2 = (Group)cGroup_0_4.eContents().get(2);
		private final RuleCall cOPEN_SQARE_BRACKETSParserRuleCall_0_4_2_0 = (RuleCall)cGroup_0_4_2.eContents().get(0);
		private final Assignment cAttribute_index2Assignment_0_4_2_1 = (Assignment)cGroup_0_4_2.eContents().get(1);
		private final RuleCall cAttribute_index2AttributeIndexParserRuleCall_0_4_2_1_0 = (RuleCall)cAttribute_index2Assignment_0_4_2_1.eContents().get(0);
		private final RuleCall cCLOSE_SQARE_BRACKETSParserRuleCall_0_4_2_2 = (RuleCall)cGroup_0_4_2.eContents().get(2);
		private final Keyword cFullStopKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cAttr_nameAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cAttr_nameAttributeNameReferenceParserRuleCall_0_6_0 = (RuleCall)cAttr_nameAssignment_0_6.eContents().get(0);
		private final Assignment cFeaturesOrAttrRefAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFeaturesOrAttrRefFeaturesOrOutAttrReferenceParserRuleCall_1_0 = (RuleCall)cFeaturesOrAttrRefAssignment_1.eContents().get(0);
		
		//AttributeReference:
		//	{AttributeReference} hash1='#'? name1=SourceOrEventReference (OPEN_SQARE_BRACKETS attribute_index1=AttributeIndex
		//	CLOSE_SQARE_BRACKETS)? (hash2='#' name2=SourceOrEventReference (OPEN_SQARE_BRACKETS attribute_index2=AttributeIndex
		//	CLOSE_SQARE_BRACKETS)?)? '.' attr_name=AttributeNameReference
		//	//{AttributeReference} hash1='#'? name1=Source (OPEN_SQARE_BRACKETSattribute_index1=AttributeIndex']')? (hash2='#' name2=Source (OPEN_SQARE_BRACKETSattribute_index2=AttributeIndexCLOSE_SQARE_BRACKETS)?)? '.'  attr_name=AttributeNameReference
		//	| featuresOrAttrRef=FeaturesOrOutAttrReference;
		@Override public ParserRule getRule() { return rule; }
		
		//{AttributeReference} hash1='#'? name1=SourceOrEventReference (OPEN_SQARE_BRACKETS attribute_index1=AttributeIndex
		//CLOSE_SQARE_BRACKETS)? (hash2='#' name2=SourceOrEventReference (OPEN_SQARE_BRACKETS attribute_index2=AttributeIndex
		//CLOSE_SQARE_BRACKETS)?)? '.' attr_name=AttributeNameReference //{AttributeReference} hash1='#'? name1=Source (OPEN_SQARE_BRACKETSattribute_index1=AttributeIndex']')? (hash2='#' name2=Source (OPEN_SQARE_BRACKETSattribute_index2=AttributeIndexCLOSE_SQARE_BRACKETS)?)? '.'  attr_name=AttributeNameReference
		//| featuresOrAttrRef=FeaturesOrOutAttrReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AttributeReference} hash1='#'? name1=SourceOrEventReference (OPEN_SQARE_BRACKETS attribute_index1=AttributeIndex
		//CLOSE_SQARE_BRACKETS)? (hash2='#' name2=SourceOrEventReference (OPEN_SQARE_BRACKETS attribute_index2=AttributeIndex
		//CLOSE_SQARE_BRACKETS)?)? '.' attr_name=AttributeNameReference
		public Group getGroup_0() { return cGroup_0; }
		
		//{AttributeReference}
		public Action getAttributeReferenceAction_0_0() { return cAttributeReferenceAction_0_0; }
		
		//hash1='#'?
		public Assignment getHash1Assignment_0_1() { return cHash1Assignment_0_1; }
		
		//'#'
		public Keyword getHash1NumberSignKeyword_0_1_0() { return cHash1NumberSignKeyword_0_1_0; }
		
		//name1=SourceOrEventReference
		public Assignment getName1Assignment_0_2() { return cName1Assignment_0_2; }
		
		//SourceOrEventReference
		public RuleCall getName1SourceOrEventReferenceParserRuleCall_0_2_0() { return cName1SourceOrEventReferenceParserRuleCall_0_2_0; }
		
		//(OPEN_SQARE_BRACKETS attribute_index1=AttributeIndex CLOSE_SQARE_BRACKETS)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//OPEN_SQARE_BRACKETS
		public RuleCall getOPEN_SQARE_BRACKETSParserRuleCall_0_3_0() { return cOPEN_SQARE_BRACKETSParserRuleCall_0_3_0; }
		
		//attribute_index1=AttributeIndex
		public Assignment getAttribute_index1Assignment_0_3_1() { return cAttribute_index1Assignment_0_3_1; }
		
		//AttributeIndex
		public RuleCall getAttribute_index1AttributeIndexParserRuleCall_0_3_1_0() { return cAttribute_index1AttributeIndexParserRuleCall_0_3_1_0; }
		
		//CLOSE_SQARE_BRACKETS
		public RuleCall getCLOSE_SQARE_BRACKETSParserRuleCall_0_3_2() { return cCLOSE_SQARE_BRACKETSParserRuleCall_0_3_2; }
		
		//(hash2='#' name2=SourceOrEventReference (OPEN_SQARE_BRACKETS attribute_index2=AttributeIndex CLOSE_SQARE_BRACKETS)?)?
		public Group getGroup_0_4() { return cGroup_0_4; }
		
		//hash2='#'
		public Assignment getHash2Assignment_0_4_0() { return cHash2Assignment_0_4_0; }
		
		//'#'
		public Keyword getHash2NumberSignKeyword_0_4_0_0() { return cHash2NumberSignKeyword_0_4_0_0; }
		
		//name2=SourceOrEventReference
		public Assignment getName2Assignment_0_4_1() { return cName2Assignment_0_4_1; }
		
		//SourceOrEventReference
		public RuleCall getName2SourceOrEventReferenceParserRuleCall_0_4_1_0() { return cName2SourceOrEventReferenceParserRuleCall_0_4_1_0; }
		
		//(OPEN_SQARE_BRACKETS attribute_index2=AttributeIndex CLOSE_SQARE_BRACKETS)?
		public Group getGroup_0_4_2() { return cGroup_0_4_2; }
		
		//OPEN_SQARE_BRACKETS
		public RuleCall getOPEN_SQARE_BRACKETSParserRuleCall_0_4_2_0() { return cOPEN_SQARE_BRACKETSParserRuleCall_0_4_2_0; }
		
		//attribute_index2=AttributeIndex
		public Assignment getAttribute_index2Assignment_0_4_2_1() { return cAttribute_index2Assignment_0_4_2_1; }
		
		//AttributeIndex
		public RuleCall getAttribute_index2AttributeIndexParserRuleCall_0_4_2_1_0() { return cAttribute_index2AttributeIndexParserRuleCall_0_4_2_1_0; }
		
		//CLOSE_SQARE_BRACKETS
		public RuleCall getCLOSE_SQARE_BRACKETSParserRuleCall_0_4_2_2() { return cCLOSE_SQARE_BRACKETSParserRuleCall_0_4_2_2; }
		
		//'.'
		public Keyword getFullStopKeyword_0_5() { return cFullStopKeyword_0_5; }
		
		//attr_name=AttributeNameReference
		public Assignment getAttr_nameAssignment_0_6() { return cAttr_nameAssignment_0_6; }
		
		//AttributeNameReference
		public RuleCall getAttr_nameAttributeNameReferenceParserRuleCall_0_6_0() { return cAttr_nameAttributeNameReferenceParserRuleCall_0_6_0; }
		
		//featuresOrAttrRef=FeaturesOrOutAttrReference
		public Assignment getFeaturesOrAttrRefAssignment_1() { return cFeaturesOrAttrRefAssignment_1; }
		
		//FeaturesOrOutAttrReference
		public RuleCall getFeaturesOrAttrRefFeaturesOrOutAttrReferenceParserRuleCall_1_0() { return cFeaturesOrAttrRefFeaturesOrOutAttrReferenceParserRuleCall_1_0; }
	}
	public class AttributeNameReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AttributeNameReference");
		private final Assignment cAttrName1Assignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cAttrName1FeaturesCrossReference_0 = (CrossReference)cAttrName1Assignment.eContents().get(0);
		private final RuleCall cAttrName1FeaturesIdNewParserRuleCall_0_1 = (RuleCall)cAttrName1FeaturesCrossReference_0.eContents().get(1);
		
		//AttributeNameReference:
		//	attrName1=[Features|IdNew];
		@Override public ParserRule getRule() { return rule; }
		
		//attrName1=[Features|IdNew]
		public Assignment getAttrName1Assignment() { return cAttrName1Assignment; }
		
		//[Features|IdNew]
		public CrossReference getAttrName1FeaturesCrossReference_0() { return cAttrName1FeaturesCrossReference_0; }
		
		//IdNew
		public RuleCall getAttrName1FeaturesIdNewParserRuleCall_0_1() { return cAttrName1FeaturesIdNewParserRuleCall_0_1; }
	}
	public class AttributeIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AttributeIndex");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAttributeIndexAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cINT_LITERALParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAttributeIndexAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cLASTParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cHyphenMinusKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cINT_LITERALParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		
		//AttributeIndex:
		//	{AttributeIndex} INT_LITERAL | {AttributeIndex} LAST ('-' INT_LITERAL)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{AttributeIndex} INT_LITERAL | {AttributeIndex} LAST ('-' INT_LITERAL)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{AttributeIndex} INT_LITERAL
		public Group getGroup_0() { return cGroup_0; }
		
		//{AttributeIndex}
		public Action getAttributeIndexAction_0_0() { return cAttributeIndexAction_0_0; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_0_1() { return cINT_LITERALParserRuleCall_0_1; }
		
		//{AttributeIndex} LAST ('-' INT_LITERAL)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{AttributeIndex}
		public Action getAttributeIndexAction_1_0() { return cAttributeIndexAction_1_0; }
		
		//LAST
		public RuleCall getLASTParserRuleCall_1_1() { return cLASTParserRuleCall_1_1; }
		
		//('-' INT_LITERAL)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_2_0() { return cHyphenMinusKeyword_1_2_0; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_1_2_1() { return cINT_LITERALParserRuleCall_1_2_1; }
	}
	public class StandardStatefulSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.StandardStatefulSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStandardStatefulSourceAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIdNewParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cBsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBsBasicSourceParserRuleCall_2_0 = (RuleCall)cBsAssignment_2.eContents().get(0);
		
		//StandardStatefulSource:
		//	{StandardStatefulSource} (name=IdNew '=')? bs=BasicSource;
		@Override public ParserRule getRule() { return rule; }
		
		//{StandardStatefulSource} (name=IdNew '=')? bs=BasicSource
		public Group getGroup() { return cGroup; }
		
		//{StandardStatefulSource}
		public Action getStandardStatefulSourceAction_0() { return cStandardStatefulSourceAction_0; }
		
		//(name=IdNew '=')?
		public Group getGroup_1() { return cGroup_1; }
		
		//name=IdNew
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//IdNew
		public RuleCall getNameIdNewParserRuleCall_1_0_0() { return cNameIdNewParserRuleCall_1_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//bs=BasicSource
		public Assignment getBsAssignment_2() { return cBsAssignment_2; }
		
		//BasicSource
		public RuleCall getBsBasicSourceParserRuleCall_2_0() { return cBsBasicSourceParserRuleCall_2_0; }
	}
	public class Source1OrStandardStatefulSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Source1OrStandardStatefulSource");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStandardStatefulSourceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSource1ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Source1OrStandardStatefulSource:
		//	StandardStatefulSource | Source1;
		@Override public ParserRule getRule() { return rule; }
		
		//StandardStatefulSource | Source1
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StandardStatefulSource
		public RuleCall getStandardStatefulSourceParserRuleCall_0() { return cStandardStatefulSourceParserRuleCall_0; }
		
		//Source1
		public RuleCall getSource1ParserRuleCall_1() { return cSource1ParserRuleCall_1; }
	}
	public class SourceOrEventReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SourceOrEventReference");
		private final Assignment cNaAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNaSource1OrStandardStatefulSourceCrossReference_0 = (CrossReference)cNaAssignment.eContents().get(0);
		private final RuleCall cNaSource1OrStandardStatefulSourceIdNewParserRuleCall_0_1 = (RuleCall)cNaSource1OrStandardStatefulSourceCrossReference_0.eContents().get(1);
		
		//SourceOrEventReference:
		//	na=[Source1OrStandardStatefulSource|IdNew];
		@Override public ParserRule getRule() { return rule; }
		
		//na=[Source1OrStandardStatefulSource|IdNew]
		public Assignment getNaAssignment() { return cNaAssignment; }
		
		//[Source1OrStandardStatefulSource|IdNew]
		public CrossReference getNaSource1OrStandardStatefulSourceCrossReference_0() { return cNaSource1OrStandardStatefulSourceCrossReference_0; }
		
		//IdNew
		public RuleCall getNaSource1OrStandardStatefulSourceIdNewParserRuleCall_0_1() { return cNaSource1OrStandardStatefulSourceIdNewParserRuleCall_0_1; }
	}
	public class BasicSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.BasicSource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSrcAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSrcSourceParserRuleCall_0_0 = (RuleCall)cSrcAssignment_0.eContents().get(0);
		private final Assignment cBasic_ss_handlersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBasic_ss_handlersBasicSourceStreamHandlersParserRuleCall_1_0 = (RuleCall)cBasic_ss_handlersAssignment_1.eContents().get(0);
		
		///*
		//Event:
		//	na=Name
		//;
		//*/ BasicSource:
		//	src=Source basic_ss_handlers=BasicSourceStreamHandlers?;
		@Override public ParserRule getRule() { return rule; }
		
		//src=Source basic_ss_handlers=BasicSourceStreamHandlers?
		public Group getGroup() { return cGroup; }
		
		//src=Source
		public Assignment getSrcAssignment_0() { return cSrcAssignment_0; }
		
		//Source
		public RuleCall getSrcSourceParserRuleCall_0_0() { return cSrcSourceParserRuleCall_0_0; }
		
		//basic_ss_handlers=BasicSourceStreamHandlers?
		public Assignment getBasic_ss_handlersAssignment_1() { return cBasic_ss_handlersAssignment_1; }
		
		//BasicSourceStreamHandlers
		public RuleCall getBasic_ss_handlersBasicSourceStreamHandlersParserRuleCall_1_0() { return cBasic_ss_handlersBasicSourceStreamHandlersParserRuleCall_1_0; }
	}
	public class FeaturesOrOutAttrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FeaturesOrOutAttr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeaturesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutAttrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FeaturesOrOutAttr:
		//	Features | OutAttr;
		@Override public ParserRule getRule() { return rule; }
		
		//Features | OutAttr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Features
		public RuleCall getFeaturesParserRuleCall_0() { return cFeaturesParserRuleCall_0; }
		
		//OutAttr
		public RuleCall getOutAttrParserRuleCall_1() { return cOutAttrParserRuleCall_1; }
	}
	public class FeaturesOrOutAttrReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FeaturesOrOutAttrReference");
		private final Assignment cSrcoutAttrrefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSrcoutAttrrefFeaturesOrOutAttrCrossReference_0 = (CrossReference)cSrcoutAttrrefAssignment.eContents().get(0);
		private final RuleCall cSrcoutAttrrefFeaturesOrOutAttrIdNewParserRuleCall_0_1 = (RuleCall)cSrcoutAttrrefFeaturesOrOutAttrCrossReference_0.eContents().get(1);
		
		//FeaturesOrOutAttrReference:
		//	srcoutAttrref=[FeaturesOrOutAttr|IdNew];
		@Override public ParserRule getRule() { return rule; }
		
		//srcoutAttrref=[FeaturesOrOutAttr|IdNew]
		public Assignment getSrcoutAttrrefAssignment() { return cSrcoutAttrrefAssignment; }
		
		//[FeaturesOrOutAttr|IdNew]
		public CrossReference getSrcoutAttrrefFeaturesOrOutAttrCrossReference_0() { return cSrcoutAttrrefFeaturesOrOutAttrCrossReference_0; }
		
		//IdNew
		public RuleCall getSrcoutAttrrefFeaturesOrOutAttrIdNewParserRuleCall_0_1() { return cSrcoutAttrrefFeaturesOrOutAttrIdNewParserRuleCall_0_1; }
	}
	public class ConstantValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ConstantValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cConstantValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cBvAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cBvBoolValueParserRuleCall_0_1_0 = (RuleCall)cBvAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cConstantValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cSdvAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSdvSignedDoubleValueParserRuleCall_1_1_0 = (RuleCall)cSdvAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cConstantValueAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cSfvAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSfvSignedFloatValueParserRuleCall_2_1_0 = (RuleCall)cSfvAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cConstantValueAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cSlvAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSlvSignedLongValueParserRuleCall_3_1_0 = (RuleCall)cSlvAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cConstantValueAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cSivAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSivSignedIntValueParserRuleCall_4_1_0 = (RuleCall)cSivAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cConstantValueAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cTvAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTvTimeValueParserRuleCall_5_1_0 = (RuleCall)cTvAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cConstantValueAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Assignment cSvAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSvStringValueParserRuleCall_6_1_0 = (RuleCall)cSvAssignment_6_1.eContents().get(0);
		
		//ConstantValue:
		//	{ConstantValue} bv=BoolValue
		//	| {ConstantValue} sdv=SignedDoubleValue
		//	| {ConstantValue} sfv=SignedFloatValue
		//	| {ConstantValue} slv=SignedLongValue
		//	| {ConstantValue} siv=SignedIntValue
		//	| {ConstantValue} tv=TimeValue
		//	| {ConstantValue} sv=StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstantValue} bv=BoolValue | {ConstantValue} sdv=SignedDoubleValue | {ConstantValue} sfv=SignedFloatValue |
		//{ConstantValue} slv=SignedLongValue | {ConstantValue} siv=SignedIntValue | {ConstantValue} tv=TimeValue |
		//{ConstantValue} sv=StringValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ConstantValue} bv=BoolValue
		public Group getGroup_0() { return cGroup_0; }
		
		//{ConstantValue}
		public Action getConstantValueAction_0_0() { return cConstantValueAction_0_0; }
		
		//bv=BoolValue
		public Assignment getBvAssignment_0_1() { return cBvAssignment_0_1; }
		
		//BoolValue
		public RuleCall getBvBoolValueParserRuleCall_0_1_0() { return cBvBoolValueParserRuleCall_0_1_0; }
		
		//{ConstantValue} sdv=SignedDoubleValue
		public Group getGroup_1() { return cGroup_1; }
		
		//{ConstantValue}
		public Action getConstantValueAction_1_0() { return cConstantValueAction_1_0; }
		
		//sdv=SignedDoubleValue
		public Assignment getSdvAssignment_1_1() { return cSdvAssignment_1_1; }
		
		//SignedDoubleValue
		public RuleCall getSdvSignedDoubleValueParserRuleCall_1_1_0() { return cSdvSignedDoubleValueParserRuleCall_1_1_0; }
		
		//{ConstantValue} sfv=SignedFloatValue
		public Group getGroup_2() { return cGroup_2; }
		
		//{ConstantValue}
		public Action getConstantValueAction_2_0() { return cConstantValueAction_2_0; }
		
		//sfv=SignedFloatValue
		public Assignment getSfvAssignment_2_1() { return cSfvAssignment_2_1; }
		
		//SignedFloatValue
		public RuleCall getSfvSignedFloatValueParserRuleCall_2_1_0() { return cSfvSignedFloatValueParserRuleCall_2_1_0; }
		
		//{ConstantValue} slv=SignedLongValue
		public Group getGroup_3() { return cGroup_3; }
		
		//{ConstantValue}
		public Action getConstantValueAction_3_0() { return cConstantValueAction_3_0; }
		
		//slv=SignedLongValue
		public Assignment getSlvAssignment_3_1() { return cSlvAssignment_3_1; }
		
		//SignedLongValue
		public RuleCall getSlvSignedLongValueParserRuleCall_3_1_0() { return cSlvSignedLongValueParserRuleCall_3_1_0; }
		
		//{ConstantValue} siv=SignedIntValue
		public Group getGroup_4() { return cGroup_4; }
		
		//{ConstantValue}
		public Action getConstantValueAction_4_0() { return cConstantValueAction_4_0; }
		
		//siv=SignedIntValue
		public Assignment getSivAssignment_4_1() { return cSivAssignment_4_1; }
		
		//SignedIntValue
		public RuleCall getSivSignedIntValueParserRuleCall_4_1_0() { return cSivSignedIntValueParserRuleCall_4_1_0; }
		
		//{ConstantValue} tv=TimeValue
		public Group getGroup_5() { return cGroup_5; }
		
		//{ConstantValue}
		public Action getConstantValueAction_5_0() { return cConstantValueAction_5_0; }
		
		//tv=TimeValue
		public Assignment getTvAssignment_5_1() { return cTvAssignment_5_1; }
		
		//TimeValue
		public RuleCall getTvTimeValueParserRuleCall_5_1_0() { return cTvTimeValueParserRuleCall_5_1_0; }
		
		//{ConstantValue} sv=StringValue
		public Group getGroup_6() { return cGroup_6; }
		
		//{ConstantValue}
		public Action getConstantValueAction_6_0() { return cConstantValueAction_6_0; }
		
		//sv=StringValue
		public Assignment getSvAssignment_6_1() { return cSvAssignment_6_1; }
		
		//StringValue
		public RuleCall getSvStringValueParserRuleCall_6_1_0() { return cSvStringValueParserRuleCall_6_1_0; }
	}
	public class NameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Name");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIdNewParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Name:
		//	name=IdNew //k_word=Keyword |
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name=IdNew
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//IdNew
		public RuleCall getNameIdNewParserRuleCall_0() { return cNameIdNewParserRuleCall_0; }
	}
	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Source");
		private final Assignment cStrIdAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cStrIdSource1CrossReference_0 = (CrossReference)cStrIdAssignment.eContents().get(0);
		private final RuleCall cStrIdSource1IdNewParserRuleCall_0_1 = (RuleCall)cStrIdSource1CrossReference_0.eContents().get(1);
		
		//Source:
		//	strId=[Source1|IdNew];
		@Override public ParserRule getRule() { return rule; }
		
		//strId=[Source1|IdNew]
		public Assignment getStrIdAssignment() { return cStrIdAssignment; }
		
		//[Source1|IdNew]
		public CrossReference getStrIdSource1CrossReference_0() { return cStrIdSource1CrossReference_0; }
		
		//IdNew
		public RuleCall getStrIdSource1IdNewParserRuleCall_0_1() { return cStrIdSource1IdNewParserRuleCall_0_1; }
	}
	public class Source1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Source1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInnerAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInnerNumberSignKeyword_0_0 = (Keyword)cInnerAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIdNewParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Source1:
		//	inner='#'? name=IdNew;
		@Override public ParserRule getRule() { return rule; }
		
		//inner='#'? name=IdNew
		public Group getGroup() { return cGroup; }
		
		//inner='#'?
		public Assignment getInnerAssignment_0() { return cInnerAssignment_0; }
		
		//'#'
		public Keyword getInnerNumberSignKeyword_0_0() { return cInnerNumberSignKeyword_0_0; }
		
		//name=IdNew
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//IdNew
		public RuleCall getNameIdNewParserRuleCall_1_0() { return cNameIdNewParserRuleCall_1_0; }
	}
	public class BoolValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.BoolValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTRUEParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFALSEParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BoolValue:
		//	TRUE | FALSE;
		@Override public ParserRule getRule() { return rule; }
		
		//TRUE | FALSE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE
		public RuleCall getTRUEParserRuleCall_0() { return cTRUEParserRuleCall_0; }
		
		//FALSE
		public RuleCall getFALSEParserRuleCall_1() { return cFALSEParserRuleCall_1; }
	}
	public class SignedDoubleValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SignedDoubleValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cDOUBLE_LITERALParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedDoubleValue:
		//	('-' | '+')? DOUBLE_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//('-' | '+')? DOUBLE_LITERAL
		public Group getGroup() { return cGroup; }
		
		//('-' | '+')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//DOUBLE_LITERAL
		public RuleCall getDOUBLE_LITERALParserRuleCall_1() { return cDOUBLE_LITERALParserRuleCall_1; }
	}
	public class SignedFloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SignedFloatValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cFLOAT_LITERALParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedFloatValue:
		//	('-' | '+')? FLOAT_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//('-' | '+')? FLOAT_LITERAL
		public Group getGroup() { return cGroup; }
		
		//('-' | '+')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//FLOAT_LITERAL
		public RuleCall getFLOAT_LITERALParserRuleCall_1() { return cFLOAT_LITERALParserRuleCall_1; }
	}
	public class SignedLongValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SignedLongValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cLONG_LITERALParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedLongValue:
		//	('-' | '+')? LONG_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//('-' | '+')? LONG_LITERAL
		public Group getGroup() { return cGroup; }
		
		//('-' | '+')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//LONG_LITERAL
		public RuleCall getLONG_LITERALParserRuleCall_1() { return cLONG_LITERALParserRuleCall_1; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.StringValue");
		private final Assignment cSlAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSlSTRING_LITERALParserRuleCall_0 = (RuleCall)cSlAssignment.eContents().get(0);
		
		//StringValue:
		//	sl=STRING_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//sl=STRING_LITERAL
		public Assignment getSlAssignment() { return cSlAssignment; }
		
		//STRING_LITERAL
		public RuleCall getSlSTRING_LITERALParserRuleCall_0() { return cSlSTRING_LITERALParserRuleCall_0; }
	}
	public class TimeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.TimeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cYvAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cYvYearValueParserRuleCall_0_0_0 = (RuleCall)cYvAssignment_0_0.eContents().get(0);
		private final Assignment cMvAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cMvMonthValueParserRuleCall_0_1_0 = (RuleCall)cMvAssignment_0_1.eContents().get(0);
		private final Assignment cWvAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cWvWeekValueParserRuleCall_0_2_0 = (RuleCall)cWvAssignment_0_2.eContents().get(0);
		private final Assignment cDvAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cDvDayValueParserRuleCall_0_3_0 = (RuleCall)cDvAssignment_0_3.eContents().get(0);
		private final Assignment cHvAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cHvHourValueParserRuleCall_0_4_0 = (RuleCall)cHvAssignment_0_4.eContents().get(0);
		private final Assignment cMinvAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cMinvMinuteValueParserRuleCall_0_5_0 = (RuleCall)cMinvAssignment_0_5.eContents().get(0);
		private final Assignment cSecvAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cSecvSecondValueParserRuleCall_0_6_0 = (RuleCall)cSecvAssignment_0_6.eContents().get(0);
		private final Assignment cMsecvAssignment_0_7 = (Assignment)cGroup_0.eContents().get(7);
		private final RuleCall cMsecvMillisecondValueParserRuleCall_0_7_0 = (RuleCall)cMsecvAssignment_0_7.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cMvAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cMvMonthValueParserRuleCall_1_0_0 = (RuleCall)cMvAssignment_1_0.eContents().get(0);
		private final Assignment cWvAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWvWeekValueParserRuleCall_1_1_0 = (RuleCall)cWvAssignment_1_1.eContents().get(0);
		private final Assignment cDvAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDvDayValueParserRuleCall_1_2_0 = (RuleCall)cDvAssignment_1_2.eContents().get(0);
		private final Assignment cHvAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cHvHourValueParserRuleCall_1_3_0 = (RuleCall)cHvAssignment_1_3.eContents().get(0);
		private final Assignment cMinvAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cMinvMinuteValueParserRuleCall_1_4_0 = (RuleCall)cMinvAssignment_1_4.eContents().get(0);
		private final Assignment cSecvAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cSecvSecondValueParserRuleCall_1_5_0 = (RuleCall)cSecvAssignment_1_5.eContents().get(0);
		private final Assignment cMsecvAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cMsecvMillisecondValueParserRuleCall_1_6_0 = (RuleCall)cMsecvAssignment_1_6.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cWvAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cWvWeekValueParserRuleCall_2_0_0 = (RuleCall)cWvAssignment_2_0.eContents().get(0);
		private final Assignment cDvAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDvDayValueParserRuleCall_2_1_0 = (RuleCall)cDvAssignment_2_1.eContents().get(0);
		private final Assignment cHvAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cHvHourValueParserRuleCall_2_2_0 = (RuleCall)cHvAssignment_2_2.eContents().get(0);
		private final Assignment cMinvAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cMinvMinuteValueParserRuleCall_2_3_0 = (RuleCall)cMinvAssignment_2_3.eContents().get(0);
		private final Assignment cSecvAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cSecvSecondValueParserRuleCall_2_4_0 = (RuleCall)cSecvAssignment_2_4.eContents().get(0);
		private final Assignment cMsecvAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cMsecvMillisecondValueParserRuleCall_2_5_0 = (RuleCall)cMsecvAssignment_2_5.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cDvAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cDvDayValueParserRuleCall_3_0_0 = (RuleCall)cDvAssignment_3_0.eContents().get(0);
		private final Assignment cHvAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cHvHourValueParserRuleCall_3_1_0 = (RuleCall)cHvAssignment_3_1.eContents().get(0);
		private final Assignment cMinvAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cMinvMinuteValueParserRuleCall_3_2_0 = (RuleCall)cMinvAssignment_3_2.eContents().get(0);
		private final Assignment cSecvAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cSecvSecondValueParserRuleCall_3_3_0 = (RuleCall)cSecvAssignment_3_3.eContents().get(0);
		private final Assignment cMsecvAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cMsecvMillisecondValueParserRuleCall_3_4_0 = (RuleCall)cMsecvAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cHvAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cHvHourValueParserRuleCall_4_0_0 = (RuleCall)cHvAssignment_4_0.eContents().get(0);
		private final Assignment cMinvAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMinvMinuteValueParserRuleCall_4_1_0 = (RuleCall)cMinvAssignment_4_1.eContents().get(0);
		private final Assignment cSecvAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cSecvSecondValueParserRuleCall_4_2_0 = (RuleCall)cSecvAssignment_4_2.eContents().get(0);
		private final Assignment cMsecvAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cMsecvMillisecondValueParserRuleCall_4_3_0 = (RuleCall)cMsecvAssignment_4_3.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cMinvAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cMinvMinuteValueParserRuleCall_5_0_0 = (RuleCall)cMinvAssignment_5_0.eContents().get(0);
		private final Assignment cSecvAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSecvSecondValueParserRuleCall_5_1_0 = (RuleCall)cSecvAssignment_5_1.eContents().get(0);
		private final Assignment cMsecvAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cMsecvMillisecondValueParserRuleCall_5_2_0 = (RuleCall)cMsecvAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cSvAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cSvSecondValueParserRuleCall_6_0_0 = (RuleCall)cSvAssignment_6_0.eContents().get(0);
		private final Assignment cMsecvAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMsecvMillisecondValueParserRuleCall_6_1_0 = (RuleCall)cMsecvAssignment_6_1.eContents().get(0);
		private final Assignment cMsecvAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cMsecvMillisecondValueParserRuleCall_7_0 = (RuleCall)cMsecvAssignment_7.eContents().get(0);
		
		//TimeValue:
		//	yv=YearValue mv=MonthValue? wv=WeekValue? dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue?
		//	msecv=MillisecondValue?
		//	| mv=MonthValue wv=WeekValue? dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
		//	| wv=WeekValue dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
		//	| dv=DayValue hv=HourValue? minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
		//	| hv=HourValue minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
		//	| minv=MinuteValue secv=SecondValue? msecv=MillisecondValue?
		//	| sv=SecondValue msecv=MillisecondValue?
		//	| msecv=MillisecondValue;
		@Override public ParserRule getRule() { return rule; }
		
		//yv=YearValue mv=MonthValue? wv=WeekValue? dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue?
		//msecv=MillisecondValue? | mv=MonthValue wv=WeekValue? dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue?
		//msecv=MillisecondValue? | wv=WeekValue dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue?
		//msecv=MillisecondValue? | dv=DayValue hv=HourValue? minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue? |
		//hv=HourValue minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue? | minv=MinuteValue secv=SecondValue?
		//msecv=MillisecondValue? | sv=SecondValue msecv=MillisecondValue? | msecv=MillisecondValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//yv=YearValue mv=MonthValue? wv=WeekValue? dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue?
		//msecv=MillisecondValue?
		public Group getGroup_0() { return cGroup_0; }
		
		//yv=YearValue
		public Assignment getYvAssignment_0_0() { return cYvAssignment_0_0; }
		
		//YearValue
		public RuleCall getYvYearValueParserRuleCall_0_0_0() { return cYvYearValueParserRuleCall_0_0_0; }
		
		//mv=MonthValue?
		public Assignment getMvAssignment_0_1() { return cMvAssignment_0_1; }
		
		//MonthValue
		public RuleCall getMvMonthValueParserRuleCall_0_1_0() { return cMvMonthValueParserRuleCall_0_1_0; }
		
		//wv=WeekValue?
		public Assignment getWvAssignment_0_2() { return cWvAssignment_0_2; }
		
		//WeekValue
		public RuleCall getWvWeekValueParserRuleCall_0_2_0() { return cWvWeekValueParserRuleCall_0_2_0; }
		
		//dv=DayValue?
		public Assignment getDvAssignment_0_3() { return cDvAssignment_0_3; }
		
		//DayValue
		public RuleCall getDvDayValueParserRuleCall_0_3_0() { return cDvDayValueParserRuleCall_0_3_0; }
		
		//hv=HourValue?
		public Assignment getHvAssignment_0_4() { return cHvAssignment_0_4; }
		
		//HourValue
		public RuleCall getHvHourValueParserRuleCall_0_4_0() { return cHvHourValueParserRuleCall_0_4_0; }
		
		//minv=MinuteValue?
		public Assignment getMinvAssignment_0_5() { return cMinvAssignment_0_5; }
		
		//MinuteValue
		public RuleCall getMinvMinuteValueParserRuleCall_0_5_0() { return cMinvMinuteValueParserRuleCall_0_5_0; }
		
		//secv=SecondValue?
		public Assignment getSecvAssignment_0_6() { return cSecvAssignment_0_6; }
		
		//SecondValue
		public RuleCall getSecvSecondValueParserRuleCall_0_6_0() { return cSecvSecondValueParserRuleCall_0_6_0; }
		
		//msecv=MillisecondValue?
		public Assignment getMsecvAssignment_0_7() { return cMsecvAssignment_0_7; }
		
		//MillisecondValue
		public RuleCall getMsecvMillisecondValueParserRuleCall_0_7_0() { return cMsecvMillisecondValueParserRuleCall_0_7_0; }
		
		//mv=MonthValue wv=WeekValue? dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
		public Group getGroup_1() { return cGroup_1; }
		
		//mv=MonthValue
		public Assignment getMvAssignment_1_0() { return cMvAssignment_1_0; }
		
		//MonthValue
		public RuleCall getMvMonthValueParserRuleCall_1_0_0() { return cMvMonthValueParserRuleCall_1_0_0; }
		
		//wv=WeekValue?
		public Assignment getWvAssignment_1_1() { return cWvAssignment_1_1; }
		
		//WeekValue
		public RuleCall getWvWeekValueParserRuleCall_1_1_0() { return cWvWeekValueParserRuleCall_1_1_0; }
		
		//dv=DayValue?
		public Assignment getDvAssignment_1_2() { return cDvAssignment_1_2; }
		
		//DayValue
		public RuleCall getDvDayValueParserRuleCall_1_2_0() { return cDvDayValueParserRuleCall_1_2_0; }
		
		//hv=HourValue?
		public Assignment getHvAssignment_1_3() { return cHvAssignment_1_3; }
		
		//HourValue
		public RuleCall getHvHourValueParserRuleCall_1_3_0() { return cHvHourValueParserRuleCall_1_3_0; }
		
		//minv=MinuteValue?
		public Assignment getMinvAssignment_1_4() { return cMinvAssignment_1_4; }
		
		//MinuteValue
		public RuleCall getMinvMinuteValueParserRuleCall_1_4_0() { return cMinvMinuteValueParserRuleCall_1_4_0; }
		
		//secv=SecondValue?
		public Assignment getSecvAssignment_1_5() { return cSecvAssignment_1_5; }
		
		//SecondValue
		public RuleCall getSecvSecondValueParserRuleCall_1_5_0() { return cSecvSecondValueParserRuleCall_1_5_0; }
		
		//msecv=MillisecondValue?
		public Assignment getMsecvAssignment_1_6() { return cMsecvAssignment_1_6; }
		
		//MillisecondValue
		public RuleCall getMsecvMillisecondValueParserRuleCall_1_6_0() { return cMsecvMillisecondValueParserRuleCall_1_6_0; }
		
		//wv=WeekValue dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
		public Group getGroup_2() { return cGroup_2; }
		
		//wv=WeekValue
		public Assignment getWvAssignment_2_0() { return cWvAssignment_2_0; }
		
		//WeekValue
		public RuleCall getWvWeekValueParserRuleCall_2_0_0() { return cWvWeekValueParserRuleCall_2_0_0; }
		
		//dv=DayValue?
		public Assignment getDvAssignment_2_1() { return cDvAssignment_2_1; }
		
		//DayValue
		public RuleCall getDvDayValueParserRuleCall_2_1_0() { return cDvDayValueParserRuleCall_2_1_0; }
		
		//hv=HourValue?
		public Assignment getHvAssignment_2_2() { return cHvAssignment_2_2; }
		
		//HourValue
		public RuleCall getHvHourValueParserRuleCall_2_2_0() { return cHvHourValueParserRuleCall_2_2_0; }
		
		//minv=MinuteValue?
		public Assignment getMinvAssignment_2_3() { return cMinvAssignment_2_3; }
		
		//MinuteValue
		public RuleCall getMinvMinuteValueParserRuleCall_2_3_0() { return cMinvMinuteValueParserRuleCall_2_3_0; }
		
		//secv=SecondValue?
		public Assignment getSecvAssignment_2_4() { return cSecvAssignment_2_4; }
		
		//SecondValue
		public RuleCall getSecvSecondValueParserRuleCall_2_4_0() { return cSecvSecondValueParserRuleCall_2_4_0; }
		
		//msecv=MillisecondValue?
		public Assignment getMsecvAssignment_2_5() { return cMsecvAssignment_2_5; }
		
		//MillisecondValue
		public RuleCall getMsecvMillisecondValueParserRuleCall_2_5_0() { return cMsecvMillisecondValueParserRuleCall_2_5_0; }
		
		//dv=DayValue hv=HourValue? minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
		public Group getGroup_3() { return cGroup_3; }
		
		//dv=DayValue
		public Assignment getDvAssignment_3_0() { return cDvAssignment_3_0; }
		
		//DayValue
		public RuleCall getDvDayValueParserRuleCall_3_0_0() { return cDvDayValueParserRuleCall_3_0_0; }
		
		//hv=HourValue?
		public Assignment getHvAssignment_3_1() { return cHvAssignment_3_1; }
		
		//HourValue
		public RuleCall getHvHourValueParserRuleCall_3_1_0() { return cHvHourValueParserRuleCall_3_1_0; }
		
		//minv=MinuteValue?
		public Assignment getMinvAssignment_3_2() { return cMinvAssignment_3_2; }
		
		//MinuteValue
		public RuleCall getMinvMinuteValueParserRuleCall_3_2_0() { return cMinvMinuteValueParserRuleCall_3_2_0; }
		
		//secv=SecondValue?
		public Assignment getSecvAssignment_3_3() { return cSecvAssignment_3_3; }
		
		//SecondValue
		public RuleCall getSecvSecondValueParserRuleCall_3_3_0() { return cSecvSecondValueParserRuleCall_3_3_0; }
		
		//msecv=MillisecondValue?
		public Assignment getMsecvAssignment_3_4() { return cMsecvAssignment_3_4; }
		
		//MillisecondValue
		public RuleCall getMsecvMillisecondValueParserRuleCall_3_4_0() { return cMsecvMillisecondValueParserRuleCall_3_4_0; }
		
		//hv=HourValue minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
		public Group getGroup_4() { return cGroup_4; }
		
		//hv=HourValue
		public Assignment getHvAssignment_4_0() { return cHvAssignment_4_0; }
		
		//HourValue
		public RuleCall getHvHourValueParserRuleCall_4_0_0() { return cHvHourValueParserRuleCall_4_0_0; }
		
		//minv=MinuteValue?
		public Assignment getMinvAssignment_4_1() { return cMinvAssignment_4_1; }
		
		//MinuteValue
		public RuleCall getMinvMinuteValueParserRuleCall_4_1_0() { return cMinvMinuteValueParserRuleCall_4_1_0; }
		
		//secv=SecondValue?
		public Assignment getSecvAssignment_4_2() { return cSecvAssignment_4_2; }
		
		//SecondValue
		public RuleCall getSecvSecondValueParserRuleCall_4_2_0() { return cSecvSecondValueParserRuleCall_4_2_0; }
		
		//msecv=MillisecondValue?
		public Assignment getMsecvAssignment_4_3() { return cMsecvAssignment_4_3; }
		
		//MillisecondValue
		public RuleCall getMsecvMillisecondValueParserRuleCall_4_3_0() { return cMsecvMillisecondValueParserRuleCall_4_3_0; }
		
		//minv=MinuteValue secv=SecondValue? msecv=MillisecondValue?
		public Group getGroup_5() { return cGroup_5; }
		
		//minv=MinuteValue
		public Assignment getMinvAssignment_5_0() { return cMinvAssignment_5_0; }
		
		//MinuteValue
		public RuleCall getMinvMinuteValueParserRuleCall_5_0_0() { return cMinvMinuteValueParserRuleCall_5_0_0; }
		
		//secv=SecondValue?
		public Assignment getSecvAssignment_5_1() { return cSecvAssignment_5_1; }
		
		//SecondValue
		public RuleCall getSecvSecondValueParserRuleCall_5_1_0() { return cSecvSecondValueParserRuleCall_5_1_0; }
		
		//msecv=MillisecondValue?
		public Assignment getMsecvAssignment_5_2() { return cMsecvAssignment_5_2; }
		
		//MillisecondValue
		public RuleCall getMsecvMillisecondValueParserRuleCall_5_2_0() { return cMsecvMillisecondValueParserRuleCall_5_2_0; }
		
		//sv=SecondValue msecv=MillisecondValue?
		public Group getGroup_6() { return cGroup_6; }
		
		//sv=SecondValue
		public Assignment getSvAssignment_6_0() { return cSvAssignment_6_0; }
		
		//SecondValue
		public RuleCall getSvSecondValueParserRuleCall_6_0_0() { return cSvSecondValueParserRuleCall_6_0_0; }
		
		//msecv=MillisecondValue?
		public Assignment getMsecvAssignment_6_1() { return cMsecvAssignment_6_1; }
		
		//MillisecondValue
		public RuleCall getMsecvMillisecondValueParserRuleCall_6_1_0() { return cMsecvMillisecondValueParserRuleCall_6_1_0; }
		
		//msecv=MillisecondValue
		public Assignment getMsecvAssignment_7() { return cMsecvAssignment_7; }
		
		//MillisecondValue
		public RuleCall getMsecvMillisecondValueParserRuleCall_7_0() { return cMsecvMillisecondValueParserRuleCall_7_0; }
	}
	public class YearValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.YearValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINT_LITERALParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cYEARSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//YearValue:
		//	INT_LITERAL YEARS;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LITERAL YEARS
		public Group getGroup() { return cGroup; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_0() { return cINT_LITERALParserRuleCall_0; }
		
		//YEARS
		public RuleCall getYEARSParserRuleCall_1() { return cYEARSParserRuleCall_1; }
	}
	public class MonthValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MonthValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINT_LITERALParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMONTHSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//MonthValue:
		//	INT_LITERAL MONTHS;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LITERAL MONTHS
		public Group getGroup() { return cGroup; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_0() { return cINT_LITERALParserRuleCall_0; }
		
		//MONTHS
		public RuleCall getMONTHSParserRuleCall_1() { return cMONTHSParserRuleCall_1; }
	}
	public class WeekValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.WeekValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINT_LITERALParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cWEEKSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//WeekValue:
		//	INT_LITERAL WEEKS;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LITERAL WEEKS
		public Group getGroup() { return cGroup; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_0() { return cINT_LITERALParserRuleCall_0; }
		
		//WEEKS
		public RuleCall getWEEKSParserRuleCall_1() { return cWEEKSParserRuleCall_1; }
	}
	public class DayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DayValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINT_LITERALParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cDAYSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//DayValue:
		//	INT_LITERAL DAYS;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LITERAL DAYS
		public Group getGroup() { return cGroup; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_0() { return cINT_LITERALParserRuleCall_0; }
		
		//DAYS
		public RuleCall getDAYSParserRuleCall_1() { return cDAYSParserRuleCall_1; }
	}
	public class HourValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.HourValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINT_LITERALParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cHOURSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//HourValue:
		//	INT_LITERAL HOURS;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LITERAL HOURS
		public Group getGroup() { return cGroup; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_0() { return cINT_LITERALParserRuleCall_0; }
		
		//HOURS
		public RuleCall getHOURSParserRuleCall_1() { return cHOURSParserRuleCall_1; }
	}
	public class MinuteValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MinuteValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINT_LITERALParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMINUTESParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//MinuteValue:
		//	INT_LITERAL MINUTES;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LITERAL MINUTES
		public Group getGroup() { return cGroup; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_0() { return cINT_LITERALParserRuleCall_0; }
		
		//MINUTES
		public RuleCall getMINUTESParserRuleCall_1() { return cMINUTESParserRuleCall_1; }
	}
	public class SecondValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SecondValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINT_LITERALParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cSECONDSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SecondValue:
		//	INT_LITERAL SECONDS;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LITERAL SECONDS
		public Group getGroup() { return cGroup; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_0() { return cINT_LITERALParserRuleCall_0; }
		
		//SECONDS
		public RuleCall getSECONDSParserRuleCall_1() { return cSECONDSParserRuleCall_1; }
	}
	public class MillisecondValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MillisecondValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINT_LITERALParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMILLISECONDSParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//MillisecondValue:
		//	INT_LITERAL MILLISECONDS;
		@Override public ParserRule getRule() { return rule; }
		
		//INT_LITERAL MILLISECONDS
		public Group getGroup() { return cGroup; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_0() { return cINT_LITERALParserRuleCall_0; }
		
		//MILLISECONDS
		public RuleCall getMILLISECONDSParserRuleCall_1() { return cMILLISECONDSParserRuleCall_1; }
	}
	public class SignedIntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SignedIntValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final RuleCall cINT_LITERALParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedIntValue:
		//	('-' | '+')? INT_LITERAL;
		@Override public ParserRule getRule() { return rule; }
		
		//('-' | '+')? INT_LITERAL
		public Group getGroup() { return cGroup; }
		
		//('-' | '+')?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0() { return cHyphenMinusKeyword_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }
		
		//INT_LITERAL
		public RuleCall getINT_LITERALParserRuleCall_1() { return cINT_LITERALParserRuleCall_1; }
	}
	public class STRING_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.STRING_LITERAL");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//STRING_LITERAL:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class INT_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.INT_LITERAL");
		private final RuleCall cDIGITParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INT_LITERAL:
		//	DIGIT+;
		@Override public ParserRule getRule() { return rule; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall() { return cDIGITParserRuleCall; }
	}
	public class DOUBLE_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DOUBLE_LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cDOUBLE_LITERALAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final RuleCall cDIGITParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cGroup_0_0.eContents().get(2);
		private final Keyword cFullStopKeyword_0_0_2_0 = (Keyword)cGroup_0_0_2.eContents().get(0);
		private final RuleCall cDIGITParserRuleCall_0_0_2_1 = (RuleCall)cGroup_0_0_2.eContents().get(1);
		private final Group cGroup_0_0_3 = (Group)cGroup_0_0.eContents().get(3);
		private final Assignment cEAssignment_0_0_3_0 = (Assignment)cGroup_0_0_3.eContents().get(0);
		private final RuleCall cEEParserRuleCall_0_0_3_0_0 = (RuleCall)cEAssignment_0_0_3_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_3_1 = (Alternatives)cGroup_0_0_3.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0_0_3_1_0 = (Keyword)cAlternatives_0_0_3_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0_3_1_1 = (Keyword)cAlternatives_0_0_3_1.eContents().get(1);
		private final RuleCall cDIGITParserRuleCall_0_0_3_2 = (RuleCall)cGroup_0_0_3.eContents().get(2);
		private final Assignment cDAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cDDParserRuleCall_0_0_4_0 = (RuleCall)cDAssignment_0_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDOUBLE_LITERALAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cDIGITParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cFullStopKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cDIGITParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Assignment cEAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cEEParserRuleCall_1_3_0 = (RuleCall)cEAssignment_1_3.eContents().get(0);
		private final Alternatives cAlternatives_1_4 = (Alternatives)cGroup_1.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_1_4_0 = (Keyword)cAlternatives_1_4.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_4_1 = (Keyword)cAlternatives_1_4.eContents().get(1);
		private final RuleCall cDIGITParserRuleCall_1_5 = (RuleCall)cGroup_1.eContents().get(5);
		private final Assignment cDAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cDDParserRuleCall_1_6_0 = (RuleCall)cDAssignment_1_6.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cGroup_2.eContents().get(0);
		private final Action cDOUBLE_LITERALAction_2_0_0 = (Action)cGroup_2_0.eContents().get(0);
		private final RuleCall cDIGITParserRuleCall_2_0_1 = (RuleCall)cGroup_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final RuleCall cDIGITParserRuleCall_2_0_3 = (RuleCall)cGroup_2_0.eContents().get(3);
		private final Group cGroup_2_0_4 = (Group)cGroup_2_0.eContents().get(4);
		private final Assignment cEAssignment_2_0_4_0 = (Assignment)cGroup_2_0_4.eContents().get(0);
		private final RuleCall cEEParserRuleCall_2_0_4_0_0 = (RuleCall)cEAssignment_2_0_4_0.eContents().get(0);
		private final Alternatives cAlternatives_2_0_4_1 = (Alternatives)cGroup_2_0_4.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2_0_4_1_0 = (Keyword)cAlternatives_2_0_4_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_2_0_4_1_1 = (Keyword)cAlternatives_2_0_4_1.eContents().get(1);
		private final RuleCall cDIGITParserRuleCall_2_0_4_2 = (RuleCall)cGroup_2_0_4.eContents().get(2);
		private final Assignment cDAssignment_2_0_5 = (Assignment)cGroup_2_0.eContents().get(5);
		private final RuleCall cDDParserRuleCall_2_0_5_0 = (RuleCall)cDAssignment_2_0_5.eContents().get(0);
		
		//DOUBLE_LITERAL:
		//	=> ({DOUBLE_LITERAL} DIGIT+ ('.' DIGIT*)? (e=E ('-' | '+')? DIGIT+)? d=D) | {DOUBLE_LITERAL} DIGIT+ ('.' DIGIT*)? e=E
		//	('-' | '+')? DIGIT+ d=D?
		//	| => ({DOUBLE_LITERAL} DIGIT* '.' DIGIT+ (e=E ('-' | '+')? DIGIT+)? d=D?);
		@Override public ParserRule getRule() { return rule; }
		
		//=> ({DOUBLE_LITERAL} DIGIT+ ('.' DIGIT*)? (e=E ('-' | '+')? DIGIT+)? d=D) | {DOUBLE_LITERAL} DIGIT+ ('.' DIGIT*)? e=E
		//('-' | '+')? DIGIT+ d=D? | => ({DOUBLE_LITERAL} DIGIT* '.' DIGIT+ (e=E ('-' | '+')? DIGIT+)? d=D?)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ({DOUBLE_LITERAL} DIGIT+ ('.' DIGIT*)? (e=E ('-' | '+')? DIGIT+)? d=D)
		public Group getGroup_0() { return cGroup_0; }
		
		//{DOUBLE_LITERAL} DIGIT+ ('.' DIGIT*)? (e=E ('-' | '+')? DIGIT+)? d=D
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{DOUBLE_LITERAL}
		public Action getDOUBLE_LITERALAction_0_0_0() { return cDOUBLE_LITERALAction_0_0_0; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall_0_0_1() { return cDIGITParserRuleCall_0_0_1; }
		
		//('.' DIGIT*)?
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0_2_0() { return cFullStopKeyword_0_0_2_0; }
		
		//DIGIT*
		public RuleCall getDIGITParserRuleCall_0_0_2_1() { return cDIGITParserRuleCall_0_0_2_1; }
		
		//(e=E ('-' | '+')? DIGIT+)?
		public Group getGroup_0_0_3() { return cGroup_0_0_3; }
		
		//e=E
		public Assignment getEAssignment_0_0_3_0() { return cEAssignment_0_0_3_0; }
		
		//E
		public RuleCall getEEParserRuleCall_0_0_3_0_0() { return cEEParserRuleCall_0_0_3_0_0; }
		
		//('-' | '+')?
		public Alternatives getAlternatives_0_0_3_1() { return cAlternatives_0_0_3_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0_3_1_0() { return cHyphenMinusKeyword_0_0_3_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0_3_1_1() { return cPlusSignKeyword_0_0_3_1_1; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall_0_0_3_2() { return cDIGITParserRuleCall_0_0_3_2; }
		
		//d=D
		public Assignment getDAssignment_0_0_4() { return cDAssignment_0_0_4; }
		
		//D
		public RuleCall getDDParserRuleCall_0_0_4_0() { return cDDParserRuleCall_0_0_4_0; }
		
		//{DOUBLE_LITERAL} DIGIT+ ('.' DIGIT*)? e=E ('-' | '+')? DIGIT+ d=D?
		public Group getGroup_1() { return cGroup_1; }
		
		//{DOUBLE_LITERAL}
		public Action getDOUBLE_LITERALAction_1_0() { return cDOUBLE_LITERALAction_1_0; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall_1_1() { return cDIGITParserRuleCall_1_1; }
		
		//('.' DIGIT*)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2_0() { return cFullStopKeyword_1_2_0; }
		
		//DIGIT*
		public RuleCall getDIGITParserRuleCall_1_2_1() { return cDIGITParserRuleCall_1_2_1; }
		
		//e=E
		public Assignment getEAssignment_1_3() { return cEAssignment_1_3; }
		
		//E
		public RuleCall getEEParserRuleCall_1_3_0() { return cEEParserRuleCall_1_3_0; }
		
		//('-' | '+')?
		public Alternatives getAlternatives_1_4() { return cAlternatives_1_4; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_4_0() { return cHyphenMinusKeyword_1_4_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_4_1() { return cPlusSignKeyword_1_4_1; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall_1_5() { return cDIGITParserRuleCall_1_5; }
		
		//d=D?
		public Assignment getDAssignment_1_6() { return cDAssignment_1_6; }
		
		//D
		public RuleCall getDDParserRuleCall_1_6_0() { return cDDParserRuleCall_1_6_0; }
		
		//=> ({DOUBLE_LITERAL} DIGIT* '.' DIGIT+ (e=E ('-' | '+')? DIGIT+)? d=D?)
		public Group getGroup_2() { return cGroup_2; }
		
		//{DOUBLE_LITERAL} DIGIT* '.' DIGIT+ (e=E ('-' | '+')? DIGIT+)? d=D?
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//{DOUBLE_LITERAL}
		public Action getDOUBLE_LITERALAction_2_0_0() { return cDOUBLE_LITERALAction_2_0_0; }
		
		//DIGIT*
		public RuleCall getDIGITParserRuleCall_2_0_1() { return cDIGITParserRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0_2() { return cFullStopKeyword_2_0_2; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall_2_0_3() { return cDIGITParserRuleCall_2_0_3; }
		
		//(e=E ('-' | '+')? DIGIT+)?
		public Group getGroup_2_0_4() { return cGroup_2_0_4; }
		
		//e=E
		public Assignment getEAssignment_2_0_4_0() { return cEAssignment_2_0_4_0; }
		
		//E
		public RuleCall getEEParserRuleCall_2_0_4_0_0() { return cEEParserRuleCall_2_0_4_0_0; }
		
		//('-' | '+')?
		public Alternatives getAlternatives_2_0_4_1() { return cAlternatives_2_0_4_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_2_0_4_1_0() { return cHyphenMinusKeyword_2_0_4_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_2_0_4_1_1() { return cPlusSignKeyword_2_0_4_1_1; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall_2_0_4_2() { return cDIGITParserRuleCall_2_0_4_2; }
		
		//d=D?
		public Assignment getDAssignment_2_0_5() { return cDAssignment_2_0_5; }
		
		//D
		public RuleCall getDDParserRuleCall_2_0_5_0() { return cDDParserRuleCall_2_0_5_0; }
	}
	public class FLOAT_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FLOAT_LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Action cFLOAT_LITERALAction_0_0_0 = (Action)cGroup_0_0.eContents().get(0);
		private final RuleCall cDIGITParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_0_2 = (Group)cGroup_0_0.eContents().get(2);
		private final Keyword cFullStopKeyword_0_0_2_0 = (Keyword)cGroup_0_0_2.eContents().get(0);
		private final RuleCall cDIGITParserRuleCall_0_0_2_1 = (RuleCall)cGroup_0_0_2.eContents().get(1);
		private final Group cGroup_0_0_3 = (Group)cGroup_0_0.eContents().get(3);
		private final Assignment cEAssignment_0_0_3_0 = (Assignment)cGroup_0_0_3.eContents().get(0);
		private final RuleCall cEEParserRuleCall_0_0_3_0_0 = (RuleCall)cEAssignment_0_0_3_0.eContents().get(0);
		private final Alternatives cAlternatives_0_0_3_1 = (Alternatives)cGroup_0_0_3.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0_0_3_1_0 = (Keyword)cAlternatives_0_0_3_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_0_3_1_1 = (Keyword)cAlternatives_0_0_3_1.eContents().get(1);
		private final RuleCall cDIGITParserRuleCall_0_0_3_2 = (RuleCall)cGroup_0_0_3.eContents().get(2);
		private final Assignment cFAssignment_0_0_4 = (Assignment)cGroup_0_0.eContents().get(4);
		private final RuleCall cFFParserRuleCall_0_0_4_0 = (RuleCall)cFAssignment_0_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cFLOAT_LITERALAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cDIGITParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cDIGITParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Assignment cEAssignment_1_4_0 = (Assignment)cGroup_1_4.eContents().get(0);
		private final RuleCall cEEParserRuleCall_1_4_0_0 = (RuleCall)cEAssignment_1_4_0.eContents().get(0);
		private final Alternatives cAlternatives_1_4_1 = (Alternatives)cGroup_1_4.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_4_1_0 = (Keyword)cAlternatives_1_4_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_4_1_1 = (Keyword)cAlternatives_1_4_1.eContents().get(1);
		private final RuleCall cDIGITParserRuleCall_1_4_2 = (RuleCall)cGroup_1_4.eContents().get(2);
		private final Assignment cFAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cFFParserRuleCall_1_5_0 = (RuleCall)cFAssignment_1_5.eContents().get(0);
		
		//FLOAT_LITERAL:
		//	=> ({FLOAT_LITERAL} DIGIT+ ('.' DIGIT*)? (e=E ('-' | '+')? DIGIT+)? f=F) | {FLOAT_LITERAL} DIGIT* '.' DIGIT+ (e=E
		//	('-' | '+')? DIGIT+)? f=F;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ({FLOAT_LITERAL} DIGIT+ ('.' DIGIT*)? (e=E ('-' | '+')? DIGIT+)? f=F) | {FLOAT_LITERAL} DIGIT* '.' DIGIT+ (e=E ('-' |
		//'+')? DIGIT+)? f=F
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ({FLOAT_LITERAL} DIGIT+ ('.' DIGIT*)? (e=E ('-' | '+')? DIGIT+)? f=F)
		public Group getGroup_0() { return cGroup_0; }
		
		//{FLOAT_LITERAL} DIGIT+ ('.' DIGIT*)? (e=E ('-' | '+')? DIGIT+)? f=F
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//{FLOAT_LITERAL}
		public Action getFLOAT_LITERALAction_0_0_0() { return cFLOAT_LITERALAction_0_0_0; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall_0_0_1() { return cDIGITParserRuleCall_0_0_1; }
		
		//('.' DIGIT*)?
		public Group getGroup_0_0_2() { return cGroup_0_0_2; }
		
		//'.'
		public Keyword getFullStopKeyword_0_0_2_0() { return cFullStopKeyword_0_0_2_0; }
		
		//DIGIT*
		public RuleCall getDIGITParserRuleCall_0_0_2_1() { return cDIGITParserRuleCall_0_0_2_1; }
		
		//(e=E ('-' | '+')? DIGIT+)?
		public Group getGroup_0_0_3() { return cGroup_0_0_3; }
		
		//e=E
		public Assignment getEAssignment_0_0_3_0() { return cEAssignment_0_0_3_0; }
		
		//E
		public RuleCall getEEParserRuleCall_0_0_3_0_0() { return cEEParserRuleCall_0_0_3_0_0; }
		
		//('-' | '+')?
		public Alternatives getAlternatives_0_0_3_1() { return cAlternatives_0_0_3_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_0_3_1_0() { return cHyphenMinusKeyword_0_0_3_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_0_3_1_1() { return cPlusSignKeyword_0_0_3_1_1; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall_0_0_3_2() { return cDIGITParserRuleCall_0_0_3_2; }
		
		//f=F
		public Assignment getFAssignment_0_0_4() { return cFAssignment_0_0_4; }
		
		//F
		public RuleCall getFFParserRuleCall_0_0_4_0() { return cFFParserRuleCall_0_0_4_0; }
		
		//{FLOAT_LITERAL} DIGIT* '.' DIGIT+ (e=E ('-' | '+')? DIGIT+)? f=F
		public Group getGroup_1() { return cGroup_1; }
		
		//{FLOAT_LITERAL}
		public Action getFLOAT_LITERALAction_1_0() { return cFLOAT_LITERALAction_1_0; }
		
		//DIGIT*
		public RuleCall getDIGITParserRuleCall_1_1() { return cDIGITParserRuleCall_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_2() { return cFullStopKeyword_1_2; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall_1_3() { return cDIGITParserRuleCall_1_3; }
		
		//(e=E ('-' | '+')? DIGIT+)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//e=E
		public Assignment getEAssignment_1_4_0() { return cEAssignment_1_4_0; }
		
		//E
		public RuleCall getEEParserRuleCall_1_4_0_0() { return cEEParserRuleCall_1_4_0_0; }
		
		//('-' | '+')?
		public Alternatives getAlternatives_1_4_1() { return cAlternatives_1_4_1; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_4_1_0() { return cHyphenMinusKeyword_1_4_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_4_1_1() { return cPlusSignKeyword_1_4_1_1; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall_1_4_2() { return cDIGITParserRuleCall_1_4_2; }
		
		//f=F
		public Assignment getFAssignment_1_5() { return cFAssignment_1_5; }
		
		//F
		public RuleCall getFFParserRuleCall_1_5_0() { return cFFParserRuleCall_1_5_0; }
	}
	public class LONG_LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LONG_LITERAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDIGITParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cLAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLLParserRuleCall_1_0 = (RuleCall)cLAssignment_1.eContents().get(0);
		
		//LONG_LITERAL:
		//	DIGIT+ l=L;
		@Override public ParserRule getRule() { return rule; }
		
		//DIGIT+ l=L
		public Group getGroup() { return cGroup; }
		
		//DIGIT+
		public RuleCall getDIGITParserRuleCall_0() { return cDIGITParserRuleCall_0; }
		
		//l=L
		public Assignment getLAssignment_1() { return cLAssignment_1; }
		
		//L
		public RuleCall getLLParserRuleCall_1_0() { return cLLParserRuleCall_1_0; }
	}
	public class DIGITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DIGIT");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//fragment DIGIT:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class KeywordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.Keyword");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cKeywordAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final RuleCall cSTREAMParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cKeywordAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cDEFINEParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cKeywordAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cFROMParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cKeywordAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final RuleCall cSELECTParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cKeywordAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cAAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAASParserRuleCall_4_1_0 = (RuleCall)cAAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cKeywordAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cINSERTParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cKeywordAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final RuleCall cINTOParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cKeywordAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final RuleCall cALLParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cKeywordAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final RuleCall cEVENTSParserRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cKeywordAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final RuleCall cTABLEParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cKeywordAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final RuleCall cWINDOWParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cKeywordAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final RuleCall cOUTPUTParserRuleCall_11_1 = (RuleCall)cGroup_11.eContents().get(1);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cKeywordAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final RuleCall cRAWParserRuleCall_12_1 = (RuleCall)cGroup_12.eContents().get(1);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cKeywordAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final RuleCall cEXPIREDParserRuleCall_13_1 = (RuleCall)cGroup_13.eContents().get(1);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cKeywordAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final RuleCall cCURRENTParserRuleCall_14_1 = (RuleCall)cGroup_14.eContents().get(1);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cKeywordAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final RuleCall cRETURNParserRuleCall_15_1 = (RuleCall)cGroup_15.eContents().get(1);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Action cKeywordAction_16_0 = (Action)cGroup_16.eContents().get(0);
		private final RuleCall cPARTITIONParserRuleCall_16_1 = (RuleCall)cGroup_16.eContents().get(1);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Action cKeywordAction_17_0 = (Action)cGroup_17.eContents().get(0);
		private final Assignment cEveryAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final RuleCall cEveryEVERYParserRuleCall_17_1_0 = (RuleCall)cEveryAssignment_17_1.eContents().get(0);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Action cKeywordAction_18_0 = (Action)cGroup_18.eContents().get(0);
		private final Assignment cUniAssignment_18_1 = (Assignment)cGroup_18.eContents().get(1);
		private final RuleCall cUniUNIDIRECTIONALParserRuleCall_18_1_0 = (RuleCall)cUniAssignment_18_1.eContents().get(0);
		private final Group cGroup_19 = (Group)cAlternatives.eContents().get(19);
		private final Action cKeywordAction_19_0 = (Action)cGroup_19.eContents().get(0);
		private final Assignment cOnAssignment_19_1 = (Assignment)cGroup_19.eContents().get(1);
		private final RuleCall cOnONParserRuleCall_19_1_0 = (RuleCall)cOnAssignment_19_1.eContents().get(0);
		private final Group cGroup_20 = (Group)cAlternatives.eContents().get(20);
		private final Action cKeywordAction_20_0 = (Action)cGroup_20.eContents().get(0);
		private final RuleCall cWITHINParserRuleCall_20_1 = (RuleCall)cGroup_20.eContents().get(1);
		private final Group cGroup_21 = (Group)cAlternatives.eContents().get(21);
		private final Action cKeywordAction_21_0 = (Action)cGroup_21.eContents().get(0);
		private final RuleCall cLEFTParserRuleCall_21_1 = (RuleCall)cGroup_21.eContents().get(1);
		private final Group cGroup_22 = (Group)cAlternatives.eContents().get(22);
		private final Action cKeywordAction_22_0 = (Action)cGroup_22.eContents().get(0);
		private final RuleCall cRIGHTParserRuleCall_22_1 = (RuleCall)cGroup_22.eContents().get(1);
		private final Group cGroup_23 = (Group)cAlternatives.eContents().get(23);
		private final Action cKeywordAction_23_0 = (Action)cGroup_23.eContents().get(0);
		private final RuleCall cFULLParserRuleCall_23_1 = (RuleCall)cGroup_23.eContents().get(1);
		private final Group cGroup_24 = (Group)cAlternatives.eContents().get(24);
		private final Action cKeywordAction_24_0 = (Action)cGroup_24.eContents().get(0);
		private final RuleCall cJOINParserRuleCall_24_1 = (RuleCall)cGroup_24.eContents().get(1);
		private final Group cGroup_25 = (Group)cAlternatives.eContents().get(25);
		private final Action cKeywordAction_25_0 = (Action)cGroup_25.eContents().get(0);
		private final RuleCall cOUTERParserRuleCall_25_1 = (RuleCall)cGroup_25.eContents().get(1);
		private final Group cGroup_26 = (Group)cAlternatives.eContents().get(26);
		private final Action cKeywordAction_26_0 = (Action)cGroup_26.eContents().get(0);
		private final RuleCall cINNERParserRuleCall_26_1 = (RuleCall)cGroup_26.eContents().get(1);
		private final Group cGroup_27 = (Group)cAlternatives.eContents().get(27);
		private final Action cKeywordAction_27_0 = (Action)cGroup_27.eContents().get(0);
		private final RuleCall cYEARSParserRuleCall_27_1 = (RuleCall)cGroup_27.eContents().get(1);
		private final Group cGroup_28 = (Group)cAlternatives.eContents().get(28);
		private final Action cKeywordAction_28_0 = (Action)cGroup_28.eContents().get(0);
		private final RuleCall cMONTHSParserRuleCall_28_1 = (RuleCall)cGroup_28.eContents().get(1);
		private final Group cGroup_29 = (Group)cAlternatives.eContents().get(29);
		private final Action cKeywordAction_29_0 = (Action)cGroup_29.eContents().get(0);
		private final RuleCall cWEEKSParserRuleCall_29_1 = (RuleCall)cGroup_29.eContents().get(1);
		private final Group cGroup_30 = (Group)cAlternatives.eContents().get(30);
		private final Action cKeywordAction_30_0 = (Action)cGroup_30.eContents().get(0);
		private final RuleCall cDAYSParserRuleCall_30_1 = (RuleCall)cGroup_30.eContents().get(1);
		private final Group cGroup_31 = (Group)cAlternatives.eContents().get(31);
		private final Action cKeywordAction_31_0 = (Action)cGroup_31.eContents().get(0);
		private final RuleCall cHOURSParserRuleCall_31_1 = (RuleCall)cGroup_31.eContents().get(1);
		private final Group cGroup_32 = (Group)cAlternatives.eContents().get(32);
		private final Action cKeywordAction_32_0 = (Action)cGroup_32.eContents().get(0);
		private final RuleCall cMINUTESParserRuleCall_32_1 = (RuleCall)cGroup_32.eContents().get(1);
		private final Group cGroup_33 = (Group)cAlternatives.eContents().get(33);
		private final Action cKeywordAction_33_0 = (Action)cGroup_33.eContents().get(0);
		private final RuleCall cSECONDSParserRuleCall_33_1 = (RuleCall)cGroup_33.eContents().get(1);
		private final Group cGroup_34 = (Group)cAlternatives.eContents().get(34);
		private final Action cKeywordAction_34_0 = (Action)cGroup_34.eContents().get(0);
		private final RuleCall cMILLISECONDSParserRuleCall_34_1 = (RuleCall)cGroup_34.eContents().get(1);
		private final Group cGroup_35 = (Group)cAlternatives.eContents().get(35);
		private final Action cKeywordAction_35_0 = (Action)cGroup_35.eContents().get(0);
		private final RuleCall cSTRINGSParserRuleCall_35_1 = (RuleCall)cGroup_35.eContents().get(1);
		private final Group cGroup_36 = (Group)cAlternatives.eContents().get(36);
		private final Action cKeywordAction_36_0 = (Action)cGroup_36.eContents().get(0);
		private final RuleCall cINTSParserRuleCall_36_1 = (RuleCall)cGroup_36.eContents().get(1);
		private final Group cGroup_37 = (Group)cAlternatives.eContents().get(37);
		private final Action cKeywordAction_37_0 = (Action)cGroup_37.eContents().get(0);
		private final RuleCall cLONGParserRuleCall_37_1 = (RuleCall)cGroup_37.eContents().get(1);
		private final Group cGroup_38 = (Group)cAlternatives.eContents().get(38);
		private final Action cKeywordAction_38_0 = (Action)cGroup_38.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_38_1 = (RuleCall)cGroup_38.eContents().get(1);
		private final Group cGroup_39 = (Group)cAlternatives.eContents().get(39);
		private final Action cKeywordAction_39_0 = (Action)cGroup_39.eContents().get(0);
		private final RuleCall cDOUBLEParserRuleCall_39_1 = (RuleCall)cGroup_39.eContents().get(1);
		private final Group cGroup_40 = (Group)cAlternatives.eContents().get(40);
		private final Action cKeywordAction_40_0 = (Action)cGroup_40.eContents().get(0);
		private final RuleCall cBOOLParserRuleCall_40_1 = (RuleCall)cGroup_40.eContents().get(1);
		private final Group cGroup_41 = (Group)cAlternatives.eContents().get(41);
		private final Action cKeywordAction_41_0 = (Action)cGroup_41.eContents().get(0);
		private final RuleCall cOBJECTParserRuleCall_41_1 = (RuleCall)cGroup_41.eContents().get(1);
		private final Group cGroup_42 = (Group)cAlternatives.eContents().get(42);
		private final Action cKeywordAction_42_0 = (Action)cGroup_42.eContents().get(0);
		private final Assignment cAndAssignment_42_1 = (Assignment)cGroup_42.eContents().get(1);
		private final RuleCall cAndANDParserRuleCall_42_1_0 = (RuleCall)cAndAssignment_42_1.eContents().get(0);
		private final Group cGroup_43 = (Group)cAlternatives.eContents().get(43);
		private final Action cKeywordAction_43_0 = (Action)cGroup_43.eContents().get(0);
		private final Assignment cOrAssignment_43_1 = (Assignment)cGroup_43.eContents().get(1);
		private final RuleCall cOrORParserRuleCall_43_1_0 = (RuleCall)cOrAssignment_43_1.eContents().get(0);
		private final Group cGroup_44 = (Group)cAlternatives.eContents().get(44);
		private final Action cKeywordAction_44_0 = (Action)cGroup_44.eContents().get(0);
		private final Assignment cNotAssignment_44_1 = (Assignment)cGroup_44.eContents().get(1);
		private final RuleCall cNotNOTParserRuleCall_44_1_0 = (RuleCall)cNotAssignment_44_1.eContents().get(0);
		private final Group cGroup_45 = (Group)cAlternatives.eContents().get(45);
		private final Action cKeywordAction_45_0 = (Action)cGroup_45.eContents().get(0);
		private final RuleCall cISParserRuleCall_45_1 = (RuleCall)cGroup_45.eContents().get(1);
		private final Group cGroup_46 = (Group)cAlternatives.eContents().get(46);
		private final Action cKeywordAction_46_0 = (Action)cGroup_46.eContents().get(0);
		private final RuleCall cNULLParserRuleCall_46_1 = (RuleCall)cGroup_46.eContents().get(1);
		private final Group cGroup_47 = (Group)cAlternatives.eContents().get(47);
		private final Action cKeywordAction_47_0 = (Action)cGroup_47.eContents().get(0);
		private final RuleCall cSNAPSHOTParserRuleCall_47_1 = (RuleCall)cGroup_47.eContents().get(1);
		private final Group cGroup_48 = (Group)cAlternatives.eContents().get(48);
		private final Action cKeywordAction_48_0 = (Action)cGroup_48.eContents().get(0);
		private final RuleCall cLASTParserRuleCall_48_1 = (RuleCall)cGroup_48.eContents().get(1);
		private final Group cGroup_49 = (Group)cAlternatives.eContents().get(49);
		private final Action cKeywordAction_49_0 = (Action)cGroup_49.eContents().get(0);
		private final RuleCall cFIRSTParserRuleCall_49_1 = (RuleCall)cGroup_49.eContents().get(1);
		private final Group cGroup_50 = (Group)cAlternatives.eContents().get(50);
		private final Action cKeywordAction_50_0 = (Action)cGroup_50.eContents().get(0);
		private final RuleCall cGROUPParserRuleCall_50_1 = (RuleCall)cGroup_50.eContents().get(1);
		private final Group cGroup_51 = (Group)cAlternatives.eContents().get(51);
		private final Action cKeywordAction_51_0 = (Action)cGroup_51.eContents().get(0);
		private final RuleCall cBYParserRuleCall_51_1 = (RuleCall)cGroup_51.eContents().get(1);
		private final Group cGroup_52 = (Group)cAlternatives.eContents().get(52);
		private final Action cKeywordAction_52_0 = (Action)cGroup_52.eContents().get(0);
		private final RuleCall cHAVINGParserRuleCall_52_1 = (RuleCall)cGroup_52.eContents().get(1);
		private final Group cGroup_53 = (Group)cAlternatives.eContents().get(53);
		private final Action cKeywordAction_53_0 = (Action)cGroup_53.eContents().get(0);
		private final RuleCall cWITHParserRuleCall_53_1 = (RuleCall)cGroup_53.eContents().get(1);
		private final Group cGroup_54 = (Group)cAlternatives.eContents().get(54);
		private final Action cKeywordAction_54_0 = (Action)cGroup_54.eContents().get(0);
		private final Assignment cOfAssignment_54_1 = (Assignment)cGroup_54.eContents().get(1);
		private final RuleCall cOfOFParserRuleCall_54_1_0 = (RuleCall)cOfAssignment_54_1.eContents().get(0);
		private final Group cGroup_55 = (Group)cAlternatives.eContents().get(55);
		private final Action cKeywordAction_55_0 = (Action)cGroup_55.eContents().get(0);
		private final RuleCall cBEGINParserRuleCall_55_1 = (RuleCall)cGroup_55.eContents().get(1);
		private final Group cGroup_56 = (Group)cAlternatives.eContents().get(56);
		private final Action cKeywordAction_56_0 = (Action)cGroup_56.eContents().get(0);
		private final RuleCall cENDParserRuleCall_56_1 = (RuleCall)cGroup_56.eContents().get(1);
		private final Group cGroup_57 = (Group)cAlternatives.eContents().get(57);
		private final Action cKeywordAction_57_0 = (Action)cGroup_57.eContents().get(0);
		private final RuleCall cDELETEParserRuleCall_57_1 = (RuleCall)cGroup_57.eContents().get(1);
		private final Group cGroup_58 = (Group)cAlternatives.eContents().get(58);
		private final Action cKeywordAction_58_0 = (Action)cGroup_58.eContents().get(0);
		private final RuleCall cFORParserRuleCall_58_1 = (RuleCall)cGroup_58.eContents().get(1);
		private final Group cGroup_59 = (Group)cAlternatives.eContents().get(59);
		private final Action cKeywordAction_59_0 = (Action)cGroup_59.eContents().get(0);
		private final RuleCall cTRUEParserRuleCall_59_1 = (RuleCall)cGroup_59.eContents().get(1);
		private final Group cGroup_60 = (Group)cAlternatives.eContents().get(60);
		private final Action cKeywordAction_60_0 = (Action)cGroup_60.eContents().get(0);
		private final RuleCall cFALSEParserRuleCall_60_1 = (RuleCall)cGroup_60.eContents().get(1);
		private final Group cGroup_61 = (Group)cAlternatives.eContents().get(61);
		private final Action cKeywordAction_61_0 = (Action)cGroup_61.eContents().get(0);
		private final RuleCall cUPDATEParserRuleCall_61_1 = (RuleCall)cGroup_61.eContents().get(1);
		
		//Keyword:
		//	{Keyword} STREAM
		//	| {Keyword} DEFINE
		//	| {Keyword} FROM
		//	| {Keyword} SELECT
		//	| {Keyword} a=AS
		//	| {Keyword} INSERT
		//	| {Keyword} INTO
		//	| {Keyword} ALL
		//	| {Keyword} EVENTS
		//	| {Keyword} TABLE
		//	| {Keyword} WINDOW
		//	| {Keyword} OUTPUT
		//	| {Keyword} RAW
		//	| {Keyword} EXPIRED
		//	| {Keyword} CURRENT
		//	| {Keyword} RETURN
		//	| {Keyword} PARTITION
		//	| {Keyword} every=EVERY
		//	| {Keyword} uni=UNIDIRECTIONAL
		//	| {Keyword} on=ON
		//	| {Keyword} WITHIN
		//	| {Keyword} LEFT
		//	| {Keyword} RIGHT
		//	| {Keyword} FULL
		//	| {Keyword} JOIN
		//	| {Keyword} OUTER
		//	| {Keyword} INNER
		//	| {Keyword} YEARS
		//	| {Keyword} MONTHS
		//	| {Keyword} WEEKS
		//	| {Keyword} DAYS
		//	| {Keyword} HOURS
		//	| {Keyword} MINUTES
		//	| {Keyword} SECONDS
		//	| {Keyword} MILLISECONDS
		//	| {Keyword} STRINGS
		//	| {Keyword} INTS
		//	| {Keyword} LONG
		//	| {Keyword} FLOAT
		//	| {Keyword} DOUBLE
		//	| {Keyword} BOOL
		//	| {Keyword} OBJECT
		//	| {Keyword} and=AND
		//	| {Keyword} or=OR
		//	| {Keyword} not=NOT
		//	| {Keyword} IS
		//	| {Keyword} NULL
		//	| {Keyword} SNAPSHOT
		//	| {Keyword} LAST
		//	| {Keyword} FIRST
		//	| {Keyword} GROUP
		//	| {Keyword} BY
		//	| {Keyword} HAVING
		//	| {Keyword} WITH
		//	| {Keyword} of=OF
		//	| {Keyword} BEGIN
		//	| {Keyword} END
		//	| {Keyword} DELETE
		//	| {Keyword} FOR
		//	| {Keyword} TRUE
		//	| {Keyword} FALSE
		//	| {Keyword} UPDATE;
		@Override public ParserRule getRule() { return rule; }
		
		//{Keyword} STREAM | {Keyword} DEFINE | {Keyword} FROM | {Keyword} SELECT | {Keyword} a=AS | {Keyword} INSERT | {Keyword}
		//INTO | {Keyword} ALL | {Keyword} EVENTS | {Keyword} TABLE | {Keyword} WINDOW | {Keyword} OUTPUT | {Keyword} RAW |
		//{Keyword} EXPIRED | {Keyword} CURRENT | {Keyword} RETURN | {Keyword} PARTITION | {Keyword} every=EVERY | {Keyword}
		//uni=UNIDIRECTIONAL | {Keyword} on=ON | {Keyword} WITHIN | {Keyword} LEFT | {Keyword} RIGHT | {Keyword} FULL |
		//{Keyword} JOIN | {Keyword} OUTER | {Keyword} INNER | {Keyword} YEARS | {Keyword} MONTHS | {Keyword} WEEKS | {Keyword}
		//DAYS | {Keyword} HOURS | {Keyword} MINUTES | {Keyword} SECONDS | {Keyword} MILLISECONDS | {Keyword} STRINGS |
		//{Keyword} INTS | {Keyword} LONG | {Keyword} FLOAT | {Keyword} DOUBLE | {Keyword} BOOL | {Keyword} OBJECT | {Keyword}
		//and=AND | {Keyword} or=OR | {Keyword} not=NOT | {Keyword} IS | {Keyword} NULL | {Keyword} SNAPSHOT | {Keyword} LAST |
		//{Keyword} FIRST | {Keyword} GROUP | {Keyword} BY | {Keyword} HAVING | {Keyword} WITH | {Keyword} of=OF | {Keyword}
		//BEGIN | {Keyword} END | {Keyword} DELETE | {Keyword} FOR | {Keyword} TRUE | {Keyword} FALSE | {Keyword} UPDATE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Keyword} STREAM
		public Group getGroup_0() { return cGroup_0; }
		
		//{Keyword}
		public Action getKeywordAction_0_0() { return cKeywordAction_0_0; }
		
		//STREAM
		public RuleCall getSTREAMParserRuleCall_0_1() { return cSTREAMParserRuleCall_0_1; }
		
		//{Keyword} DEFINE
		public Group getGroup_1() { return cGroup_1; }
		
		//{Keyword}
		public Action getKeywordAction_1_0() { return cKeywordAction_1_0; }
		
		//DEFINE
		public RuleCall getDEFINEParserRuleCall_1_1() { return cDEFINEParserRuleCall_1_1; }
		
		//{Keyword} FROM
		public Group getGroup_2() { return cGroup_2; }
		
		//{Keyword}
		public Action getKeywordAction_2_0() { return cKeywordAction_2_0; }
		
		//FROM
		public RuleCall getFROMParserRuleCall_2_1() { return cFROMParserRuleCall_2_1; }
		
		//{Keyword} SELECT
		public Group getGroup_3() { return cGroup_3; }
		
		//{Keyword}
		public Action getKeywordAction_3_0() { return cKeywordAction_3_0; }
		
		//SELECT
		public RuleCall getSELECTParserRuleCall_3_1() { return cSELECTParserRuleCall_3_1; }
		
		//{Keyword} a=AS
		public Group getGroup_4() { return cGroup_4; }
		
		//{Keyword}
		public Action getKeywordAction_4_0() { return cKeywordAction_4_0; }
		
		//a=AS
		public Assignment getAAssignment_4_1() { return cAAssignment_4_1; }
		
		//AS
		public RuleCall getAASParserRuleCall_4_1_0() { return cAASParserRuleCall_4_1_0; }
		
		//{Keyword} INSERT
		public Group getGroup_5() { return cGroup_5; }
		
		//{Keyword}
		public Action getKeywordAction_5_0() { return cKeywordAction_5_0; }
		
		//INSERT
		public RuleCall getINSERTParserRuleCall_5_1() { return cINSERTParserRuleCall_5_1; }
		
		//{Keyword} INTO
		public Group getGroup_6() { return cGroup_6; }
		
		//{Keyword}
		public Action getKeywordAction_6_0() { return cKeywordAction_6_0; }
		
		//INTO
		public RuleCall getINTOParserRuleCall_6_1() { return cINTOParserRuleCall_6_1; }
		
		//{Keyword} ALL
		public Group getGroup_7() { return cGroup_7; }
		
		//{Keyword}
		public Action getKeywordAction_7_0() { return cKeywordAction_7_0; }
		
		//ALL
		public RuleCall getALLParserRuleCall_7_1() { return cALLParserRuleCall_7_1; }
		
		//{Keyword} EVENTS
		public Group getGroup_8() { return cGroup_8; }
		
		//{Keyword}
		public Action getKeywordAction_8_0() { return cKeywordAction_8_0; }
		
		//EVENTS
		public RuleCall getEVENTSParserRuleCall_8_1() { return cEVENTSParserRuleCall_8_1; }
		
		//{Keyword} TABLE
		public Group getGroup_9() { return cGroup_9; }
		
		//{Keyword}
		public Action getKeywordAction_9_0() { return cKeywordAction_9_0; }
		
		//TABLE
		public RuleCall getTABLEParserRuleCall_9_1() { return cTABLEParserRuleCall_9_1; }
		
		//{Keyword} WINDOW
		public Group getGroup_10() { return cGroup_10; }
		
		//{Keyword}
		public Action getKeywordAction_10_0() { return cKeywordAction_10_0; }
		
		//WINDOW
		public RuleCall getWINDOWParserRuleCall_10_1() { return cWINDOWParserRuleCall_10_1; }
		
		//{Keyword} OUTPUT
		public Group getGroup_11() { return cGroup_11; }
		
		//{Keyword}
		public Action getKeywordAction_11_0() { return cKeywordAction_11_0; }
		
		//OUTPUT
		public RuleCall getOUTPUTParserRuleCall_11_1() { return cOUTPUTParserRuleCall_11_1; }
		
		//{Keyword} RAW
		public Group getGroup_12() { return cGroup_12; }
		
		//{Keyword}
		public Action getKeywordAction_12_0() { return cKeywordAction_12_0; }
		
		//RAW
		public RuleCall getRAWParserRuleCall_12_1() { return cRAWParserRuleCall_12_1; }
		
		//{Keyword} EXPIRED
		public Group getGroup_13() { return cGroup_13; }
		
		//{Keyword}
		public Action getKeywordAction_13_0() { return cKeywordAction_13_0; }
		
		//EXPIRED
		public RuleCall getEXPIREDParserRuleCall_13_1() { return cEXPIREDParserRuleCall_13_1; }
		
		//{Keyword} CURRENT
		public Group getGroup_14() { return cGroup_14; }
		
		//{Keyword}
		public Action getKeywordAction_14_0() { return cKeywordAction_14_0; }
		
		//CURRENT
		public RuleCall getCURRENTParserRuleCall_14_1() { return cCURRENTParserRuleCall_14_1; }
		
		//{Keyword} RETURN
		public Group getGroup_15() { return cGroup_15; }
		
		//{Keyword}
		public Action getKeywordAction_15_0() { return cKeywordAction_15_0; }
		
		//RETURN
		public RuleCall getRETURNParserRuleCall_15_1() { return cRETURNParserRuleCall_15_1; }
		
		//{Keyword} PARTITION
		public Group getGroup_16() { return cGroup_16; }
		
		//{Keyword}
		public Action getKeywordAction_16_0() { return cKeywordAction_16_0; }
		
		//PARTITION
		public RuleCall getPARTITIONParserRuleCall_16_1() { return cPARTITIONParserRuleCall_16_1; }
		
		//{Keyword} every=EVERY
		public Group getGroup_17() { return cGroup_17; }
		
		//{Keyword}
		public Action getKeywordAction_17_0() { return cKeywordAction_17_0; }
		
		//every=EVERY
		public Assignment getEveryAssignment_17_1() { return cEveryAssignment_17_1; }
		
		//EVERY
		public RuleCall getEveryEVERYParserRuleCall_17_1_0() { return cEveryEVERYParserRuleCall_17_1_0; }
		
		//{Keyword} uni=UNIDIRECTIONAL
		public Group getGroup_18() { return cGroup_18; }
		
		//{Keyword}
		public Action getKeywordAction_18_0() { return cKeywordAction_18_0; }
		
		//uni=UNIDIRECTIONAL
		public Assignment getUniAssignment_18_1() { return cUniAssignment_18_1; }
		
		//UNIDIRECTIONAL
		public RuleCall getUniUNIDIRECTIONALParserRuleCall_18_1_0() { return cUniUNIDIRECTIONALParserRuleCall_18_1_0; }
		
		//{Keyword} on=ON
		public Group getGroup_19() { return cGroup_19; }
		
		//{Keyword}
		public Action getKeywordAction_19_0() { return cKeywordAction_19_0; }
		
		//on=ON
		public Assignment getOnAssignment_19_1() { return cOnAssignment_19_1; }
		
		//ON
		public RuleCall getOnONParserRuleCall_19_1_0() { return cOnONParserRuleCall_19_1_0; }
		
		//{Keyword} WITHIN
		public Group getGroup_20() { return cGroup_20; }
		
		//{Keyword}
		public Action getKeywordAction_20_0() { return cKeywordAction_20_0; }
		
		//WITHIN
		public RuleCall getWITHINParserRuleCall_20_1() { return cWITHINParserRuleCall_20_1; }
		
		//{Keyword} LEFT
		public Group getGroup_21() { return cGroup_21; }
		
		//{Keyword}
		public Action getKeywordAction_21_0() { return cKeywordAction_21_0; }
		
		//LEFT
		public RuleCall getLEFTParserRuleCall_21_1() { return cLEFTParserRuleCall_21_1; }
		
		//{Keyword} RIGHT
		public Group getGroup_22() { return cGroup_22; }
		
		//{Keyword}
		public Action getKeywordAction_22_0() { return cKeywordAction_22_0; }
		
		//RIGHT
		public RuleCall getRIGHTParserRuleCall_22_1() { return cRIGHTParserRuleCall_22_1; }
		
		//{Keyword} FULL
		public Group getGroup_23() { return cGroup_23; }
		
		//{Keyword}
		public Action getKeywordAction_23_0() { return cKeywordAction_23_0; }
		
		//FULL
		public RuleCall getFULLParserRuleCall_23_1() { return cFULLParserRuleCall_23_1; }
		
		//{Keyword} JOIN
		public Group getGroup_24() { return cGroup_24; }
		
		//{Keyword}
		public Action getKeywordAction_24_0() { return cKeywordAction_24_0; }
		
		//JOIN
		public RuleCall getJOINParserRuleCall_24_1() { return cJOINParserRuleCall_24_1; }
		
		//{Keyword} OUTER
		public Group getGroup_25() { return cGroup_25; }
		
		//{Keyword}
		public Action getKeywordAction_25_0() { return cKeywordAction_25_0; }
		
		//OUTER
		public RuleCall getOUTERParserRuleCall_25_1() { return cOUTERParserRuleCall_25_1; }
		
		//{Keyword} INNER
		public Group getGroup_26() { return cGroup_26; }
		
		//{Keyword}
		public Action getKeywordAction_26_0() { return cKeywordAction_26_0; }
		
		//INNER
		public RuleCall getINNERParserRuleCall_26_1() { return cINNERParserRuleCall_26_1; }
		
		//{Keyword} YEARS
		public Group getGroup_27() { return cGroup_27; }
		
		//{Keyword}
		public Action getKeywordAction_27_0() { return cKeywordAction_27_0; }
		
		//YEARS
		public RuleCall getYEARSParserRuleCall_27_1() { return cYEARSParserRuleCall_27_1; }
		
		//{Keyword} MONTHS
		public Group getGroup_28() { return cGroup_28; }
		
		//{Keyword}
		public Action getKeywordAction_28_0() { return cKeywordAction_28_0; }
		
		//MONTHS
		public RuleCall getMONTHSParserRuleCall_28_1() { return cMONTHSParserRuleCall_28_1; }
		
		//{Keyword} WEEKS
		public Group getGroup_29() { return cGroup_29; }
		
		//{Keyword}
		public Action getKeywordAction_29_0() { return cKeywordAction_29_0; }
		
		//WEEKS
		public RuleCall getWEEKSParserRuleCall_29_1() { return cWEEKSParserRuleCall_29_1; }
		
		//{Keyword} DAYS
		public Group getGroup_30() { return cGroup_30; }
		
		//{Keyword}
		public Action getKeywordAction_30_0() { return cKeywordAction_30_0; }
		
		//DAYS
		public RuleCall getDAYSParserRuleCall_30_1() { return cDAYSParserRuleCall_30_1; }
		
		//{Keyword} HOURS
		public Group getGroup_31() { return cGroup_31; }
		
		//{Keyword}
		public Action getKeywordAction_31_0() { return cKeywordAction_31_0; }
		
		//HOURS
		public RuleCall getHOURSParserRuleCall_31_1() { return cHOURSParserRuleCall_31_1; }
		
		//{Keyword} MINUTES
		public Group getGroup_32() { return cGroup_32; }
		
		//{Keyword}
		public Action getKeywordAction_32_0() { return cKeywordAction_32_0; }
		
		//MINUTES
		public RuleCall getMINUTESParserRuleCall_32_1() { return cMINUTESParserRuleCall_32_1; }
		
		//{Keyword} SECONDS
		public Group getGroup_33() { return cGroup_33; }
		
		//{Keyword}
		public Action getKeywordAction_33_0() { return cKeywordAction_33_0; }
		
		//SECONDS
		public RuleCall getSECONDSParserRuleCall_33_1() { return cSECONDSParserRuleCall_33_1; }
		
		//{Keyword} MILLISECONDS
		public Group getGroup_34() { return cGroup_34; }
		
		//{Keyword}
		public Action getKeywordAction_34_0() { return cKeywordAction_34_0; }
		
		//MILLISECONDS
		public RuleCall getMILLISECONDSParserRuleCall_34_1() { return cMILLISECONDSParserRuleCall_34_1; }
		
		//{Keyword} STRINGS
		public Group getGroup_35() { return cGroup_35; }
		
		//{Keyword}
		public Action getKeywordAction_35_0() { return cKeywordAction_35_0; }
		
		//STRINGS
		public RuleCall getSTRINGSParserRuleCall_35_1() { return cSTRINGSParserRuleCall_35_1; }
		
		//{Keyword} INTS
		public Group getGroup_36() { return cGroup_36; }
		
		//{Keyword}
		public Action getKeywordAction_36_0() { return cKeywordAction_36_0; }
		
		//INTS
		public RuleCall getINTSParserRuleCall_36_1() { return cINTSParserRuleCall_36_1; }
		
		//{Keyword} LONG
		public Group getGroup_37() { return cGroup_37; }
		
		//{Keyword}
		public Action getKeywordAction_37_0() { return cKeywordAction_37_0; }
		
		//LONG
		public RuleCall getLONGParserRuleCall_37_1() { return cLONGParserRuleCall_37_1; }
		
		//{Keyword} FLOAT
		public Group getGroup_38() { return cGroup_38; }
		
		//{Keyword}
		public Action getKeywordAction_38_0() { return cKeywordAction_38_0; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_38_1() { return cFLOATParserRuleCall_38_1; }
		
		//{Keyword} DOUBLE
		public Group getGroup_39() { return cGroup_39; }
		
		//{Keyword}
		public Action getKeywordAction_39_0() { return cKeywordAction_39_0; }
		
		//DOUBLE
		public RuleCall getDOUBLEParserRuleCall_39_1() { return cDOUBLEParserRuleCall_39_1; }
		
		//{Keyword} BOOL
		public Group getGroup_40() { return cGroup_40; }
		
		//{Keyword}
		public Action getKeywordAction_40_0() { return cKeywordAction_40_0; }
		
		//BOOL
		public RuleCall getBOOLParserRuleCall_40_1() { return cBOOLParserRuleCall_40_1; }
		
		//{Keyword} OBJECT
		public Group getGroup_41() { return cGroup_41; }
		
		//{Keyword}
		public Action getKeywordAction_41_0() { return cKeywordAction_41_0; }
		
		//OBJECT
		public RuleCall getOBJECTParserRuleCall_41_1() { return cOBJECTParserRuleCall_41_1; }
		
		//{Keyword} and=AND
		public Group getGroup_42() { return cGroup_42; }
		
		//{Keyword}
		public Action getKeywordAction_42_0() { return cKeywordAction_42_0; }
		
		//and=AND
		public Assignment getAndAssignment_42_1() { return cAndAssignment_42_1; }
		
		//AND
		public RuleCall getAndANDParserRuleCall_42_1_0() { return cAndANDParserRuleCall_42_1_0; }
		
		//{Keyword} or=OR
		public Group getGroup_43() { return cGroup_43; }
		
		//{Keyword}
		public Action getKeywordAction_43_0() { return cKeywordAction_43_0; }
		
		//or=OR
		public Assignment getOrAssignment_43_1() { return cOrAssignment_43_1; }
		
		//OR
		public RuleCall getOrORParserRuleCall_43_1_0() { return cOrORParserRuleCall_43_1_0; }
		
		//{Keyword} not=NOT
		public Group getGroup_44() { return cGroup_44; }
		
		//{Keyword}
		public Action getKeywordAction_44_0() { return cKeywordAction_44_0; }
		
		//not=NOT
		public Assignment getNotAssignment_44_1() { return cNotAssignment_44_1; }
		
		//NOT
		public RuleCall getNotNOTParserRuleCall_44_1_0() { return cNotNOTParserRuleCall_44_1_0; }
		
		//{Keyword} IS
		public Group getGroup_45() { return cGroup_45; }
		
		//{Keyword}
		public Action getKeywordAction_45_0() { return cKeywordAction_45_0; }
		
		//IS
		public RuleCall getISParserRuleCall_45_1() { return cISParserRuleCall_45_1; }
		
		//{Keyword} NULL
		public Group getGroup_46() { return cGroup_46; }
		
		//{Keyword}
		public Action getKeywordAction_46_0() { return cKeywordAction_46_0; }
		
		//NULL
		public RuleCall getNULLParserRuleCall_46_1() { return cNULLParserRuleCall_46_1; }
		
		//{Keyword} SNAPSHOT
		public Group getGroup_47() { return cGroup_47; }
		
		//{Keyword}
		public Action getKeywordAction_47_0() { return cKeywordAction_47_0; }
		
		//SNAPSHOT
		public RuleCall getSNAPSHOTParserRuleCall_47_1() { return cSNAPSHOTParserRuleCall_47_1; }
		
		//{Keyword} LAST
		public Group getGroup_48() { return cGroup_48; }
		
		//{Keyword}
		public Action getKeywordAction_48_0() { return cKeywordAction_48_0; }
		
		//LAST
		public RuleCall getLASTParserRuleCall_48_1() { return cLASTParserRuleCall_48_1; }
		
		//{Keyword} FIRST
		public Group getGroup_49() { return cGroup_49; }
		
		//{Keyword}
		public Action getKeywordAction_49_0() { return cKeywordAction_49_0; }
		
		//FIRST
		public RuleCall getFIRSTParserRuleCall_49_1() { return cFIRSTParserRuleCall_49_1; }
		
		//{Keyword} GROUP
		public Group getGroup_50() { return cGroup_50; }
		
		//{Keyword}
		public Action getKeywordAction_50_0() { return cKeywordAction_50_0; }
		
		//GROUP
		public RuleCall getGROUPParserRuleCall_50_1() { return cGROUPParserRuleCall_50_1; }
		
		//{Keyword} BY
		public Group getGroup_51() { return cGroup_51; }
		
		//{Keyword}
		public Action getKeywordAction_51_0() { return cKeywordAction_51_0; }
		
		//BY
		public RuleCall getBYParserRuleCall_51_1() { return cBYParserRuleCall_51_1; }
		
		//{Keyword} HAVING
		public Group getGroup_52() { return cGroup_52; }
		
		//{Keyword}
		public Action getKeywordAction_52_0() { return cKeywordAction_52_0; }
		
		//HAVING
		public RuleCall getHAVINGParserRuleCall_52_1() { return cHAVINGParserRuleCall_52_1; }
		
		//{Keyword} WITH
		public Group getGroup_53() { return cGroup_53; }
		
		//{Keyword}
		public Action getKeywordAction_53_0() { return cKeywordAction_53_0; }
		
		//WITH
		public RuleCall getWITHParserRuleCall_53_1() { return cWITHParserRuleCall_53_1; }
		
		//{Keyword} of=OF
		public Group getGroup_54() { return cGroup_54; }
		
		//{Keyword}
		public Action getKeywordAction_54_0() { return cKeywordAction_54_0; }
		
		//of=OF
		public Assignment getOfAssignment_54_1() { return cOfAssignment_54_1; }
		
		//OF
		public RuleCall getOfOFParserRuleCall_54_1_0() { return cOfOFParserRuleCall_54_1_0; }
		
		//{Keyword} BEGIN
		public Group getGroup_55() { return cGroup_55; }
		
		//{Keyword}
		public Action getKeywordAction_55_0() { return cKeywordAction_55_0; }
		
		//BEGIN
		public RuleCall getBEGINParserRuleCall_55_1() { return cBEGINParserRuleCall_55_1; }
		
		//{Keyword} END
		public Group getGroup_56() { return cGroup_56; }
		
		//{Keyword}
		public Action getKeywordAction_56_0() { return cKeywordAction_56_0; }
		
		//END
		public RuleCall getENDParserRuleCall_56_1() { return cENDParserRuleCall_56_1; }
		
		//{Keyword} DELETE
		public Group getGroup_57() { return cGroup_57; }
		
		//{Keyword}
		public Action getKeywordAction_57_0() { return cKeywordAction_57_0; }
		
		//DELETE
		public RuleCall getDELETEParserRuleCall_57_1() { return cDELETEParserRuleCall_57_1; }
		
		//{Keyword} FOR
		public Group getGroup_58() { return cGroup_58; }
		
		//{Keyword}
		public Action getKeywordAction_58_0() { return cKeywordAction_58_0; }
		
		//FOR
		public RuleCall getFORParserRuleCall_58_1() { return cFORParserRuleCall_58_1; }
		
		//{Keyword} TRUE
		public Group getGroup_59() { return cGroup_59; }
		
		//{Keyword}
		public Action getKeywordAction_59_0() { return cKeywordAction_59_0; }
		
		//TRUE
		public RuleCall getTRUEParserRuleCall_59_1() { return cTRUEParserRuleCall_59_1; }
		
		//{Keyword} FALSE
		public Group getGroup_60() { return cGroup_60; }
		
		//{Keyword}
		public Action getKeywordAction_60_0() { return cKeywordAction_60_0; }
		
		//FALSE
		public RuleCall getFALSEParserRuleCall_60_1() { return cFALSEParserRuleCall_60_1; }
		
		//{Keyword} UPDATE
		public Group getGroup_61() { return cGroup_61; }
		
		//{Keyword}
		public Action getKeywordAction_61_0() { return cKeywordAction_61_0; }
		
		//UPDATE
		public RuleCall getUPDATEParserRuleCall_61_1() { return cUPDATEParserRuleCall_61_1; }
	}
	public class ASElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AS");
		private final Assignment cAAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cAAsKeyword_0 = (Keyword)cAAssignment.eContents().get(0);
		
		//AS:
		//	a='as';
		@Override public ParserRule getRule() { return rule; }
		
		//a='as'
		public Assignment getAAssignment() { return cAAssignment; }
		
		//'as'
		public Keyword getAAsKeyword_0() { return cAAsKeyword_0; }
	}
	public class ONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ON");
		private final Assignment cOnAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOnOnKeyword_0 = (Keyword)cOnAssignment.eContents().get(0);
		
		//ON:
		//	on='on';
		@Override public ParserRule getRule() { return rule; }
		
		//on='on'
		public Assignment getOnAssignment() { return cOnAssignment; }
		
		//'on'
		public Keyword getOnOnKeyword_0() { return cOnOnKeyword_0; }
	}
	public class UNIDIRECTIONALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.UNIDIRECTIONAL");
		private final Assignment cUnidirectionalAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cUnidirectionalUnidirectionalKeyword_0 = (Keyword)cUnidirectionalAssignment.eContents().get(0);
		
		//UNIDIRECTIONAL:
		//	unidirectional='unidirectional';
		@Override public ParserRule getRule() { return rule; }
		
		//unidirectional='unidirectional'
		public Assignment getUnidirectionalAssignment() { return cUnidirectionalAssignment; }
		
		//'unidirectional'
		public Keyword getUnidirectionalUnidirectionalKeyword_0() { return cUnidirectionalUnidirectionalKeyword_0; }
	}
	public class NOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.NOT");
		private final Assignment cNot1Assignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNot1NotKeyword_0 = (Keyword)cNot1Assignment.eContents().get(0);
		
		//NOT:
		//	not1='not';
		@Override public ParserRule getRule() { return rule; }
		
		//not1='not'
		public Assignment getNot1Assignment() { return cNot1Assignment; }
		
		//'not'
		public Keyword getNot1NotKeyword_0() { return cNot1NotKeyword_0; }
	}
	public class EVERYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.EVERY");
		private final Assignment cEveryAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cEveryEveryKeyword_0 = (Keyword)cEveryAssignment.eContents().get(0);
		
		//EVERY:
		//	every='every';
		@Override public ParserRule getRule() { return rule; }
		
		//every='every'
		public Assignment getEveryAssignment() { return cEveryAssignment; }
		
		//'every'
		public Keyword getEveryEveryKeyword_0() { return cEveryEveryKeyword_0; }
	}
	public class ANDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AND");
		private final Assignment cAndAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cAndAndKeyword_0 = (Keyword)cAndAssignment.eContents().get(0);
		
		//AND:
		//	and='and';
		@Override public ParserRule getRule() { return rule; }
		
		//and='and'
		public Assignment getAndAssignment() { return cAndAssignment; }
		
		//'and'
		public Keyword getAndAndKeyword_0() { return cAndAndKeyword_0; }
	}
	public class ORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OR");
		private final Assignment cOrAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOrOrKeyword_0 = (Keyword)cOrAssignment.eContents().get(0);
		
		//OR:
		//	or+='or';
		@Override public ParserRule getRule() { return rule; }
		
		//or+='or'
		public Assignment getOrAssignment() { return cOrAssignment; }
		
		//'or'
		public Keyword getOrOrKeyword_0() { return cOrOrKeyword_0; }
	}
	public class INElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.IN");
		private final Assignment cInAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cInInKeyword_0 = (Keyword)cInAssignment.eContents().get(0);
		
		//IN:
		//	in='in';
		@Override public ParserRule getRule() { return rule; }
		
		//in='in'
		public Assignment getInAssignment() { return cInAssignment; }
		
		//'in'
		public Keyword getInInKeyword_0() { return cInInKeyword_0; }
	}
	public class OFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OF");
		private final Assignment cOfAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOfOfKeyword_0 = (Keyword)cOfAssignment.eContents().get(0);
		
		//OF:
		//	of='of';
		@Override public ParserRule getRule() { return rule; }
		
		//of='of'
		public Assignment getOfAssignment() { return cOfAssignment; }
		
		//'of'
		public Keyword getOfOfKeyword_0() { return cOfOfKeyword_0; }
	}
	public class EElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.E");
		private final Assignment cEAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cEEKeyword_0 = (Keyword)cEAssignment.eContents().get(0);
		
		//E:
		//	e='e';
		@Override public ParserRule getRule() { return rule; }
		
		//e='e'
		public Assignment getEAssignment() { return cEAssignment; }
		
		//'e'
		public Keyword getEEKeyword_0() { return cEEKeyword_0; }
	}
	public class DElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.D");
		private final Assignment cDAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDDKeyword_0 = (Keyword)cDAssignment.eContents().get(0);
		
		//D:
		//	d='d';
		@Override public ParserRule getRule() { return rule; }
		
		//d='d'
		public Assignment getDAssignment() { return cDAssignment; }
		
		//'d'
		public Keyword getDDKeyword_0() { return cDDKeyword_0; }
	}
	public class FElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.F");
		private final Assignment cFAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cFFKeyword_0 = (Keyword)cFAssignment.eContents().get(0);
		
		//F:
		//	f='f';
		@Override public ParserRule getRule() { return rule; }
		
		//f='f'
		public Assignment getFAssignment() { return cFAssignment; }
		
		//'f'
		public Keyword getFFKeyword_0() { return cFFKeyword_0; }
	}
	public class LElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.L");
		private final Assignment cLAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cLLKeyword_0 = (Keyword)cLAssignment.eContents().get(0);
		
		//L:
		//	l='l';
		@Override public ParserRule getRule() { return rule; }
		
		//l='l'
		public Assignment getLAssignment() { return cLAssignment; }
		
		//'l'
		public Keyword getLLKeyword_0() { return cLLKeyword_0; }
	}
	public class APPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.APP");
		private final Assignment cApAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cApAppKeyword_0 = (Keyword)cApAssignment.eContents().get(0);
		
		//APP:
		//	ap='app';
		@Override public ParserRule getRule() { return rule; }
		
		//ap='app'
		public Assignment getApAssignment() { return cApAssignment; }
		
		//'app'
		public Keyword getApAppKeyword_0() { return cApAppKeyword_0; }
	}
	public class STREAMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.STREAM");
		private final Assignment cStrAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cStrStreamKeyword_0 = (Keyword)cStrAssignment.eContents().get(0);
		
		//fragment STREAM:
		//	str='stream';
		@Override public ParserRule getRule() { return rule; }
		
		//str='stream'
		public Assignment getStrAssignment() { return cStrAssignment; }
		
		//'stream'
		public Keyword getStrStreamKeyword_0() { return cStrStreamKeyword_0; }
	}
	public class DEFINEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DEFINE");
		private final Assignment cDefineAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDefineDefineKeyword_0 = (Keyword)cDefineAssignment.eContents().get(0);
		
		//fragment DEFINE:
		//	define='define';
		@Override public ParserRule getRule() { return rule; }
		
		//define='define'
		public Assignment getDefineAssignment() { return cDefineAssignment; }
		
		//'define'
		public Keyword getDefineDefineKeyword_0() { return cDefineDefineKeyword_0; }
	}
	public class TABLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.TABLE");
		private final Assignment cTableAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTableTableKeyword_0 = (Keyword)cTableAssignment.eContents().get(0);
		
		//fragment TABLE:
		//	table='table';
		@Override public ParserRule getRule() { return rule; }
		
		//table='table'
		public Assignment getTableAssignment() { return cTableAssignment; }
		
		//'table'
		public Keyword getTableTableKeyword_0() { return cTableTableKeyword_0; }
	}
	public class WINDOWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.WINDOW");
		private final Assignment cWindowAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cWindowWindowKeyword_0 = (Keyword)cWindowAssignment.eContents().get(0);
		
		//fragment WINDOW:
		//	window='window';
		@Override public ParserRule getRule() { return rule; }
		
		//window='window'
		public Assignment getWindowAssignment() { return cWindowAssignment; }
		
		//'window'
		public Keyword getWindowWindowKeyword_0() { return cWindowWindowKeyword_0; }
	}
	public class OUTPUTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OUTPUT");
		private final Assignment cOutputAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOutputOutputKeyword_0 = (Keyword)cOutputAssignment.eContents().get(0);
		
		//fragment OUTPUT:
		//	output='output';
		@Override public ParserRule getRule() { return rule; }
		
		//output='output'
		public Assignment getOutputAssignment() { return cOutputAssignment; }
		
		//'output'
		public Keyword getOutputOutputKeyword_0() { return cOutputOutputKeyword_0; }
	}
	public class STRINGSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.STRINGS");
		private final Assignment cStringAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cStringStringKeyword_0 = (Keyword)cStringAssignment.eContents().get(0);
		
		//fragment STRINGS:
		//	string='string';
		@Override public ParserRule getRule() { return rule; }
		
		//string='string'
		public Assignment getStringAssignment() { return cStringAssignment; }
		
		//'string'
		public Keyword getStringStringKeyword_0() { return cStringStringKeyword_0; }
	}
	public class INTSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.INTS");
		private final Assignment cIntAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIntIntKeyword_0 = (Keyword)cIntAssignment.eContents().get(0);
		
		//fragment INTS:
		//	int='int';
		@Override public ParserRule getRule() { return rule; }
		
		//int='int'
		public Assignment getIntAssignment() { return cIntAssignment; }
		
		//'int'
		public Keyword getIntIntKeyword_0() { return cIntIntKeyword_0; }
	}
	public class LONGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LONG");
		private final Assignment cLongAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cLongLongKeyword_0 = (Keyword)cLongAssignment.eContents().get(0);
		
		//fragment LONG:
		//	long='long';
		@Override public ParserRule getRule() { return rule; }
		
		//long='long'
		public Assignment getLongAssignment() { return cLongAssignment; }
		
		//'long'
		public Keyword getLongLongKeyword_0() { return cLongLongKeyword_0; }
	}
	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DOUBLE");
		private final Assignment cDoubleAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDoubleDoubleKeyword_0 = (Keyword)cDoubleAssignment.eContents().get(0);
		
		//fragment DOUBLE:
		//	double='double';
		@Override public ParserRule getRule() { return rule; }
		
		//double='double'
		public Assignment getDoubleAssignment() { return cDoubleAssignment; }
		
		//'double'
		public Keyword getDoubleDoubleKeyword_0() { return cDoubleDoubleKeyword_0; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FLOAT");
		private final Assignment cFloatAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cFloatFloatKeyword_0 = (Keyword)cFloatAssignment.eContents().get(0);
		
		//fragment FLOAT:
		//	float='float';
		@Override public ParserRule getRule() { return rule; }
		
		//float='float'
		public Assignment getFloatAssignment() { return cFloatAssignment; }
		
		//'float'
		public Keyword getFloatFloatKeyword_0() { return cFloatFloatKeyword_0; }
	}
	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.BOOL");
		private final Assignment cBoolAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cBoolBoolKeyword_0 = (Keyword)cBoolAssignment.eContents().get(0);
		
		//fragment BOOL:
		//	bool='bool';
		@Override public ParserRule getRule() { return rule; }
		
		//bool='bool'
		public Assignment getBoolAssignment() { return cBoolAssignment; }
		
		//'bool'
		public Keyword getBoolBoolKeyword_0() { return cBoolBoolKeyword_0; }
	}
	public class OBJECTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OBJECT");
		private final Assignment cObjectAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cObjectObjectKeyword_0 = (Keyword)cObjectAssignment.eContents().get(0);
		
		//fragment OBJECT:
		//	object='object';
		@Override public ParserRule getRule() { return rule; }
		
		//object='object'
		public Assignment getObjectAssignment() { return cObjectAssignment; }
		
		//'object'
		public Keyword getObjectObjectKeyword_0() { return cObjectObjectKeyword_0; }
	}
	public class ALLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ALL");
		private final Assignment cAllAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cAllAllKeyword_0 = (Keyword)cAllAssignment.eContents().get(0);
		
		//fragment ALL:
		//	all='all';
		@Override public ParserRule getRule() { return rule; }
		
		//all='all'
		public Assignment getAllAssignment() { return cAllAssignment; }
		
		//'all'
		public Keyword getAllAllKeyword_0() { return cAllAllKeyword_0; }
	}
	public class EVENTSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.EVENTS");
		private final Assignment cEventsAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cEventsEventsKeyword_0 = (Keyword)cEventsAssignment.eContents().get(0);
		
		//fragment EVENTS:
		//	events='events';
		@Override public ParserRule getRule() { return rule; }
		
		//events='events'
		public Assignment getEventsAssignment() { return cEventsAssignment; }
		
		//'events'
		public Keyword getEventsEventsKeyword_0() { return cEventsEventsKeyword_0; }
	}
	public class RAWElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.RAW");
		private final Assignment cRawAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cRawRawKeyword_0 = (Keyword)cRawAssignment.eContents().get(0);
		
		//fragment RAW:
		//	raw='raw';
		@Override public ParserRule getRule() { return rule; }
		
		//raw='raw'
		public Assignment getRawAssignment() { return cRawAssignment; }
		
		//'raw'
		public Keyword getRawRawKeyword_0() { return cRawRawKeyword_0; }
	}
	public class EXPIREDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.EXPIRED");
		private final Assignment cExpiredAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cExpiredExpiredKeyword_0 = (Keyword)cExpiredAssignment.eContents().get(0);
		
		//fragment EXPIRED:
		//	expired='expired';
		@Override public ParserRule getRule() { return rule; }
		
		//expired='expired'
		public Assignment getExpiredAssignment() { return cExpiredAssignment; }
		
		//'expired'
		public Keyword getExpiredExpiredKeyword_0() { return cExpiredExpiredKeyword_0; }
	}
	public class CURRENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.CURRENT");
		private final Assignment cCurrtAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cCurrtCurrentKeyword_0 = (Keyword)cCurrtAssignment.eContents().get(0);
		
		//fragment CURRENT:
		//	currt='current';
		@Override public ParserRule getRule() { return rule; }
		
		//currt='current'
		public Assignment getCurrtAssignment() { return cCurrtAssignment; }
		
		//'current'
		public Keyword getCurrtCurrentKeyword_0() { return cCurrtCurrentKeyword_0; }
	}
	public class LASTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LAST");
		private final Assignment cLastAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cLastLastKeyword_0 = (Keyword)cLastAssignment.eContents().get(0);
		
		////fragment AND: (and='and');
		////fragment OR: (or+='or');
		////fragment IN: (in='in');
		////fragment NOT: (not='not');
		//fragment LAST:
		//	last='last';
		@Override public ParserRule getRule() { return rule; }
		
		//last='last'
		public Assignment getLastAssignment() { return cLastAssignment; }
		
		//'last'
		public Keyword getLastLastKeyword_0() { return cLastLastKeyword_0; }
	}
	public class ISElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.IS");
		private final Assignment cIsAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIsIsKeyword_0 = (Keyword)cIsAssignment.eContents().get(0);
		
		//fragment IS:
		//	is='is';
		@Override public ParserRule getRule() { return rule; }
		
		//is='is'
		public Assignment getIsAssignment() { return cIsAssignment; }
		
		//'is'
		public Keyword getIsIsKeyword_0() { return cIsIsKeyword_0; }
	}
	public class NULLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.NULL");
		private final Assignment cNullAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNullNullKeyword_0 = (Keyword)cNullAssignment.eContents().get(0);
		
		//fragment NULL:
		//	null='null';
		@Override public ParserRule getRule() { return rule; }
		
		//null='null'
		public Assignment getNullAssignment() { return cNullAssignment; }
		
		//'null'
		public Keyword getNullNullKeyword_0() { return cNullNullKeyword_0; }
	}
	public class TRIGGERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.TRIGGER");
		private final Assignment cTriggerAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTriggerTriggerKeyword_0 = (Keyword)cTriggerAssignment.eContents().get(0);
		
		//fragment TRIGGER:
		//	trigger='trigger';
		@Override public ParserRule getRule() { return rule; }
		
		//trigger='trigger'
		public Assignment getTriggerAssignment() { return cTriggerAssignment; }
		
		//'trigger'
		public Keyword getTriggerTriggerKeyword_0() { return cTriggerTriggerKeyword_0; }
	}
	public class ATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AT");
		private final Assignment cAtAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cAtAtKeyword_0 = (Keyword)cAtAssignment.eContents().get(0);
		
		//fragment AT:
		//	at='at';
		@Override public ParserRule getRule() { return rule; }
		
		//at='at'
		public Assignment getAtAssignment() { return cAtAssignment; }
		
		//'at'
		public Keyword getAtAtKeyword_0() { return cAtAtKeyword_0; }
	}
	public class FUNCTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FUNCTION");
		private final Assignment cFunctionAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cFunctionFunctionKeyword_0 = (Keyword)cFunctionAssignment.eContents().get(0);
		
		////fragment EVERY: (every='every' );
		//fragment FUNCTION:
		//	function='function';
		@Override public ParserRule getRule() { return rule; }
		
		//function='function'
		public Assignment getFunctionAssignment() { return cFunctionAssignment; }
		
		//'function'
		public Keyword getFunctionFunctionKeyword_0() { return cFunctionFunctionKeyword_0; }
	}
	public class RETURNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.RETURN");
		private final Assignment cReturnAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cReturnReturnKeyword_0 = (Keyword)cReturnAssignment.eContents().get(0);
		
		//fragment RETURN:
		//	return='return';
		@Override public ParserRule getRule() { return rule; }
		
		//return='return'
		public Assignment getReturnAssignment() { return cReturnAssignment; }
		
		//'return'
		public Keyword getReturnReturnKeyword_0() { return cReturnReturnKeyword_0; }
	}
	public class FROMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FROM");
		private final Assignment cFromAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cFromFromKeyword_0 = (Keyword)cFromAssignment.eContents().get(0);
		
		//fragment FROM:
		//	from='from';
		@Override public ParserRule getRule() { return rule; }
		
		//from='from'
		public Assignment getFromAssignment() { return cFromAssignment; }
		
		//'from'
		public Keyword getFromFromKeyword_0() { return cFromFromKeyword_0; }
	}
	public class WITHINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.WITHIN");
		private final Assignment cWithinAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cWithinWithinKeyword_0 = (Keyword)cWithinAssignment.eContents().get(0);
		
		////fragment UNIDIRECTIONAL: (unidirectional='unidirectional');
		////fragment ON: (on='on');
		//fragment WITHIN:
		//	within='within';
		@Override public ParserRule getRule() { return rule; }
		
		//within='within'
		public Assignment getWithinAssignment() { return cWithinAssignment; }
		
		//'within'
		public Keyword getWithinWithinKeyword_0() { return cWithinWithinKeyword_0; }
	}
	public class LEFTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LEFT");
		private final Assignment cLeftAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cLeftLeftKeyword_0 = (Keyword)cLeftAssignment.eContents().get(0);
		
		//fragment LEFT:
		//	left='left';
		@Override public ParserRule getRule() { return rule; }
		
		//left='left'
		public Assignment getLeftAssignment() { return cLeftAssignment; }
		
		//'left'
		public Keyword getLeftLeftKeyword_0() { return cLeftLeftKeyword_0; }
	}
	public class RIGHTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.RIGHT");
		private final Assignment cRightAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cRightRightKeyword_0 = (Keyword)cRightAssignment.eContents().get(0);
		
		//fragment RIGHT:
		//	right='right';
		@Override public ParserRule getRule() { return rule; }
		
		//right='right'
		public Assignment getRightAssignment() { return cRightAssignment; }
		
		//'right'
		public Keyword getRightRightKeyword_0() { return cRightRightKeyword_0; }
	}
	public class FULLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FULL");
		private final Assignment cFullAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cFullFullKeyword_0 = (Keyword)cFullAssignment.eContents().get(0);
		
		//fragment FULL:
		//	full='full';
		@Override public ParserRule getRule() { return rule; }
		
		//full='full'
		public Assignment getFullAssignment() { return cFullAssignment; }
		
		//'full'
		public Keyword getFullFullKeyword_0() { return cFullFullKeyword_0; }
	}
	public class JOINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.JOIN");
		private final Assignment cJoinAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cJoinJoinKeyword_0 = (Keyword)cJoinAssignment.eContents().get(0);
		
		//fragment JOIN:
		//	join='join';
		@Override public ParserRule getRule() { return rule; }
		
		//join='join'
		public Assignment getJoinAssignment() { return cJoinAssignment; }
		
		//'join'
		public Keyword getJoinJoinKeyword_0() { return cJoinJoinKeyword_0; }
	}
	public class INNERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.INNER");
		private final Assignment cInnerAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cInnerInnerKeyword_0 = (Keyword)cInnerAssignment.eContents().get(0);
		
		//fragment INNER:
		//	inner='inner';
		@Override public ParserRule getRule() { return rule; }
		
		//inner='inner'
		public Assignment getInnerAssignment() { return cInnerAssignment; }
		
		//'inner'
		public Keyword getInnerInnerKeyword_0() { return cInnerInnerKeyword_0; }
	}
	public class OUTERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OUTER");
		private final Assignment cOuterAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cOuterOuterKeyword_0 = (Keyword)cOuterAssignment.eContents().get(0);
		
		//fragment OUTER:
		//	outer='outer';
		@Override public ParserRule getRule() { return rule; }
		
		//outer='outer'
		public Assignment getOuterAssignment() { return cOuterAssignment; }
		
		//'outer'
		public Keyword getOuterOuterKeyword_0() { return cOuterOuterKeyword_0; }
	}
	public class SELECTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SELECT");
		private final Assignment cSelectAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSelectSelectKeyword_0 = (Keyword)cSelectAssignment.eContents().get(0);
		
		////fragment AS: (a='as');
		//fragment SELECT:
		//	select='select';
		@Override public ParserRule getRule() { return rule; }
		
		//select='select'
		public Assignment getSelectAssignment() { return cSelectAssignment; }
		
		//'select'
		public Keyword getSelectSelectKeyword_0() { return cSelectSelectKeyword_0; }
	}
	public class GROUPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.GROUP");
		private final Assignment cGroupAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cGroupGroupKeyword_0 = (Keyword)cGroupAssignment.eContents().get(0);
		
		//fragment GROUP:
		//	group='group';
		@Override public ParserRule getRule() { return rule; }
		
		//group='group'
		public Assignment getGroupAssignment() { return cGroupAssignment; }
		
		//'group'
		public Keyword getGroupGroupKeyword_0() { return cGroupGroupKeyword_0; }
	}
	public class BYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.BY");
		private final Assignment cByAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cByByKeyword_0 = (Keyword)cByAssignment.eContents().get(0);
		
		//fragment BY:
		//	by='by';
		@Override public ParserRule getRule() { return rule; }
		
		//by='by'
		public Assignment getByAssignment() { return cByAssignment; }
		
		//'by'
		public Keyword getByByKeyword_0() { return cByByKeyword_0; }
	}
	public class HAVINGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.HAVING");
		private final Assignment cHavingAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cHavingHavingKeyword_0 = (Keyword)cHavingAssignment.eContents().get(0);
		
		//fragment HAVING:
		//	having='having';
		@Override public ParserRule getRule() { return rule; }
		
		//having='having'
		public Assignment getHavingAssignment() { return cHavingAssignment; }
		
		//'having'
		public Keyword getHavingHavingKeyword_0() { return cHavingHavingKeyword_0; }
	}
	public class SNAPSHOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SNAPSHOT");
		private final Assignment cSnapshotAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSnapshotSnapshotKeyword_0 = (Keyword)cSnapshotAssignment.eContents().get(0);
		
		//fragment SNAPSHOT:
		//	snapshot='snapshot';
		@Override public ParserRule getRule() { return rule; }
		
		//snapshot='snapshot'
		public Assignment getSnapshotAssignment() { return cSnapshotAssignment; }
		
		//'snapshot'
		public Keyword getSnapshotSnapshotKeyword_0() { return cSnapshotSnapshotKeyword_0; }
	}
	public class FIRSTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FIRST");
		private final Assignment cFirstAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cFirstFirstKeyword_0 = (Keyword)cFirstAssignment.eContents().get(0);
		
		//fragment FIRST:
		//	first='first';
		@Override public ParserRule getRule() { return rule; }
		
		//first='first'
		public Assignment getFirstAssignment() { return cFirstAssignment; }
		
		//'first'
		public Keyword getFirstFirstKeyword_0() { return cFirstFirstKeyword_0; }
	}
	public class INSERTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.INSERT");
		private final Assignment cInsertAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cInsertInsertKeyword_0 = (Keyword)cInsertAssignment.eContents().get(0);
		
		//fragment INSERT:
		//	insert='insert';
		@Override public ParserRule getRule() { return rule; }
		
		//insert='insert'
		public Assignment getInsertAssignment() { return cInsertAssignment; }
		
		//'insert'
		public Keyword getInsertInsertKeyword_0() { return cInsertInsertKeyword_0; }
	}
	public class INTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.INTO");
		private final Assignment cIntoAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIntoIntoKeyword_0 = (Keyword)cIntoAssignment.eContents().get(0);
		
		//fragment INTO:
		//	into='into';
		@Override public ParserRule getRule() { return rule; }
		
		//into='into'
		public Assignment getIntoAssignment() { return cIntoAssignment; }
		
		//'into'
		public Keyword getIntoIntoKeyword_0() { return cIntoIntoKeyword_0; }
	}
	public class BEGINElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.BEGIN");
		private final Assignment cBeginAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cBeginBeginKeyword_0 = (Keyword)cBeginAssignment.eContents().get(0);
		
		////fragment OF: (of='of');
		//fragment BEGIN:
		//	begin='begin';
		@Override public ParserRule getRule() { return rule; }
		
		//begin='begin'
		public Assignment getBeginAssignment() { return cBeginAssignment; }
		
		//'begin'
		public Keyword getBeginBeginKeyword_0() { return cBeginBeginKeyword_0; }
	}
	public class PLANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PLAN");
		private final Assignment cPlanAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cPlanPlanKeyword_0 = (Keyword)cPlanAssignment.eContents().get(0);
		
		//fragment PLAN:
		//	plan='plan';
		@Override public ParserRule getRule() { return rule; }
		
		//plan='plan'
		public Assignment getPlanAssignment() { return cPlanAssignment; }
		
		//'plan'
		public Keyword getPlanPlanKeyword_0() { return cPlanPlanKeyword_0; }
	}
	public class DELETEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DELETE");
		private final Assignment cDeleteAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDeleteDeleteKeyword_0 = (Keyword)cDeleteAssignment.eContents().get(0);
		
		//fragment DELETE:
		//	delete='delete';
		@Override public ParserRule getRule() { return rule; }
		
		//delete='delete'
		public Assignment getDeleteAssignment() { return cDeleteAssignment; }
		
		//'delete'
		public Keyword getDeleteDeleteKeyword_0() { return cDeleteDeleteKeyword_0; }
	}
	public class FORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FOR");
		private final Assignment cForAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cForForKeyword_0 = (Keyword)cForAssignment.eContents().get(0);
		
		//fragment FOR:
		//	for='for';
		@Override public ParserRule getRule() { return rule; }
		
		//for='for'
		public Assignment getForAssignment() { return cForAssignment; }
		
		//'for'
		public Keyword getForForKeyword_0() { return cForForKeyword_0; }
	}
	public class UPDATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.UPDATE");
		private final Assignment cUpdateAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cUpdateUpdateKeyword_0 = (Keyword)cUpdateAssignment.eContents().get(0);
		
		//fragment UPDATE:
		//	update='update';
		@Override public ParserRule getRule() { return rule; }
		
		//update='update'
		public Assignment getUpdateAssignment() { return cUpdateAssignment; }
		
		//'update'
		public Keyword getUpdateUpdateKeyword_0() { return cUpdateUpdateKeyword_0; }
	}
	public class ENDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.END");
		private final Assignment cEndAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cEndEndKeyword_0 = (Keyword)cEndAssignment.eContents().get(0);
		
		//fragment END:
		//	end='end';
		@Override public ParserRule getRule() { return rule; }
		
		//end='end'
		public Assignment getEndAssignment() { return cEndAssignment; }
		
		//'end'
		public Keyword getEndEndKeyword_0() { return cEndEndKeyword_0; }
	}
	public class PARTITIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PARTITION");
		private final Assignment cPartitionAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cPartitionPartitionKeyword_0 = (Keyword)cPartitionAssignment.eContents().get(0);
		
		//fragment PARTITION:
		//	partition='partition';
		@Override public ParserRule getRule() { return rule; }
		
		//partition='partition'
		public Assignment getPartitionAssignment() { return cPartitionAssignment; }
		
		//'partition'
		public Keyword getPartitionPartitionKeyword_0() { return cPartitionPartitionKeyword_0; }
	}
	public class WITHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.WITH");
		private final Assignment cWiAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cWiWithKeyword_0 = (Keyword)cWiAssignment.eContents().get(0);
		
		//fragment WITH:
		//	wi='with';
		@Override public ParserRule getRule() { return rule; }
		
		//wi='with'
		public Assignment getWiAssignment() { return cWiAssignment; }
		
		//'with'
		public Keyword getWiWithKeyword_0() { return cWiWithKeyword_0; }
	}
	public class AGGREGATIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AGGREGATION");
		private final Assignment cAggreAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cAggreAggregationKeyword_0 = (Keyword)cAggreAssignment.eContents().get(0);
		
		//fragment AGGREGATION:
		//	aggre='aggregation';
		@Override public ParserRule getRule() { return rule; }
		
		//aggre='aggregation'
		public Assignment getAggreAssignment() { return cAggreAssignment; }
		
		//'aggregation'
		public Keyword getAggreAggregationKeyword_0() { return cAggreAggregationKeyword_0; }
	}
	public class AGGREGATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AGGREGATE");
		private final Assignment cAgrregateAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cAgrregateAggregateKeyword_0 = (Keyword)cAgrregateAssignment.eContents().get(0);
		
		//fragment AGGREGATE:
		//	agrregate='aggregate';
		@Override public ParserRule getRule() { return rule; }
		
		//agrregate='aggregate'
		public Assignment getAgrregateAssignment() { return cAgrregateAssignment; }
		
		//'aggregate'
		public Keyword getAgrregateAggregateKeyword_0() { return cAgrregateAggregateKeyword_0; }
	}
	public class SETElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SET");
		private final Assignment cSetAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cSetSetKeyword_0 = (Keyword)cSetAssignment.eContents().get(0);
		
		//fragment SET:
		//	set='set';
		@Override public ParserRule getRule() { return rule; }
		
		//set='set'
		public Assignment getSetAssignment() { return cSetAssignment; }
		
		//'set'
		public Keyword getSetSetKeyword_0() { return cSetSetKeyword_0; }
	}
	public class PERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PER");
		private final Assignment cPerAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cPerPerKeyword_0 = (Keyword)cPerAssignment.eContents().get(0);
		
		//fragment PER:
		//	per='per';
		@Override public ParserRule getRule() { return rule; }
		
		//per='per'
		public Assignment getPerAssignment() { return cPerAssignment; }
		
		//'per'
		public Keyword getPerPerKeyword_0() { return cPerPerKeyword_0; }
	}
	public class YEARSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.YEARS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cYearAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cYearYearKeyword_0_0 = (Keyword)cYearAssignment_0.eContents().get(0);
		private final Assignment cYearsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cYearsYearsKeyword_1_0 = (Keyword)cYearsAssignment_1.eContents().get(0);
		
		//fragment YEARS:
		//	year='year' | years='years';
		@Override public ParserRule getRule() { return rule; }
		
		//year='year' | years='years'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//year='year'
		public Assignment getYearAssignment_0() { return cYearAssignment_0; }
		
		//'year'
		public Keyword getYearYearKeyword_0_0() { return cYearYearKeyword_0_0; }
		
		//years='years'
		public Assignment getYearsAssignment_1() { return cYearsAssignment_1; }
		
		//'years'
		public Keyword getYearsYearsKeyword_1_0() { return cYearsYearsKeyword_1_0; }
	}
	public class MONTHSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MONTHS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMonthAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cMonthMonthKeyword_0_0 = (Keyword)cMonthAssignment_0.eContents().get(0);
		private final Assignment cMonthsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMonthsMonthsKeyword_1_0 = (Keyword)cMonthsAssignment_1.eContents().get(0);
		
		//fragment MONTHS:
		//	month='month' | months='months';
		@Override public ParserRule getRule() { return rule; }
		
		//month='month' | months='months'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//month='month'
		public Assignment getMonthAssignment_0() { return cMonthAssignment_0; }
		
		//'month'
		public Keyword getMonthMonthKeyword_0_0() { return cMonthMonthKeyword_0_0; }
		
		//months='months'
		public Assignment getMonthsAssignment_1() { return cMonthsAssignment_1; }
		
		//'months'
		public Keyword getMonthsMonthsKeyword_1_0() { return cMonthsMonthsKeyword_1_0; }
	}
	public class WEEKSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.WEEKS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cWeekAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cWeekWeekKeyword_0_0 = (Keyword)cWeekAssignment_0.eContents().get(0);
		private final Assignment cWeeksAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cWeeksWeeksKeyword_1_0 = (Keyword)cWeeksAssignment_1.eContents().get(0);
		
		//fragment WEEKS:
		//	week='week' | weeks='weeks';
		@Override public ParserRule getRule() { return rule; }
		
		//week='week' | weeks='weeks'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//week='week'
		public Assignment getWeekAssignment_0() { return cWeekAssignment_0; }
		
		//'week'
		public Keyword getWeekWeekKeyword_0_0() { return cWeekWeekKeyword_0_0; }
		
		//weeks='weeks'
		public Assignment getWeeksAssignment_1() { return cWeeksAssignment_1; }
		
		//'weeks'
		public Keyword getWeeksWeeksKeyword_1_0() { return cWeeksWeeksKeyword_1_0; }
	}
	public class DAYSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DAYS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDayAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cDayDayKeyword_0_0 = (Keyword)cDayAssignment_0.eContents().get(0);
		private final Assignment cDaysAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDaysDaysKeyword_1_0 = (Keyword)cDaysAssignment_1.eContents().get(0);
		
		//fragment DAYS:
		//	day='day' | days='days';
		@Override public ParserRule getRule() { return rule; }
		
		//day='day' | days='days'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//day='day'
		public Assignment getDayAssignment_0() { return cDayAssignment_0; }
		
		//'day'
		public Keyword getDayDayKeyword_0_0() { return cDayDayKeyword_0_0; }
		
		//days='days'
		public Assignment getDaysAssignment_1() { return cDaysAssignment_1; }
		
		//'days'
		public Keyword getDaysDaysKeyword_1_0() { return cDaysDaysKeyword_1_0; }
	}
	public class HOURSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.HOURS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cHourAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cHourHourKeyword_0_0 = (Keyword)cHourAssignment_0.eContents().get(0);
		private final Assignment cHoursAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cHoursHoursKeyword_1_0 = (Keyword)cHoursAssignment_1.eContents().get(0);
		
		//fragment HOURS:
		//	hour='hour' | hours='hours';
		@Override public ParserRule getRule() { return rule; }
		
		//hour='hour' | hours='hours'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//hour='hour'
		public Assignment getHourAssignment_0() { return cHourAssignment_0; }
		
		//'hour'
		public Keyword getHourHourKeyword_0_0() { return cHourHourKeyword_0_0; }
		
		//hours='hours'
		public Assignment getHoursAssignment_1() { return cHoursAssignment_1; }
		
		//'hours'
		public Keyword getHoursHoursKeyword_1_0() { return cHoursHoursKeyword_1_0; }
	}
	public class MINUTESElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MINUTES");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMinuteAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cMinuteMinuteKeyword_0_0 = (Keyword)cMinuteAssignment_0.eContents().get(0);
		private final Assignment cMinutesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMinutesMinutesKeyword_1_0 = (Keyword)cMinutesAssignment_1.eContents().get(0);
		private final Assignment cMinAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cMinMinKeyword_2_0 = (Keyword)cMinAssignment_2.eContents().get(0);
		
		//fragment MINUTES:
		//	minute='minute' | minutes='minutes' | min='min';
		@Override public ParserRule getRule() { return rule; }
		
		//minute='minute' | minutes='minutes' | min='min'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//minute='minute'
		public Assignment getMinuteAssignment_0() { return cMinuteAssignment_0; }
		
		//'minute'
		public Keyword getMinuteMinuteKeyword_0_0() { return cMinuteMinuteKeyword_0_0; }
		
		//minutes='minutes'
		public Assignment getMinutesAssignment_1() { return cMinutesAssignment_1; }
		
		//'minutes'
		public Keyword getMinutesMinutesKeyword_1_0() { return cMinutesMinutesKeyword_1_0; }
		
		//min='min'
		public Assignment getMinAssignment_2() { return cMinAssignment_2; }
		
		//'min'
		public Keyword getMinMinKeyword_2_0() { return cMinMinKeyword_2_0; }
	}
	public class SECONDSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SECONDS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSecondAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cSecondSecondKeyword_0_0 = (Keyword)cSecondAssignment_0.eContents().get(0);
		private final Assignment cSecondsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cSecondsSecondsKeyword_1_0 = (Keyword)cSecondsAssignment_1.eContents().get(0);
		private final Assignment cSecAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cSecSecKeyword_2_0 = (Keyword)cSecAssignment_2.eContents().get(0);
		
		//fragment SECONDS:
		//	second='second' | seconds='seconds' | sec='sec';
		@Override public ParserRule getRule() { return rule; }
		
		//second='second' | seconds='seconds' | sec='sec'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//second='second'
		public Assignment getSecondAssignment_0() { return cSecondAssignment_0; }
		
		//'second'
		public Keyword getSecondSecondKeyword_0_0() { return cSecondSecondKeyword_0_0; }
		
		//seconds='seconds'
		public Assignment getSecondsAssignment_1() { return cSecondsAssignment_1; }
		
		//'seconds'
		public Keyword getSecondsSecondsKeyword_1_0() { return cSecondsSecondsKeyword_1_0; }
		
		//sec='sec'
		public Assignment getSecAssignment_2() { return cSecAssignment_2; }
		
		//'sec'
		public Keyword getSecSecKeyword_2_0() { return cSecSecKeyword_2_0; }
	}
	public class MILLISECONDSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MILLISECONDS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMillisecondAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cMillisecondMillisecondKeyword_0_0 = (Keyword)cMillisecondAssignment_0.eContents().get(0);
		private final Assignment cMillisecondsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMillisecondsMillisecondsKeyword_1_0 = (Keyword)cMillisecondsAssignment_1.eContents().get(0);
		private final Assignment cMillisecAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cMillisecMillisecKeyword_2_0 = (Keyword)cMillisecAssignment_2.eContents().get(0);
		
		//fragment MILLISECONDS:
		//	millisecond='millisecond' | milliseconds='milliseconds' | millisec='millisec';
		@Override public ParserRule getRule() { return rule; }
		
		//millisecond='millisecond' | milliseconds='milliseconds' | millisec='millisec'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//millisecond='millisecond'
		public Assignment getMillisecondAssignment_0() { return cMillisecondAssignment_0; }
		
		//'millisecond'
		public Keyword getMillisecondMillisecondKeyword_0_0() { return cMillisecondMillisecondKeyword_0_0; }
		
		//milliseconds='milliseconds'
		public Assignment getMillisecondsAssignment_1() { return cMillisecondsAssignment_1; }
		
		//'milliseconds'
		public Keyword getMillisecondsMillisecondsKeyword_1_0() { return cMillisecondsMillisecondsKeyword_1_0; }
		
		//millisec='millisec'
		public Assignment getMillisecAssignment_2() { return cMillisecAssignment_2; }
		
		//'millisec'
		public Keyword getMillisecMillisecKeyword_2_0() { return cMillisecMillisecKeyword_2_0; }
	}
	public class FALSEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FALSE");
		private final Assignment cFalsAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cFalsFalseKeyword_0 = (Keyword)cFalsAssignment.eContents().get(0);
		
		//fragment FALSE:
		//	fals='false';
		@Override public ParserRule getRule() { return rule; }
		
		//fals='false'
		public Assignment getFalsAssignment() { return cFalsAssignment; }
		
		//'false'
		public Keyword getFalsFalseKeyword_0() { return cFalsFalseKeyword_0; }
	}
	public class TRUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.TRUE");
		private final Assignment cTrAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTrTrueKeyword_0 = (Keyword)cTrAssignment.eContents().get(0);
		
		//fragment TRUE:
		//	tr='true';
		@Override public ParserRule getRule() { return rule; }
		
		//tr='true'
		public Assignment getTrAssignment() { return cTrAssignment; }
		
		//'true'
		public Keyword getTrTrueKeyword_0() { return cTrTrueKeyword_0; }
	}
	public class COLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.COL");
		private final Keyword cColonKeyword = (Keyword)rule.eContents().get(1);
		
		////fragment D: (d='d');
		////fragment E: (e='e');
		////fragment F: (f='f');
		////fragment L: (l='l');
		//COL:
		//	':';
		@Override public ParserRule getRule() { return rule; }
		
		//':'
		public Keyword getColonKeyword() { return cColonKeyword; }
	}
	public class SCOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SCOL");
		private final Keyword cSemicolonKeyword = (Keyword)rule.eContents().get(1);
		
		//SCOL:
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//';'
		public Keyword getSemicolonKeyword() { return cSemicolonKeyword; }
	}
	public class DOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DOT");
		private final Keyword cFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//DOT:
		//	'.';
		@Override public ParserRule getRule() { return rule; }
		
		//'.'
		public Keyword getFullStopKeyword() { return cFullStopKeyword; }
	}
	public class TRIPLE_DOTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.TRIPLE_DOT");
		private final Keyword cFullStopFullStopFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//TRIPLE_DOT:
		//	'...';
		@Override public ParserRule getRule() { return rule; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword() { return cFullStopFullStopFullStopKeyword; }
	}
	public class OPEN_PARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OPEN_PAR");
		private final Keyword cLeftParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//OPEN_PAR:
		//	'(';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		public Keyword getLeftParenthesisKeyword() { return cLeftParenthesisKeyword; }
	}
	public class CLOSE_PARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.CLOSE_PAR");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//CLOSE_PAR:
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//')'
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}
	public class OPEN_SQARE_BRACKETSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.OPEN_SQARE_BRACKETS");
		private final Keyword cLeftSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//OPEN_SQARE_BRACKETS:
		//	'[';
		@Override public ParserRule getRule() { return rule; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword() { return cLeftSquareBracketKeyword; }
	}
	public class CLOSE_SQARE_BRACKETSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.CLOSE_SQARE_BRACKETS");
		private final Keyword cRightSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//CLOSE_SQARE_BRACKETS:
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//']'
		public Keyword getRightSquareBracketKeyword() { return cRightSquareBracketKeyword; }
	}
	public class COMMAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.COMMA");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//COMMA:
		//	',';
		@Override public ParserRule getRule() { return rule; }
		
		//','
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}
	public class ASSIGNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ASSIGN");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//ASSIGN:
		//	'=';
		@Override public ParserRule getRule() { return rule; }
		
		//'='
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}
	public class STARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.STAR");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//STAR:
		//	'*';
		@Override public ParserRule getRule() { return rule; }
		
		//'*'
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}
	public class PLUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.PLUS");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//PLUS:
		//	'+';
		@Override public ParserRule getRule() { return rule; }
		
		//'+'
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}
	public class QUESTIONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.QUESTION");
		private final Keyword cQuestionMarkKeyword = (Keyword)rule.eContents().get(1);
		
		//QUESTION:
		//	'?';
		@Override public ParserRule getRule() { return rule; }
		
		//'?'
		public Keyword getQuestionMarkKeyword() { return cQuestionMarkKeyword; }
	}
	public class MINUSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MINUS");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//MINUS:
		//	'-';
		@Override public ParserRule getRule() { return rule; }
		
		//'-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}
	public class DIVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.DIV");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//DIV:
		//	'/';
		@Override public ParserRule getRule() { return rule; }
		
		//'/'
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}
	public class MODElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.MOD");
		private final Keyword cPercentSignKeyword = (Keyword)rule.eContents().get(1);
		
		//MOD:
		//	'%';
		@Override public ParserRule getRule() { return rule; }
		
		//'%'
		public Keyword getPercentSignKeyword() { return cPercentSignKeyword; }
	}
	public class LTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LT");
		private final Keyword cLessThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//LT:
		//	'<';
		@Override public ParserRule getRule() { return rule; }
		
		//'<'
		public Keyword getLessThanSignKeyword() { return cLessThanSignKeyword; }
	}
	public class LT_EQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.LT_EQ");
		private final Keyword cLessThanSignEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//LT_EQ:
		//	'<=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword() { return cLessThanSignEqualsSignKeyword; }
	}
	public class GTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.GT");
		private final Keyword cGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//GT:
		//	'>';
		@Override public ParserRule getRule() { return rule; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword() { return cGreaterThanSignKeyword; }
	}
	public class GT_EQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.GT_EQ");
		private final Keyword cGreaterThanSignEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//GT_EQ:
		//	'>=';
		@Override public ParserRule getRule() { return rule; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword() { return cGreaterThanSignEqualsSignKeyword; }
	}
	public class EQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.EQ");
		private final Keyword cEqualsSignEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//EQ:
		//	'==';
		@Override public ParserRule getRule() { return rule; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword() { return cEqualsSignEqualsSignKeyword; }
	}
	public class NOT_EQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.NOT_EQ");
		private final Keyword cExclamationMarkEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//NOT_EQ:
		//	'!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword() { return cExclamationMarkEqualsSignKeyword; }
	}
	public class AT_SYMBOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.AT_SYMBOL");
		private final Keyword cCommercialAtKeyword = (Keyword)rule.eContents().get(1);
		
		//AT_SYMBOL:
		//	'@';
		@Override public ParserRule getRule() { return rule; }
		
		//'@'
		public Keyword getCommercialAtKeyword() { return cCommercialAtKeyword; }
	}
	public class FOLLOWED_BYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.FOLLOWED_BY");
		private final Keyword cHyphenMinusGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//FOLLOWED_BY:
		//	'->';
		@Override public ParserRule getRule() { return rule; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword() { return cHyphenMinusGreaterThanSignKeyword; }
	}
	public class HASHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.HASH");
		private final Keyword cNumberSignKeyword = (Keyword)rule.eContents().get(1);
		
		//HASH:
		//	'#';
		@Override public ParserRule getRule() { return rule; }
		
		//'#'
		public Keyword getNumberSignKeyword() { return cNumberSignKeyword; }
	}
	public class IdNewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.IdNew");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IdNew:
		//	ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}
	
	
	private final SiddhiQLElements pSiddhiQL;
	private final ExecutionPlanElements pExecutionPlan;
	private final ExecutionElementElements pExecutionElement;
	private final DefinitionStreamElements pDefinitionStream;
	private final DefinitionTableElements pDefinitionTable;
	private final DefinitionWindowElements pDefinitionWindow;
	private final DefinitionTriggerElements pDefinitionTrigger;
	private final DefinitionFunctionElements pDefinitionFunction;
	private final DefinitionAggregationElements pDefinitionAggregation;
	private final AggregationTimeElements pAggregationTime;
	private final Aggregation_time_intervalElements pAggregation_time_interval;
	private final AggregationTimeDurationElements pAggregationTimeDuration;
	private final AggregationTimeRangeElements pAggregationTimeRange;
	private final FunctionNameElements pFunctionName;
	private final LanguageNameElements pLanguageName;
	private final FunctionBodyElements pFunctionBody;
	private final TerminalRule tSCRIPT;
	private final TerminalRule tSCRIPT_ATOM;
	private final TriggerNameElements pTriggerName;
	private final AppAnnotationElements pAppAnnotation;
	private final AnnotationElements pAnnotation;
	private final AnnotationElementElements pAnnotationElement;
	private final PropertyValueElements pPropertyValue;
	private final PropertyNameElements pPropertyName;
	private final PropertySeparatorElements pPropertySeparator;
	private final FeaturesElements pFeatures;
	private final AttributeTypeElements pAttributeType;
	private final ExecPartitionElements pExecPartition;
	private final PartitionWithStreamElements pPartitionWithStream;
	private final ConditionRangesElements pConditionRanges;
	private final ConditionRangeElements pConditionRange;
	private final QueryElements pQuery;
	private final QueryInputElements pQueryInput;
	private final JoinStreamElements pJoinStream;
	private final WithinTimeRangeElements pWithinTimeRange;
	private final Per1Elements pPer1;
	private final JoinSourceElements pJoinSource;
	private final StreamAliasElements pStreamAlias;
	private final JoinsElements pJoins;
	private final StandardStreamElements pStandardStream;
	private final MainSourceElements pMainSource;
	private final PatternStreamElements pPatternStream;
	private final EveryPatternSourceChainElements pEveryPatternSourceChain;
	private final EveryPatternSourceChain1Elements pEveryPatternSourceChain1;
	private final PatternSourceChainElements pPatternSourceChain;
	private final PatternSourceChain1Elements pPatternSourceChain1;
	private final PatternSourceElements pPatternSource;
	private final LogicalStatefulSourceElements pLogicalStatefulSource;
	private final PatternCollectionStatefulSourceElements pPatternCollectionStatefulSource;
	private final CollectElements pCollect;
	private final WithinTimeElements pWithinTime;
	private final LogicalAbsentStatefulSourceElements pLogicalAbsentStatefulSource;
	private final AbsentPatternSourceChainElements pAbsentPatternSourceChain;
	private final EveryAbsentPatternSourceElements pEveryAbsentPatternSource;
	private final BasicAbsentPatternSourceElements pBasicAbsentPatternSource;
	private final ForTimeElements pForTime;
	private final LeftAbsentPatternSourceElements pLeftAbsentPatternSource;
	private final LeftAbsentPatternSource1Elements pLeftAbsentPatternSource1;
	private final LeftAbsentPatternSource2Elements pLeftAbsentPatternSource2;
	private final RightAbsentPatternSourceElements pRightAbsentPatternSource;
	private final RightAbsentPatternSource1Elements pRightAbsentPatternSource1;
	private final RightAbsentPatternSource2Elements pRightAbsentPatternSource2;
	private final SequenceStreamElements pSequenceStream;
	private final EverySequenceSourceChainElements pEverySequenceSourceChain;
	private final EveryAbsentSequenceSourceChainElements pEveryAbsentSequenceSourceChain;
	private final AbsentSequenceSourceChainElements pAbsentSequenceSourceChain;
	private final LeftAbsentSequenceSourceElements pLeftAbsentSequenceSource;
	private final LeftAbsentSequenceSource1Elements pLeftAbsentSequenceSource1;
	private final LeftAbsentSequenceSource2Elements pLeftAbsentSequenceSource2;
	private final RightAbsentSequenceSourceElements pRightAbsentSequenceSource;
	private final RightAbsentSequenceSource1Elements pRightAbsentSequenceSource1;
	private final RightAbsentSequenceSource2Elements pRightAbsentSequenceSource2;
	private final SequenceSourceChainElements pSequenceSourceChain;
	private final SequenceSourceChain1Elements pSequenceSourceChain1;
	private final SequenceSourceElements pSequenceSource;
	private final SequenceCollectionStatefulSourceElements pSequenceCollectionStatefulSource;
	private final AnonymousStreamElements pAnonymousStream;
	private final OutputRateElements pOutputRate;
	private final OutputRateTypeElements pOutputRateType;
	private final QueryOutputElements pQueryOutput;
	private final SetClauseElements pSetClause;
	private final SetAssignmentElements pSetAssignment;
	private final OutputEventTypeElements pOutputEventType;
	private final BasicSourceStreamHandlersElements pBasicSourceStreamHandlers;
	private final BasicSourceStreamHandlers1Elements pBasicSourceStreamHandlers1;
	private final BasicSourceStreamHandlerElements pBasicSourceStreamHandler;
	private final FilterElements pFilter;
	private final StreamFunctionElements pStreamFunction;
	private final WinElements pWin;
	private final ExpressionElements pExpression;
	private final FunctionOperationElements pFunctionOperation;
	private final FunctionNamespaceElements pFunctionNamespace;
	private final FunctionIdElements pFunctionId;
	private final AttributeListElements pAttributeList;
	private final AttributeElements pAttribute;
	private final GroupByQuerySelectionElements pGroupByQuerySelection;
	private final QuerySectionElements pQuerySection;
	private final OutputAttributeElements pOutputAttribute;
	private final OutAttrElements pOutAttr;
	private final GroupByElements pGroupBy;
	private final HavingExprElements pHavingExpr;
	private final MathOperationElements pMathOperation;
	private final MathLogicalOperationElements pMathLogicalOperation;
	private final MathInOperationElements pMathInOperation;
	private final MathGtLtOperationElements pMathGtLtOperation;
	private final MathEqualOperationElements pMathEqualOperation;
	private final MathAddsubOperationElements pMathAddsubOperation;
	private final MathDivmulOperationElements pMathDivmulOperation;
	private final MathOtherOperationsElements pMathOtherOperations;
	private final NullCheckElements pNullCheck;
	private final StreamReferenceElements pStreamReference;
	private final MathOtherOperations1Elements pMathOtherOperations1;
	private final AttributeReferenceElements pAttributeReference;
	private final AttributeNameReferenceElements pAttributeNameReference;
	private final AttributeIndexElements pAttributeIndex;
	private final StandardStatefulSourceElements pStandardStatefulSource;
	private final Source1OrStandardStatefulSourceElements pSource1OrStandardStatefulSource;
	private final SourceOrEventReferenceElements pSourceOrEventReference;
	private final BasicSourceElements pBasicSource;
	private final FeaturesOrOutAttrElements pFeaturesOrOutAttr;
	private final FeaturesOrOutAttrReferenceElements pFeaturesOrOutAttrReference;
	private final ConstantValueElements pConstantValue;
	private final NameElements pName;
	private final SourceElements pSource;
	private final Source1Elements pSource1;
	private final BoolValueElements pBoolValue;
	private final SignedDoubleValueElements pSignedDoubleValue;
	private final SignedFloatValueElements pSignedFloatValue;
	private final SignedLongValueElements pSignedLongValue;
	private final StringValueElements pStringValue;
	private final TimeValueElements pTimeValue;
	private final YearValueElements pYearValue;
	private final MonthValueElements pMonthValue;
	private final WeekValueElements pWeekValue;
	private final DayValueElements pDayValue;
	private final HourValueElements pHourValue;
	private final MinuteValueElements pMinuteValue;
	private final SecondValueElements pSecondValue;
	private final MillisecondValueElements pMillisecondValue;
	private final SignedIntValueElements pSignedIntValue;
	private final STRING_LITERALElements pSTRING_LITERAL;
	private final INT_LITERALElements pINT_LITERAL;
	private final DOUBLE_LITERALElements pDOUBLE_LITERAL;
	private final FLOAT_LITERALElements pFLOAT_LITERAL;
	private final LONG_LITERALElements pLONG_LITERAL;
	private final DIGITElements pDIGIT;
	private final KeywordElements pKeyword;
	private final ASElements pAS;
	private final ONElements pON;
	private final UNIDIRECTIONALElements pUNIDIRECTIONAL;
	private final NOTElements pNOT;
	private final EVERYElements pEVERY;
	private final ANDElements pAND;
	private final ORElements pOR;
	private final INElements pIN;
	private final OFElements pOF;
	private final EElements pE;
	private final DElements pD;
	private final FElements pF;
	private final LElements pL;
	private final APPElements pAPP;
	private final STREAMElements pSTREAM;
	private final DEFINEElements pDEFINE;
	private final TABLEElements pTABLE;
	private final WINDOWElements pWINDOW;
	private final OUTPUTElements pOUTPUT;
	private final STRINGSElements pSTRINGS;
	private final INTSElements pINTS;
	private final LONGElements pLONG;
	private final DOUBLEElements pDOUBLE;
	private final FLOATElements pFLOAT;
	private final BOOLElements pBOOL;
	private final OBJECTElements pOBJECT;
	private final ALLElements pALL;
	private final EVENTSElements pEVENTS;
	private final RAWElements pRAW;
	private final EXPIREDElements pEXPIRED;
	private final CURRENTElements pCURRENT;
	private final LASTElements pLAST;
	private final ISElements pIS;
	private final NULLElements pNULL;
	private final TRIGGERElements pTRIGGER;
	private final ATElements pAT;
	private final FUNCTIONElements pFUNCTION;
	private final RETURNElements pRETURN;
	private final FROMElements pFROM;
	private final WITHINElements pWITHIN;
	private final LEFTElements pLEFT;
	private final RIGHTElements pRIGHT;
	private final FULLElements pFULL;
	private final JOINElements pJOIN;
	private final INNERElements pINNER;
	private final OUTERElements pOUTER;
	private final SELECTElements pSELECT;
	private final GROUPElements pGROUP;
	private final BYElements pBY;
	private final HAVINGElements pHAVING;
	private final SNAPSHOTElements pSNAPSHOT;
	private final FIRSTElements pFIRST;
	private final INSERTElements pINSERT;
	private final INTOElements pINTO;
	private final BEGINElements pBEGIN;
	private final PLANElements pPLAN;
	private final DELETEElements pDELETE;
	private final FORElements pFOR;
	private final UPDATEElements pUPDATE;
	private final ENDElements pEND;
	private final PARTITIONElements pPARTITION;
	private final WITHElements pWITH;
	private final AGGREGATIONElements pAGGREGATION;
	private final AGGREGATEElements pAGGREGATE;
	private final SETElements pSET;
	private final PERElements pPER;
	private final YEARSElements pYEARS;
	private final MONTHSElements pMONTHS;
	private final WEEKSElements pWEEKS;
	private final DAYSElements pDAYS;
	private final HOURSElements pHOURS;
	private final MINUTESElements pMINUTES;
	private final SECONDSElements pSECONDS;
	private final MILLISECONDSElements pMILLISECONDS;
	private final FALSEElements pFALSE;
	private final TRUEElements pTRUE;
	private final COLElements pCOL;
	private final SCOLElements pSCOL;
	private final DOTElements pDOT;
	private final TRIPLE_DOTElements pTRIPLE_DOT;
	private final OPEN_PARElements pOPEN_PAR;
	private final CLOSE_PARElements pCLOSE_PAR;
	private final OPEN_SQARE_BRACKETSElements pOPEN_SQARE_BRACKETS;
	private final CLOSE_SQARE_BRACKETSElements pCLOSE_SQARE_BRACKETS;
	private final COMMAElements pCOMMA;
	private final ASSIGNElements pASSIGN;
	private final STARElements pSTAR;
	private final PLUSElements pPLUS;
	private final QUESTIONElements pQUESTION;
	private final MINUSElements pMINUS;
	private final DIVElements pDIV;
	private final MODElements pMOD;
	private final LTElements pLT;
	private final LT_EQElements pLT_EQ;
	private final GTElements pGT;
	private final GT_EQElements pGT_EQ;
	private final EQElements pEQ;
	private final NOT_EQElements pNOT_EQ;
	private final AT_SYMBOLElements pAT_SYMBOL;
	private final FOLLOWED_BYElements pFOLLOWED_BY;
	private final HASHElements pHASH;
	private final IdNewElements pIdNew;
	private final TerminalRule tID_QUOTES;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SiddhiGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSiddhiQL = new SiddhiQLElements();
		this.pExecutionPlan = new ExecutionPlanElements();
		this.pExecutionElement = new ExecutionElementElements();
		this.pDefinitionStream = new DefinitionStreamElements();
		this.pDefinitionTable = new DefinitionTableElements();
		this.pDefinitionWindow = new DefinitionWindowElements();
		this.pDefinitionTrigger = new DefinitionTriggerElements();
		this.pDefinitionFunction = new DefinitionFunctionElements();
		this.pDefinitionAggregation = new DefinitionAggregationElements();
		this.pAggregationTime = new AggregationTimeElements();
		this.pAggregation_time_interval = new Aggregation_time_intervalElements();
		this.pAggregationTimeDuration = new AggregationTimeDurationElements();
		this.pAggregationTimeRange = new AggregationTimeRangeElements();
		this.pFunctionName = new FunctionNameElements();
		this.pLanguageName = new LanguageNameElements();
		this.pFunctionBody = new FunctionBodyElements();
		this.tSCRIPT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SCRIPT");
		this.tSCRIPT_ATOM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SCRIPT_ATOM");
		this.pTriggerName = new TriggerNameElements();
		this.pAppAnnotation = new AppAnnotationElements();
		this.pAnnotation = new AnnotationElements();
		this.pAnnotationElement = new AnnotationElementElements();
		this.pPropertyValue = new PropertyValueElements();
		this.pPropertyName = new PropertyNameElements();
		this.pPropertySeparator = new PropertySeparatorElements();
		this.pFeatures = new FeaturesElements();
		this.pAttributeType = new AttributeTypeElements();
		this.pExecPartition = new ExecPartitionElements();
		this.pPartitionWithStream = new PartitionWithStreamElements();
		this.pConditionRanges = new ConditionRangesElements();
		this.pConditionRange = new ConditionRangeElements();
		this.pQuery = new QueryElements();
		this.pQueryInput = new QueryInputElements();
		this.pJoinStream = new JoinStreamElements();
		this.pWithinTimeRange = new WithinTimeRangeElements();
		this.pPer1 = new Per1Elements();
		this.pJoinSource = new JoinSourceElements();
		this.pStreamAlias = new StreamAliasElements();
		this.pJoins = new JoinsElements();
		this.pStandardStream = new StandardStreamElements();
		this.pMainSource = new MainSourceElements();
		this.pPatternStream = new PatternStreamElements();
		this.pEveryPatternSourceChain = new EveryPatternSourceChainElements();
		this.pEveryPatternSourceChain1 = new EveryPatternSourceChain1Elements();
		this.pPatternSourceChain = new PatternSourceChainElements();
		this.pPatternSourceChain1 = new PatternSourceChain1Elements();
		this.pPatternSource = new PatternSourceElements();
		this.pLogicalStatefulSource = new LogicalStatefulSourceElements();
		this.pPatternCollectionStatefulSource = new PatternCollectionStatefulSourceElements();
		this.pCollect = new CollectElements();
		this.pWithinTime = new WithinTimeElements();
		this.pLogicalAbsentStatefulSource = new LogicalAbsentStatefulSourceElements();
		this.pAbsentPatternSourceChain = new AbsentPatternSourceChainElements();
		this.pEveryAbsentPatternSource = new EveryAbsentPatternSourceElements();
		this.pBasicAbsentPatternSource = new BasicAbsentPatternSourceElements();
		this.pForTime = new ForTimeElements();
		this.pLeftAbsentPatternSource = new LeftAbsentPatternSourceElements();
		this.pLeftAbsentPatternSource1 = new LeftAbsentPatternSource1Elements();
		this.pLeftAbsentPatternSource2 = new LeftAbsentPatternSource2Elements();
		this.pRightAbsentPatternSource = new RightAbsentPatternSourceElements();
		this.pRightAbsentPatternSource1 = new RightAbsentPatternSource1Elements();
		this.pRightAbsentPatternSource2 = new RightAbsentPatternSource2Elements();
		this.pSequenceStream = new SequenceStreamElements();
		this.pEverySequenceSourceChain = new EverySequenceSourceChainElements();
		this.pEveryAbsentSequenceSourceChain = new EveryAbsentSequenceSourceChainElements();
		this.pAbsentSequenceSourceChain = new AbsentSequenceSourceChainElements();
		this.pLeftAbsentSequenceSource = new LeftAbsentSequenceSourceElements();
		this.pLeftAbsentSequenceSource1 = new LeftAbsentSequenceSource1Elements();
		this.pLeftAbsentSequenceSource2 = new LeftAbsentSequenceSource2Elements();
		this.pRightAbsentSequenceSource = new RightAbsentSequenceSourceElements();
		this.pRightAbsentSequenceSource1 = new RightAbsentSequenceSource1Elements();
		this.pRightAbsentSequenceSource2 = new RightAbsentSequenceSource2Elements();
		this.pSequenceSourceChain = new SequenceSourceChainElements();
		this.pSequenceSourceChain1 = new SequenceSourceChain1Elements();
		this.pSequenceSource = new SequenceSourceElements();
		this.pSequenceCollectionStatefulSource = new SequenceCollectionStatefulSourceElements();
		this.pAnonymousStream = new AnonymousStreamElements();
		this.pOutputRate = new OutputRateElements();
		this.pOutputRateType = new OutputRateTypeElements();
		this.pQueryOutput = new QueryOutputElements();
		this.pSetClause = new SetClauseElements();
		this.pSetAssignment = new SetAssignmentElements();
		this.pOutputEventType = new OutputEventTypeElements();
		this.pBasicSourceStreamHandlers = new BasicSourceStreamHandlersElements();
		this.pBasicSourceStreamHandlers1 = new BasicSourceStreamHandlers1Elements();
		this.pBasicSourceStreamHandler = new BasicSourceStreamHandlerElements();
		this.pFilter = new FilterElements();
		this.pStreamFunction = new StreamFunctionElements();
		this.pWin = new WinElements();
		this.pExpression = new ExpressionElements();
		this.pFunctionOperation = new FunctionOperationElements();
		this.pFunctionNamespace = new FunctionNamespaceElements();
		this.pFunctionId = new FunctionIdElements();
		this.pAttributeList = new AttributeListElements();
		this.pAttribute = new AttributeElements();
		this.pGroupByQuerySelection = new GroupByQuerySelectionElements();
		this.pQuerySection = new QuerySectionElements();
		this.pOutputAttribute = new OutputAttributeElements();
		this.pOutAttr = new OutAttrElements();
		this.pGroupBy = new GroupByElements();
		this.pHavingExpr = new HavingExprElements();
		this.pMathOperation = new MathOperationElements();
		this.pMathLogicalOperation = new MathLogicalOperationElements();
		this.pMathInOperation = new MathInOperationElements();
		this.pMathGtLtOperation = new MathGtLtOperationElements();
		this.pMathEqualOperation = new MathEqualOperationElements();
		this.pMathAddsubOperation = new MathAddsubOperationElements();
		this.pMathDivmulOperation = new MathDivmulOperationElements();
		this.pMathOtherOperations = new MathOtherOperationsElements();
		this.pNullCheck = new NullCheckElements();
		this.pStreamReference = new StreamReferenceElements();
		this.pMathOtherOperations1 = new MathOtherOperations1Elements();
		this.pAttributeReference = new AttributeReferenceElements();
		this.pAttributeNameReference = new AttributeNameReferenceElements();
		this.pAttributeIndex = new AttributeIndexElements();
		this.pStandardStatefulSource = new StandardStatefulSourceElements();
		this.pSource1OrStandardStatefulSource = new Source1OrStandardStatefulSourceElements();
		this.pSourceOrEventReference = new SourceOrEventReferenceElements();
		this.pBasicSource = new BasicSourceElements();
		this.pFeaturesOrOutAttr = new FeaturesOrOutAttrElements();
		this.pFeaturesOrOutAttrReference = new FeaturesOrOutAttrReferenceElements();
		this.pConstantValue = new ConstantValueElements();
		this.pName = new NameElements();
		this.pSource = new SourceElements();
		this.pSource1 = new Source1Elements();
		this.pBoolValue = new BoolValueElements();
		this.pSignedDoubleValue = new SignedDoubleValueElements();
		this.pSignedFloatValue = new SignedFloatValueElements();
		this.pSignedLongValue = new SignedLongValueElements();
		this.pStringValue = new StringValueElements();
		this.pTimeValue = new TimeValueElements();
		this.pYearValue = new YearValueElements();
		this.pMonthValue = new MonthValueElements();
		this.pWeekValue = new WeekValueElements();
		this.pDayValue = new DayValueElements();
		this.pHourValue = new HourValueElements();
		this.pMinuteValue = new MinuteValueElements();
		this.pSecondValue = new SecondValueElements();
		this.pMillisecondValue = new MillisecondValueElements();
		this.pSignedIntValue = new SignedIntValueElements();
		this.pSTRING_LITERAL = new STRING_LITERALElements();
		this.pINT_LITERAL = new INT_LITERALElements();
		this.pDOUBLE_LITERAL = new DOUBLE_LITERALElements();
		this.pFLOAT_LITERAL = new FLOAT_LITERALElements();
		this.pLONG_LITERAL = new LONG_LITERALElements();
		this.pDIGIT = new DIGITElements();
		this.pKeyword = new KeywordElements();
		this.pAS = new ASElements();
		this.pON = new ONElements();
		this.pUNIDIRECTIONAL = new UNIDIRECTIONALElements();
		this.pNOT = new NOTElements();
		this.pEVERY = new EVERYElements();
		this.pAND = new ANDElements();
		this.pOR = new ORElements();
		this.pIN = new INElements();
		this.pOF = new OFElements();
		this.pE = new EElements();
		this.pD = new DElements();
		this.pF = new FElements();
		this.pL = new LElements();
		this.pAPP = new APPElements();
		this.pSTREAM = new STREAMElements();
		this.pDEFINE = new DEFINEElements();
		this.pTABLE = new TABLEElements();
		this.pWINDOW = new WINDOWElements();
		this.pOUTPUT = new OUTPUTElements();
		this.pSTRINGS = new STRINGSElements();
		this.pINTS = new INTSElements();
		this.pLONG = new LONGElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pFLOAT = new FLOATElements();
		this.pBOOL = new BOOLElements();
		this.pOBJECT = new OBJECTElements();
		this.pALL = new ALLElements();
		this.pEVENTS = new EVENTSElements();
		this.pRAW = new RAWElements();
		this.pEXPIRED = new EXPIREDElements();
		this.pCURRENT = new CURRENTElements();
		this.pLAST = new LASTElements();
		this.pIS = new ISElements();
		this.pNULL = new NULLElements();
		this.pTRIGGER = new TRIGGERElements();
		this.pAT = new ATElements();
		this.pFUNCTION = new FUNCTIONElements();
		this.pRETURN = new RETURNElements();
		this.pFROM = new FROMElements();
		this.pWITHIN = new WITHINElements();
		this.pLEFT = new LEFTElements();
		this.pRIGHT = new RIGHTElements();
		this.pFULL = new FULLElements();
		this.pJOIN = new JOINElements();
		this.pINNER = new INNERElements();
		this.pOUTER = new OUTERElements();
		this.pSELECT = new SELECTElements();
		this.pGROUP = new GROUPElements();
		this.pBY = new BYElements();
		this.pHAVING = new HAVINGElements();
		this.pSNAPSHOT = new SNAPSHOTElements();
		this.pFIRST = new FIRSTElements();
		this.pINSERT = new INSERTElements();
		this.pINTO = new INTOElements();
		this.pBEGIN = new BEGINElements();
		this.pPLAN = new PLANElements();
		this.pDELETE = new DELETEElements();
		this.pFOR = new FORElements();
		this.pUPDATE = new UPDATEElements();
		this.pEND = new ENDElements();
		this.pPARTITION = new PARTITIONElements();
		this.pWITH = new WITHElements();
		this.pAGGREGATION = new AGGREGATIONElements();
		this.pAGGREGATE = new AGGREGATEElements();
		this.pSET = new SETElements();
		this.pPER = new PERElements();
		this.pYEARS = new YEARSElements();
		this.pMONTHS = new MONTHSElements();
		this.pWEEKS = new WEEKSElements();
		this.pDAYS = new DAYSElements();
		this.pHOURS = new HOURSElements();
		this.pMINUTES = new MINUTESElements();
		this.pSECONDS = new SECONDSElements();
		this.pMILLISECONDS = new MILLISECONDSElements();
		this.pFALSE = new FALSEElements();
		this.pTRUE = new TRUEElements();
		this.pCOL = new COLElements();
		this.pSCOL = new SCOLElements();
		this.pDOT = new DOTElements();
		this.pTRIPLE_DOT = new TRIPLE_DOTElements();
		this.pOPEN_PAR = new OPEN_PARElements();
		this.pCLOSE_PAR = new CLOSE_PARElements();
		this.pOPEN_SQARE_BRACKETS = new OPEN_SQARE_BRACKETSElements();
		this.pCLOSE_SQARE_BRACKETS = new CLOSE_SQARE_BRACKETSElements();
		this.pCOMMA = new COMMAElements();
		this.pASSIGN = new ASSIGNElements();
		this.pSTAR = new STARElements();
		this.pPLUS = new PLUSElements();
		this.pQUESTION = new QUESTIONElements();
		this.pMINUS = new MINUSElements();
		this.pDIV = new DIVElements();
		this.pMOD = new MODElements();
		this.pLT = new LTElements();
		this.pLT_EQ = new LT_EQElements();
		this.pGT = new GTElements();
		this.pGT_EQ = new GT_EQElements();
		this.pEQ = new EQElements();
		this.pNOT_EQ = new NOT_EQElements();
		this.pAT_SYMBOL = new AT_SYMBOLElements();
		this.pFOLLOWED_BY = new FOLLOWED_BYElements();
		this.pHASH = new HASHElements();
		this.pIdNew = new IdNewElements();
		this.tID_QUOTES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ID_QUOTES");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.INT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.siddhi.Siddhi.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.siddhi.Siddhi".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SiddhiQL:
	//	elements+=ExecutionPlan*;
	public SiddhiQLElements getSiddhiQLAccess() {
		return pSiddhiQL;
	}
	
	public ParserRule getSiddhiQLRule() {
		return getSiddhiQLAccess().getRule();
	}
	
	//ExecutionPlan:
	//	appAnn+=AppAnnotation* ((=> defStream+=DefinitionStream | => defTable+=DefinitionTable | =>
	//	def_window+=DefinitionWindow | => defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | =>
	//	defAgrregation+=DefinitionAggregation) => (';' (=> defStream+=DefinitionStream | => defTable+=DefinitionTable | =>
	//	def_window+=DefinitionWindow | => defTrigger+=DefinitionTrigger | => defFunction+=DefinitionFunction | =>
	//	defAgrregation+=DefinitionAggregation))*
	//	=> (';' exElement+=ExecutionElement)* ';'?);
	public ExecutionPlanElements getExecutionPlanAccess() {
		return pExecutionPlan;
	}
	
	public ParserRule getExecutionPlanRule() {
		return getExecutionPlanAccess().getRule();
	}
	
	//ExecutionElement:
	//	=> (execPartition=ExecPartition) | => (que=Query);
	public ExecutionElementElements getExecutionElementAccess() {
		return pExecutionElement;
	}
	
	public ParserRule getExecutionElementRule() {
		return getExecutionElementAccess().getRule();
	}
	
	//DefinitionStream:
	//	{DefinitionStream} ann+=Annotation* DEFINE (STREAM | TABLE) src=Source1 OPEN_PAR feature+=Features (','
	//	feature+=Features)* CLOSE_PAR;
	public DefinitionStreamElements getDefinitionStreamAccess() {
		return pDefinitionStream;
	}
	
	public ParserRule getDefinitionStreamRule() {
		return getDefinitionStreamAccess().getRule();
	}
	
	//DefinitionTable:
	//	{DefinitionTable} ann1+=Annotation* DEFINE TABLE src=Source1 OPEN_PAR feature+=Features (',' feature+=Features)*
	//	CLOSE_PAR;
	public DefinitionTableElements getDefinitionTableAccess() {
		return pDefinitionTable;
	}
	
	public ParserRule getDefinitionTableRule() {
		return getDefinitionTableAccess().getRule();
	}
	
	//DefinitionWindow:
	//	{DefinitionWindow} ann2+=Annotation* DEFINE WINDOW src=Source1 OPEN_PAR feature+=Features (',' feature+=Features)*
	//	CLOSE_PAR funcOp=FunctionOperation (OUTPUT opEventType=OutputEventType)?;
	public DefinitionWindowElements getDefinitionWindowAccess() {
		return pDefinitionWindow;
	}
	
	public ParserRule getDefinitionWindowRule() {
		return getDefinitionWindowAccess().getRule();
	}
	
	//DefinitionTrigger:
	//	{DefinitionTrigger} (DEFINE TRIGGER) tn=TriggerName AT (every=EVERY tv=TimeValue | sv=StringValue);
	public DefinitionTriggerElements getDefinitionTriggerAccess() {
		return pDefinitionTrigger;
	}
	
	public ParserRule getDefinitionTriggerRule() {
		return getDefinitionTriggerAccess().getRule();
	}
	
	//DefinitionFunction:
	//	{DefinitionFunction} (DEFINE FUNCTION) fn=FunctionName OPEN_SQARE_BRACKETS ln=LanguageName CLOSE_SQARE_BRACKETS
	//	RETURN attr_type=AttributeType func_body=FunctionBody;
	public DefinitionFunctionElements getDefinitionFunctionAccess() {
		return pDefinitionFunction;
	}
	
	public ParserRule getDefinitionFunctionRule() {
		return getDefinitionFunctionAccess().getRule();
	}
	
	//DefinitionAggregation:
	//	{DefinitionAggregation} ann+=Annotation* DEFINE AGGREGATION src=Source1 FROM stdStream=StandardStream
	//	groupByQuerySel=GroupByQuerySelection AGGREGATE (BY attrRef=AttributeReference)? eve=EVERY aggrTime=AggregationTime;
	public DefinitionAggregationElements getDefinitionAggregationAccess() {
		return pDefinitionAggregation;
	}
	
	public ParserRule getDefinitionAggregationRule() {
		return getDefinitionAggregationAccess().getRule();
	}
	
	//AggregationTime:
	//	AggregationTimeRange
	//	| aggregation_time_interval;
	public AggregationTimeElements getAggregationTimeAccess() {
		return pAggregationTime;
	}
	
	public ParserRule getAggregationTimeRule() {
		return getAggregationTimeAccess().getRule();
	}
	
	//aggregation_time_interval:
	//	aggrtimeDur+=AggregationTimeDuration (',' aggrtimeDur+=AggregationTimeDuration)*;
	public Aggregation_time_intervalElements getAggregation_time_intervalAccess() {
		return pAggregation_time_interval;
	}
	
	public ParserRule getAggregation_time_intervalRule() {
		return getAggregation_time_intervalAccess().getRule();
	}
	
	//AggregationTimeDuration:
	//	SECONDS | MINUTES | HOURS | DAYS | WEEKS | MONTHS | YEARS;
	public AggregationTimeDurationElements getAggregationTimeDurationAccess() {
		return pAggregationTimeDuration;
	}
	
	public ParserRule getAggregationTimeDurationRule() {
		return getAggregationTimeDurationAccess().getRule();
	}
	
	//AggregationTimeRange:
	//	aggrtimeDur+=AggregationTimeDuration TRIPLE_DOT aggrtimeDur+=AggregationTimeDuration;
	public AggregationTimeRangeElements getAggregationTimeRangeAccess() {
		return pAggregationTimeRange;
	}
	
	public ParserRule getAggregationTimeRangeRule() {
		return getAggregationTimeRangeAccess().getRule();
	}
	
	//FunctionName:
	//	id=ID;
	public FunctionNameElements getFunctionNameAccess() {
		return pFunctionName;
	}
	
	public ParserRule getFunctionNameRule() {
		return getFunctionNameAccess().getRule();
	}
	
	//LanguageName:
	//	id=ID;
	public LanguageNameElements getLanguageNameAccess() {
		return pLanguageName;
	}
	
	public ParserRule getLanguageNameRule() {
		return getLanguageNameAccess().getRule();
	}
	
	//FunctionBody:
	//	value=SCRIPT;
	public FunctionBodyElements getFunctionBodyAccess() {
		return pFunctionBody;
	}
	
	public ParserRule getFunctionBodyRule() {
		return getFunctionBodyAccess().getRule();
	}
	
	//terminal SCRIPT:
	//	'{' SCRIPT_ATOM* '}';
	public TerminalRule getSCRIPTRule() {
		return tSCRIPT;
	}
	
	//terminal SCRIPT_ATOM:
	//	!('{' | '}') | '"' !'"'* '"'
	//	| '//' !('\r' | '\n')*
	//	| SCRIPT;
	public TerminalRule getSCRIPT_ATOMRule() {
		return tSCRIPT_ATOM;
	}
	
	//TriggerName:
	//	id=ID;
	public TriggerNameElements getTriggerNameAccess() {
		return pTriggerName;
	}
	
	public ParserRule getTriggerNameRule() {
		return getTriggerNameAccess().getRule();
	}
	
	//AppAnnotation:
	//	'@' APP ':' na=Name (OPEN_PAR ann5+=AnnotationElement (',' ann5+=AnnotationElement)* CLOSE_PAR)?;
	public AppAnnotationElements getAppAnnotationAccess() {
		return pAppAnnotation;
	}
	
	public ParserRule getAppAnnotationRule() {
		return getAppAnnotationAccess().getRule();
	}
	
	//Annotation:
	//	'@' na=Name (OPEN_PAR (annElement+=AnnotationElement | ann+=Annotation) (',' (annElement+=AnnotationElement |
	//	ann+=Annotation))* CLOSE_PAR);
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	//AnnotationElement:
	//	(propName=PropertyName '=')? propVal=PropertyValue;
	public AnnotationElementElements getAnnotationElementAccess() {
		return pAnnotationElement;
	}
	
	public ParserRule getAnnotationElementRule() {
		return getAnnotationElementAccess().getRule();
	}
	
	//PropertyValue:
	//	sv=StringValue;
	public PropertyValueElements getPropertyValueAccess() {
		return pPropertyValue;
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}
	
	//PropertyName:
	//	{PropertyName} na+=Name (ps+=PropertySeparator na+=Name)*;
	public PropertyNameElements getPropertyNameAccess() {
		return pPropertyName;
	}
	
	public ParserRule getPropertyNameRule() {
		return getPropertyNameAccess().getRule();
	}
	
	//PropertySeparator:
	//	{PropertySeparator} DOT | {PropertySeparator} MINUS | {PropertySeparator} COL;
	public PropertySeparatorElements getPropertySeparatorAccess() {
		return pPropertySeparator;
	}
	
	public ParserRule getPropertySeparatorRule() {
		return getPropertySeparatorAccess().getRule();
	}
	
	//Features:
	//	name=IdNew type=AttributeType;
	public FeaturesElements getFeaturesAccess() {
		return pFeatures;
	}
	
	public ParserRule getFeaturesRule() {
		return getFeaturesAccess().getRule();
	}
	
	//AttributeType:
	//	{AttributeType} STRINGS | {AttributeType} INTS | {AttributeType} LONG | {AttributeType} FLOAT | {AttributeType}
	//	DOUBLE | {AttributeType} BOOL | {AttributeType} OBJECT;
	public AttributeTypeElements getAttributeTypeAccess() {
		return pAttributeType;
	}
	
	public ParserRule getAttributeTypeRule() {
		return getAttributeTypeAccess().getRule();
	}
	
	//ExecPartition:
	//	ann4+=Annotation* PARTITION WITH OPEN_PAR partWithStream+=PartitionWithStream (','
	//	partWithStream+=PartitionWithStream)* CLOSE_PAR BEGIN qu+=Query qu+=Query* ';'? END;
	public ExecPartitionElements getExecPartitionAccess() {
		return pExecPartition;
	}
	
	public ParserRule getExecPartitionRule() {
		return getExecPartitionAccess().getRule();
	}
	
	//PartitionWithStream:
	//	ConditionRanges of=OF str_id2=Source //str_id2=StreamId
	//;
	public PartitionWithStreamElements getPartitionWithStreamAccess() {
		return pPartitionWithStream;
	}
	
	public ParserRule getPartitionWithStreamRule() {
		return getPartitionWithStreamAccess().getRule();
	}
	
	//ConditionRanges:
	//	conRange+=ConditionRange (or+=OR conRange+=ConditionRange)*;
	public ConditionRangesElements getConditionRangesAccess() {
		return pConditionRanges;
	}
	
	public ParserRule getConditionRangesRule() {
		return getConditionRangesAccess().getRule();
	}
	
	//ConditionRange:
	//	expr=Expression a=AS? sv=StringValue?;
	public ConditionRangeElements getConditionRangeAccess() {
		return pConditionRange;
	}
	
	public ParserRule getConditionRangeRule() {
		return getConditionRangeAccess().getRule();
	}
	
	//Query:
	//	{Query} ann3+=Annotation* FROM qInp=QueryInput querySec=QuerySection? outRate=OutputRate? qOutput=QueryOutput?;
	public QueryElements getQueryAccess() {
		return pQuery;
	}
	
	public ParserRule getQueryRule() {
		return getQueryAccess().getRule();
	}
	
	//QueryInput:
	//	{QueryInput} (=> js=JoinStream | => seqSrcChanin=SequenceStream | => ps=PatternStream | anonStream=AnonymousStream);
	public QueryInputElements getQueryInputAccess() {
		return pQueryInput;
	}
	
	public ParserRule getQueryInputRule() {
		return getQueryInputAccess().getRule();
	}
	
	//JoinStream:
	//	=> (left_source=JoinSource right_source=JoinSource) right_uni=UNIDIRECTIONAL (on=ON expr=Expression)? wt=WithinTime? //(wtr=WithinTimeRange p=Per1)?
	//	| => (left_source=JoinSource join=joins) right_source=JoinSource (on=ON expr=Expression)? wt=WithinTime? //(wtr=WithinTimeRange p=Per1)?
	//	| => (left_source=JoinSource left_uni=UNIDIRECTIONAL) join=joins right_source=JoinSource (on=ON expr=Expression)?
	//	wt=WithinTime? //(wtr=WithinTimeRange p=Per1)?
	//	| => StandardStream;
	public JoinStreamElements getJoinStreamAccess() {
		return pJoinStream;
	}
	
	public ParserRule getJoinStreamRule() {
		return getJoinStreamAccess().getRule();
	}
	
	//WithinTimeRange:
	//	WITHIN startPattern=Expression (',' endPattern=Expression)?;
	public WithinTimeRangeElements getWithinTimeRangeAccess() {
		return pWithinTimeRange;
	}
	
	public ParserRule getWithinTimeRangeRule() {
		return getWithinTimeRangeAccess().getRule();
	}
	
	//Per1:
	//	PER exp=Expression;
	public Per1Elements getPer1Access() {
		return pPer1;
	}
	
	public ParserRule getPer1Rule() {
		return getPer1Access().getRule();
	}
	
	//JoinSource:
	//	MainSource (a=AS strAlias=StreamAlias)?;
	public JoinSourceElements getJoinSourceAccess() {
		return pJoinSource;
	}
	
	public ParserRule getJoinSourceRule() {
		return getJoinSourceAccess().getRule();
	}
	
	//StreamAlias:
	//	na=Name;
	public StreamAliasElements getStreamAliasAccess() {
		return pStreamAlias;
	}
	
	public ParserRule getStreamAliasRule() {
		return getStreamAliasAccess().getRule();
	}
	
	//joins:
	//	{joins} LEFT OUTER JOIN
	//	| {joins} RIGHT OUTER JOIN
	//	| {joins} FULL OUTER JOIN
	//	| {joins} OUTER JOIN
	//	| {joins} INNER? JOIN;
	public JoinsElements getJoinsAccess() {
		return pJoins;
	}
	
	public ParserRule getJoinsRule() {
		return getJoinsAccess().getRule();
	}
	
	//StandardStream:
	//	MainSource => (postWindowHandlers=BasicSourceStreamHandlers?);
	public StandardStreamElements getStandardStreamAccess() {
		return pStandardStream;
	}
	
	public ParserRule getStandardStreamRule() {
		return getStandardStreamAccess().getRule();
	}
	
	//MainSource:
	//	src=Source basicSSh=BasicSourceStreamHandlers1;
	public MainSourceElements getMainSourceAccess() {
		return pMainSource;
	}
	
	public ParserRule getMainSourceRule() {
		return getMainSourceAccess().getRule();
	}
	
	//PatternStream:
	//	=> EveryPatternSourceChain
	//	| => AbsentPatternSourceChain;
	public PatternStreamElements getPatternStreamAccess() {
		return pPatternStream;
	}
	
	public ParserRule getPatternStreamRule() {
		return getPatternStreamAccess().getRule();
	}
	
	//EveryPatternSourceChain:
	//	EveryPatternSourceChain1 => ({EveryPatternSourceChain.left=current} op='->' right=EveryPatternSourceChain1)*;
	public EveryPatternSourceChainElements getEveryPatternSourceChainAccess() {
		return pEveryPatternSourceChain;
	}
	
	public ParserRule getEveryPatternSourceChainRule() {
		return getEveryPatternSourceChainAccess().getRule();
	}
	
	//EveryPatternSourceChain1 EveryPatternSourceChain:
	//	=> (OPEN_PAR eps=EveryPatternSourceChain CLOSE_PAR wt=WithinTime?) | psc=PatternSourceChain
	//	//|EVERY psc1=PatternSourceChain1 
	//	/*|every=EVERY OPEN_PAR psc=PatternSourceChain CLOSE_PAR wt=WithinTime? 
	//	|every=EVERY ps1=PatternSource wt=WithinTime? */
	//	| every=EVERY psc=PatternSourceChain1;
	public EveryPatternSourceChain1Elements getEveryPatternSourceChain1Access() {
		return pEveryPatternSourceChain1;
	}
	
	public ParserRule getEveryPatternSourceChain1Rule() {
		return getEveryPatternSourceChain1Access().getRule();
	}
	
	//PatternSourceChain:
	//	PatternSourceChain1 -> ({PatternSourceChain.left=current} op='->' right=PatternSourceChain1)*;
	public PatternSourceChainElements getPatternSourceChainAccess() {
		return pPatternSourceChain;
	}
	
	public ParserRule getPatternSourceChainRule() {
		return getPatternSourceChainAccess().getRule();
	}
	
	//PatternSourceChain1 PatternSourceChain:
	//	=> (OPEN_PAR psc_2=PatternSourceChain CLOSE_PAR wt=WithinTime?) | ps=PatternSource wt=WithinTime?;
	public PatternSourceChain1Elements getPatternSourceChain1Access() {
		return pPatternSourceChain1;
	}
	
	public ParserRule getPatternSourceChain1Rule() {
		return getPatternSourceChain1Access().getRule();
	}
	
	//PatternSource:
	//	=> lss=LogicalStatefulSource | => pss=PatternCollectionStatefulSource | => stdss=StandardStatefulSource | =>
	//	logicalAbsStatefulSrc=LogicalAbsentStatefulSource;
	public PatternSourceElements getPatternSourceAccess() {
		return pPatternSource;
	}
	
	public ParserRule getPatternSourceRule() {
		return getPatternSourceAccess().getRule();
	}
	
	//LogicalStatefulSource: //=>(not=NOT stdSource+=StandardStatefulSource (and=AND stdSource+=StandardStatefulSource) )
	//	=> (stdSource+=StandardStatefulSource and=AND) stdSource+=StandardStatefulSource | =>
	//	(stdSource+=StandardStatefulSource or=OR) stdSource+=StandardStatefulSource;
	public LogicalStatefulSourceElements getLogicalStatefulSourceAccess() {
		return pLogicalStatefulSource;
	}
	
	public ParserRule getLogicalStatefulSourceRule() {
		return getLogicalStatefulSourceAccess().getRule();
	}
	
	//PatternCollectionStatefulSource:
	//	StandardStatefulSource '<' coll=Collect '>';
	public PatternCollectionStatefulSourceElements getPatternCollectionStatefulSourceAccess() {
		return pPatternCollectionStatefulSource;
	}
	
	public ParserRule getPatternCollectionStatefulSourceRule() {
		return getPatternCollectionStatefulSourceAccess().getRule();
	}
	
	//Collect:
	//	{Collect} (start=INT_LITERAL ':' end=INT_LITERAL
	//	| start=INT_LITERAL ':'
	//	| ':' end=INT_LITERAL
	//	| INT_LITERAL);
	public CollectElements getCollectAccess() {
		return pCollect;
	}
	
	public ParserRule getCollectRule() {
		return getCollectAccess().getRule();
	}
	
	//WithinTime:
	//	WITHIN tv=TimeValue;
	public WithinTimeElements getWithinTimeAccess() {
		return pWithinTime;
	}
	
	public ParserRule getWithinTimeRule() {
		return getWithinTimeAccess().getRule();
	}
	
	//LogicalAbsentStatefulSource:
	//	=> (OPEN_PAR logicalAbsStatefulSrc=LogicalAbsentStatefulSource CLOSE_PAR) | => (stdSource=StandardStatefulSource
	//	and=AND not=NOT bs=BasicSource) | => (NOT bs=BasicSource and=AND) stdSource=StandardStatefulSource
	//	| => (stdSource=StandardStatefulSource and=AND basicAbsentPatternSource1=BasicAbsentPatternSource) | =>
	//	(basicAbsentPatternSource1=BasicAbsentPatternSource and=AND stdSource=StandardStatefulSource) | =>
	//	(basicAbsentPatternSource2=BasicAbsentPatternSource and=AND basicAbsentPatternSource=BasicAbsentPatternSource) | =>
	//	(stdSource=StandardStatefulSource o=OR basicAbsentPatternSource1=BasicAbsentPatternSource) | =>
	//	(basicAbsentPatternSource1=BasicAbsentPatternSource o=OR stdSource=StandardStatefulSource) | =>
	//	(basicAbsentPatternSource2=BasicAbsentPatternSource o=OR basicAbsentPatternSource=BasicAbsentPatternSource);
	public LogicalAbsentStatefulSourceElements getLogicalAbsentStatefulSourceAccess() {
		return pLogicalAbsentStatefulSource;
	}
	
	public ParserRule getLogicalAbsentStatefulSourceRule() {
		return getLogicalAbsentStatefulSourceAccess().getRule();
	}
	
	//AbsentPatternSourceChain:
	//	=> (EVERY? OPEN_PAR absentPatternSrcChain=AbsentPatternSourceChain CLOSE_PAR wt1=WithinTime?) |
	//	EveryAbsentPatternSource
	//	| => LeftAbsentPatternSource
	//	| => RightAbsentPatternSource;
	public AbsentPatternSourceChainElements getAbsentPatternSourceChainAccess() {
		return pAbsentPatternSourceChain;
	}
	
	public ParserRule getAbsentPatternSourceChainRule() {
		return getAbsentPatternSourceChainAccess().getRule();
	}
	
	//EveryAbsentPatternSource:
	//	=> (EVERY? basicAbsentPS=BasicAbsentPatternSource);
	public EveryAbsentPatternSourceElements getEveryAbsentPatternSourceAccess() {
		return pEveryAbsentPatternSource;
	}
	
	public ParserRule getEveryAbsentPatternSourceRule() {
		return getEveryAbsentPatternSourceAccess().getRule();
	}
	
	//BasicAbsentPatternSource:
	//	=> (NOT basicSrc=BasicSource ft=ForTime);
	public BasicAbsentPatternSourceElements getBasicAbsentPatternSourceAccess() {
		return pBasicAbsentPatternSource;
	}
	
	public ParserRule getBasicAbsentPatternSourceRule() {
		return getBasicAbsentPatternSourceAccess().getRule();
	}
	
	//ForTime:
	//	FOR tv=TimeValue;
	public ForTimeElements getForTimeAccess() {
		return pForTime;
	}
	
	public ParserRule getForTimeRule() {
		return getForTimeAccess().getRule();
	}
	
	//LeftAbsentPatternSource:
	//	LeftAbsentPatternSource1 => ({LeftAbsentPatternSource.left=current} fb1='->' right=LeftAbsentPatternSource1)*;
	public LeftAbsentPatternSourceElements getLeftAbsentPatternSourceAccess() {
		return pLeftAbsentPatternSource;
	}
	
	public ParserRule getLeftAbsentPatternSourceRule() {
		return getLeftAbsentPatternSourceAccess().getRule();
	}
	
	//LeftAbsentPatternSource1 LeftAbsentPatternSource:
	//	LeftAbsentPatternSource2 => ({LeftAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource)*;
	public LeftAbsentPatternSource1Elements getLeftAbsentPatternSource1Access() {
		return pLeftAbsentPatternSource1;
	}
	
	public ParserRule getLeftAbsentPatternSource1Rule() {
		return getLeftAbsentPatternSource1Access().getRule();
	}
	
	//LeftAbsentPatternSource2 LeftAbsentPatternSource:
	//	=> (EVERY? OPEN_PAR leftAbsPS=LeftAbsentPatternSource CLOSE_PAR wt2+=WithinTime?) | =>
	//	(everyAbsPS=EveryAbsentPatternSource '->' everyPSC=EveryPatternSourceChain) | => (everyPSC=EveryPatternSourceChain
	//	'->' leftAbsPatternSrc=LeftAbsentPatternSource);
	public LeftAbsentPatternSource2Elements getLeftAbsentPatternSource2Access() {
		return pLeftAbsentPatternSource2;
	}
	
	public ParserRule getLeftAbsentPatternSource2Rule() {
		return getLeftAbsentPatternSource2Access().getRule();
	}
	
	//RightAbsentPatternSource:
	//	RightAbsentPatternSource1 => ({RightAbsentPatternSource.left1=current} fb2='->' right1=RightAbsentPatternSource1)*;
	public RightAbsentPatternSourceElements getRightAbsentPatternSourceAccess() {
		return pRightAbsentPatternSource;
	}
	
	public ParserRule getRightAbsentPatternSourceRule() {
		return getRightAbsentPatternSourceAccess().getRule();
	}
	
	//RightAbsentPatternSource1 RightAbsentPatternSource:
	//	RightAbsentPatternSource2 => ({RightAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource)*;
	public RightAbsentPatternSource1Elements getRightAbsentPatternSource1Access() {
		return pRightAbsentPatternSource1;
	}
	
	public ParserRule getRightAbsentPatternSource1Rule() {
		return getRightAbsentPatternSource1Access().getRule();
	}
	
	//RightAbsentPatternSource2 RightAbsentPatternSource:
	//	=> (EVERY? OPEN_PAR rightAbsPS=RightAbsentPatternSource CLOSE_PAR wt3+=WithinTime?) | =>
	//	(everyPSC1=EveryPatternSourceChain '->' everyAbsPS1=EveryAbsentPatternSource) | =>
	//	(everyAbsPS1=EveryAbsentPatternSource '->' rightAbsPS=RightAbsentPatternSource);
	public RightAbsentPatternSource2Elements getRightAbsentPatternSource2Access() {
		return pRightAbsentPatternSource2;
	}
	
	public ParserRule getRightAbsentPatternSource2Rule() {
		return getRightAbsentPatternSource2Access().getRule();
	}
	
	//SequenceStream:
	//	=> everySequenceSourceChain=EverySequenceSourceChain
	//	| => everyAbsentSequenceSourceChain=EveryAbsentSequenceSourceChain;
	public SequenceStreamElements getSequenceStreamAccess() {
		return pSequenceStream;
	}
	
	public ParserRule getSequenceStreamRule() {
		return getSequenceStreamAccess().getRule();
	}
	
	//EverySequenceSourceChain:
	//	=> (EVERY? seqSource=SequenceSource wt=WithinTime? ',' ssc=SequenceSourceChain);
	public EverySequenceSourceChainElements getEverySequenceSourceChainAccess() {
		return pEverySequenceSourceChain;
	}
	
	public ParserRule getEverySequenceSourceChainRule() {
		return getEverySequenceSourceChainAccess().getRule();
	}
	
	//EveryAbsentSequenceSourceChain:
	//	=> (EVERY? absSeqSrcChain=AbsentSequenceSourceChain ',' seqSrcChain=SequenceSourceChain);
	public EveryAbsentSequenceSourceChainElements getEveryAbsentSequenceSourceChainAccess() {
		return pEveryAbsentSequenceSourceChain;
	}
	
	public ParserRule getEveryAbsentSequenceSourceChainRule() {
		return getEveryAbsentSequenceSourceChainAccess().getRule();
	}
	
	//AbsentSequenceSourceChain:
	//	=> (OPEN_PAR absentSequenceSourceChain=AbsentSequenceSourceChain CLOSE_PAR wt5=WithinTime?) | =>
	//	basicAbsentPatternSource=BasicAbsentPatternSource
	//	| => leftAbsentSequenceSource=LeftAbsentSequenceSource
	//	| => rightAbsentSequenceSource=RightAbsentSequenceSource;
	public AbsentSequenceSourceChainElements getAbsentSequenceSourceChainAccess() {
		return pAbsentSequenceSourceChain;
	}
	
	public ParserRule getAbsentSequenceSourceChainRule() {
		return getAbsentSequenceSourceChainAccess().getRule();
	}
	
	//LeftAbsentSequenceSource:
	//	LeftAbsentSequenceSource1 => ({LeftAbsentSequenceSource.left=current} comm=',' right=LeftAbsentSequenceSource1)*;
	public LeftAbsentSequenceSourceElements getLeftAbsentSequenceSourceAccess() {
		return pLeftAbsentSequenceSource;
	}
	
	public ParserRule getLeftAbsentSequenceSourceRule() {
		return getLeftAbsentSequenceSourceAccess().getRule();
	}
	
	//LeftAbsentSequenceSource1 LeftAbsentSequenceSource:
	//	LeftAbsentSequenceSource2 => ({LeftAbsentSequenceSource1.left=current} comm=',' right=BasicAbsentPatternSource)*;
	public LeftAbsentSequenceSource1Elements getLeftAbsentSequenceSource1Access() {
		return pLeftAbsentSequenceSource1;
	}
	
	public ParserRule getLeftAbsentSequenceSource1Rule() {
		return getLeftAbsentSequenceSource1Access().getRule();
	}
	
	//LeftAbsentSequenceSource2 LeftAbsentSequenceSource:
	//	=> (op=OPEN_PAR leftAbsentSequenceSource=LeftAbsentSequenceSource cp=CLOSE_PAR wt6=WithinTime?) | =>
	//	(basicAbsentPatternSource=BasicAbsentPatternSource comma=',' sequenceSourceChain=SequenceSourceChain) | =>
	//	(sequenceSourceChain=SequenceSourceChain comma=',' leftAbsentSequenceSource=LeftAbsentSequenceSource);
	public LeftAbsentSequenceSource2Elements getLeftAbsentSequenceSource2Access() {
		return pLeftAbsentSequenceSource2;
	}
	
	public ParserRule getLeftAbsentSequenceSource2Rule() {
		return getLeftAbsentSequenceSource2Access().getRule();
	}
	
	//RightAbsentSequenceSource:
	//	RightAbsentSequenceSource1 => ({RightAbsentSequenceSource.left1=current} comm=','
	//	right1=RightAbsentSequenceSource1)*;
	public RightAbsentSequenceSourceElements getRightAbsentSequenceSourceAccess() {
		return pRightAbsentSequenceSource;
	}
	
	public ParserRule getRightAbsentSequenceSourceRule() {
		return getRightAbsentSequenceSourceAccess().getRule();
	}
	
	//RightAbsentSequenceSource1 RightAbsentSequenceSource:
	//	RightAbsentSequenceSource2 => ({RightAbsentSequenceSource1.left=current} comm=',' right=SequenceSourceChain)*;
	public RightAbsentSequenceSource1Elements getRightAbsentSequenceSource1Access() {
		return pRightAbsentSequenceSource1;
	}
	
	public ParserRule getRightAbsentSequenceSource1Rule() {
		return getRightAbsentSequenceSource1Access().getRule();
	}
	
	//RightAbsentSequenceSource2 RightAbsentSequenceSource:
	//	=> (op=OPEN_PAR rightAbsentSequenceSource=RightAbsentSequenceSource cp=CLOSE_PAR wt7=WithinTime?) | =>
	//	(sequenceSourceChain=SequenceSourceChain comma=',' basicAbsentPatternSource=BasicAbsentPatternSource) | =>
	//	(basicAbsentPatternSource=BasicAbsentPatternSource ',' rightAbsentSequenceSource=RightAbsentSequenceSource);
	public RightAbsentSequenceSource2Elements getRightAbsentSequenceSource2Access() {
		return pRightAbsentSequenceSource2;
	}
	
	public ParserRule getRightAbsentSequenceSource2Rule() {
		return getRightAbsentSequenceSource2Access().getRule();
	}
	
	//SequenceSourceChain:
	//	SequenceSourceChain1 => ({SequenceSourceChain.left=current} op=',' right=SequenceSourceChain1)*;
	public SequenceSourceChainElements getSequenceSourceChainAccess() {
		return pSequenceSourceChain;
	}
	
	public ParserRule getSequenceSourceChainRule() {
		return getSequenceSourceChainAccess().getRule();
	}
	
	//SequenceSourceChain1 SequenceSourceChain:
	//	=> (OPEN_PAR SequenceSourceChain CLOSE_PAR wt1+=WithinTime?) | SequenceSource wt=WithinTime?;
	public SequenceSourceChain1Elements getSequenceSourceChain1Access() {
		return pSequenceSourceChain1;
	}
	
	public ParserRule getSequenceSourceChain1Rule() {
		return getSequenceSourceChain1Access().getRule();
	}
	
	//SequenceSource:
	//	=> LogicalStatefulSource | => SequenceCollectionStatefulSource | => StandardStatefulSource | =>
	//	LogicalAbsentStatefulSource;
	public SequenceSourceElements getSequenceSourceAccess() {
		return pSequenceSource;
	}
	
	public ParserRule getSequenceSourceRule() {
		return getSequenceSourceAccess().getRule();
	}
	
	//SequenceCollectionStatefulSource:
	//	StandardStatefulSource ('<' coll=Collect '>' | zero_or_more='*' | zero_or_one='?' | one_or_more='+');
	public SequenceCollectionStatefulSourceElements getSequenceCollectionStatefulSourceAccess() {
		return pSequenceCollectionStatefulSource;
	}
	
	public ParserRule getSequenceCollectionStatefulSourceRule() {
		return getSequenceCollectionStatefulSourceAccess().getRule();
	}
	
	//AnonymousStream:
	//	OPEN_PAR AnonymousStream CLOSE_PAR
	//	| FROM qi=QueryInput qs=QuerySection? out_rate=OutputRate? RETURN op_event_type=OutputEventType?;
	public AnonymousStreamElements getAnonymousStreamAccess() {
		return pAnonymousStream;
	}
	
	public ParserRule getAnonymousStreamRule() {
		return getAnonymousStreamAccess().getRule();
	}
	
	//OutputRate:
	//	{OutputRate} OUTPUT op_rate_type=OutputRateType? every=EVERY (tv=TimeValue | INT_LITERAL EVENTS) | {OutputRate}
	//	OUTPUT SNAPSHOT every=EVERY tv=TimeValue;
	public OutputRateElements getOutputRateAccess() {
		return pOutputRate;
	}
	
	public ParserRule getOutputRateRule() {
		return getOutputRateAccess().getRule();
	}
	
	//OutputRateType:
	//	{OutputRateType} ALL
	//	| {OutputRateType} LAST
	//	| {OutputRateType} FIRST;
	public OutputRateTypeElements getOutputRateTypeAccess() {
		return pOutputRateType;
	}
	
	public ParserRule getOutputRateTypeRule() {
		return getOutputRateTypeAccess().getRule();
	}
	
	//QueryOutput:
	//	INSERT outEventType=OutputEventType? INTO tar=Source1 | DELETE tar=Source1 (FOR outEventType=OutputEventType)? on=ON
	//	expr=Expression | UPDATE (or=OR INSERT INTO)? tar=Source1 (FOR outEventType=OutputEventType)? setClause=SetClause?
	//	on=ON expr=Expression | RETURN outEventType=OutputEventType?;
	public QueryOutputElements getQueryOutputAccess() {
		return pQueryOutput;
	}
	
	public ParserRule getQueryOutputRule() {
		return getQueryOutputAccess().getRule();
	}
	
	//SetClause:
	//	SET setAssignment+=SetAssignment (',' setAssignment+=SetAssignment)*;
	public SetClauseElements getSetClauseAccess() {
		return pSetClause;
	}
	
	public ParserRule getSetClauseRule() {
		return getSetClauseAccess().getRule();
	}
	
	//SetAssignment:
	//	AttributeReference '=' expression=Expression;
	public SetAssignmentElements getSetAssignmentAccess() {
		return pSetAssignment;
	}
	
	public ParserRule getSetAssignmentRule() {
		return getSetAssignmentAccess().getRule();
	}
	
	//OutputEventType:
	//	{OutputEventType} ALL EVENTS | {OutputEventType} ALL RAW EVENTS | {OutputEventType} EXPIRED EVENTS |
	//	{OutputEventType} EXPIRED RAW EVENTS | {OutputEventType} CURRENT? EVENTS;
	public OutputEventTypeElements getOutputEventTypeAccess() {
		return pOutputEventType;
	}
	
	public ParserRule getOutputEventTypeRule() {
		return getOutputEventTypeAccess().getRule();
	}
	
	//BasicSourceStreamHandlers:
	//	basicSsHandler+=BasicSourceStreamHandler+;
	public BasicSourceStreamHandlersElements getBasicSourceStreamHandlersAccess() {
		return pBasicSourceStreamHandlers;
	}
	
	public ParserRule getBasicSourceStreamHandlersRule() {
		return getBasicSourceStreamHandlersAccess().getRule();
	}
	
	//BasicSourceStreamHandlers1:
	//	{BasicSourceStreamHandlers1} (=> ('#'? OPEN_SQARE_BRACKETS exp=Expression CLOSE_SQARE_BRACKETS) | => ('#'
	//	fo=FunctionOperation))? => ('#' WINDOW '.' func_op=FunctionOperation)?;
	public BasicSourceStreamHandlers1Elements getBasicSourceStreamHandlers1Access() {
		return pBasicSourceStreamHandlers1;
	}
	
	public ParserRule getBasicSourceStreamHandlers1Rule() {
		return getBasicSourceStreamHandlers1Access().getRule();
	}
	
	//BasicSourceStreamHandler:
	//	fil=Filter | sf=StreamFunction;
	public BasicSourceStreamHandlerElements getBasicSourceStreamHandlerAccess() {
		return pBasicSourceStreamHandler;
	}
	
	public ParserRule getBasicSourceStreamHandlerRule() {
		return getBasicSourceStreamHandlerAccess().getRule();
	}
	
	//Filter:
	//	'#'? OPEN_SQARE_BRACKETS exp=Expression CLOSE_SQARE_BRACKETS;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//StreamFunction:
	//	'#' fo=FunctionOperation;
	public StreamFunctionElements getStreamFunctionAccess() {
		return pStreamFunction;
	}
	
	public ParserRule getStreamFunctionRule() {
		return getStreamFunctionAccess().getRule();
	}
	
	//Win:
	//	'#' WINDOW '.' func_op=FunctionOperation;
	public WinElements getWinAccess() {
		return pWin;
	}
	
	public ParserRule getWinRule() {
		return getWinAccess().getRule();
	}
	
	//Expression:
	//	MathOperation;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//FunctionOperation:
	//	{FunctionOperation} (funcNamespace=FunctionNamespace ':')? funcId=FunctionId OPEN_PAR attrList=AttributeList?
	//	CLOSE_PAR;
	public FunctionOperationElements getFunctionOperationAccess() {
		return pFunctionOperation;
	}
	
	public ParserRule getFunctionOperationRule() {
		return getFunctionOperationAccess().getRule();
	}
	
	//FunctionNamespace:
	//	na=IdNew;
	public FunctionNamespaceElements getFunctionNamespaceAccess() {
		return pFunctionNamespace;
	}
	
	public ParserRule getFunctionNamespaceRule() {
		return getFunctionNamespaceAccess().getRule();
	}
	
	//FunctionId:
	//	na=Name;
	public FunctionIdElements getFunctionIdAccess() {
		return pFunctionId;
	}
	
	public ParserRule getFunctionIdRule() {
		return getFunctionIdAccess().getRule();
	}
	
	//AttributeList:
	//	{AttributeList} (attr+=Attribute (',' attr+=Attribute)*) | {AttributeList} '*';
	public AttributeListElements getAttributeListAccess() {
		return pAttributeList;
	}
	
	public ParserRule getAttributeListRule() {
		return getAttributeListAccess().getRule();
	}
	
	//Attribute:
	//	mathOp=MathOperation;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//GroupByQuerySelection:
	//	{GroupByQuerySelection} (SELECT ('*' | out_att+=OutputAttribute (',' out_att+=OutputAttribute)*)) grp_by=GroupBy?;
	public GroupByQuerySelectionElements getGroupByQuerySelectionAccess() {
		return pGroupByQuerySelection;
	}
	
	public ParserRule getGroupByQuerySelectionRule() {
		return getGroupByQuerySelectionAccess().getRule();
	}
	
	//QuerySection:
	//	{QuerySection} grpByQuerySel=GroupByQuerySelection having=HavingExpr?;
	public QuerySectionElements getQuerySectionAccess() {
		return pQuerySection;
	}
	
	public ParserRule getQuerySectionRule() {
		return getQuerySectionAccess().getRule();
	}
	
	//OutputAttribute:
	//	{OutputAttribute} outAttr=OutAttr | {OutputAttribute} attr_ref=AttributeReference;
	public OutputAttributeElements getOutputAttributeAccess() {
		return pOutputAttribute;
	}
	
	public ParserRule getOutputAttributeRule() {
		return getOutputAttributeAccess().getRule();
	}
	
	//OutAttr:
	//	attr=Attribute a=AS name=IdNew;
	public OutAttrElements getOutAttrAccess() {
		return pOutAttr;
	}
	
	public ParserRule getOutAttrRule() {
		return getOutAttrAccess().getRule();
	}
	
	//GroupBy:
	//	GROUP BY attr_ref+=AttributeReference (',' attr_ref+=AttributeReference)*;
	public GroupByElements getGroupByAccess() {
		return pGroupBy;
	}
	
	public ParserRule getGroupByRule() {
		return getGroupByAccess().getRule();
	}
	
	//HavingExpr:
	//	HAVING expr=Expression;
	public HavingExprElements getHavingExprAccess() {
		return pHavingExpr;
	}
	
	public ParserRule getHavingExprRule() {
		return getHavingExprAccess().getRule();
	}
	
	//MathOperation:
	//	mlo=MathLogicalOperation;
	public MathOperationElements getMathOperationAccess() {
		return pMathOperation;
	}
	
	public ParserRule getMathOperationRule() {
		return getMathOperationAccess().getRule();
	}
	
	//MathLogicalOperation MathOperation:
	//	MathInOperation => ({MathLogicalOperation.left=current} (and=AND | or=OR) right=MathInOperation)* //and,or errors
	//;
	public MathLogicalOperationElements getMathLogicalOperationAccess() {
		return pMathLogicalOperation;
	}
	
	public ParserRule getMathLogicalOperationRule() {
		return getMathLogicalOperationAccess().getRule();
	}
	
	//MathInOperation MathOperation:
	//	MathGtLtOperation => ({MathInOperation.left=current} in=IN right=Name)* //in error
	//;
	public MathInOperationElements getMathInOperationAccess() {
		return pMathInOperation;
	}
	
	public ParserRule getMathInOperationRule() {
		return getMathInOperationAccess().getRule();
	}
	
	//MathGtLtOperation MathOperation:
	//	MathEqualOperation => ({MathGtLtOperation.left=current} symbol=('>=' | '<=' | '>' | '<') right=MathGtLtOperation)*;
	public MathGtLtOperationElements getMathGtLtOperationAccess() {
		return pMathGtLtOperation;
	}
	
	public ParserRule getMathGtLtOperationRule() {
		return getMathGtLtOperationAccess().getRule();
	}
	
	//MathEqualOperation MathOperation:
	//	MathAddsubOperation => ({MathEqualOperation.left=current} (eq='==' | not_eq='!=') right=MathAddsubOperation)*;
	public MathEqualOperationElements getMathEqualOperationAccess() {
		return pMathEqualOperation;
	}
	
	public ParserRule getMathEqualOperationRule() {
		return getMathEqualOperationAccess().getRule();
	}
	
	//MathAddsubOperation MathOperation:
	//	MathDivmulOperation => ({MathAddsubOperation.left=current} (add='+' | substract='-') right=MathDivmulOperation)*;
	public MathAddsubOperationElements getMathAddsubOperationAccess() {
		return pMathAddsubOperation;
	}
	
	public ParserRule getMathAddsubOperationRule() {
		return getMathAddsubOperationAccess().getRule();
	}
	
	//MathDivmulOperation MathOperation:
	//	MathOtherOperations => ({MathDivmulOperation.left=current} (multiply='*' | devide='/' | mod='%')
	//	right=MathOtherOperations)*;
	public MathDivmulOperationElements getMathDivmulOperationAccess() {
		return pMathDivmulOperation;
	}
	
	public ParserRule getMathDivmulOperationRule() {
		return getMathDivmulOperationAccess().getRule();
	}
	
	//MathOtherOperations MathOperation:
	//	=> ({NotOperation} not=NOT op=MathOperation) | OPEN_PAR op=MathOperation CLOSE_PAR
	//	| => NullCheck
	//	| mathOtherOperations1=MathOtherOperations1;
	public MathOtherOperationsElements getMathOtherOperationsAccess() {
		return pMathOtherOperations;
	}
	
	public ParserRule getMathOtherOperationsRule() {
		return getMathOtherOperationsAccess().getRule();
	}
	
	//NullCheck:
	//	(=> stream_ref=StreamReference | => attr_ref=AttributeReference | => fo=FunctionOperation) IS NULL;
	public NullCheckElements getNullCheckAccess() {
		return pNullCheck;
	}
	
	public ParserRule getNullCheckRule() {
		return getNullCheckAccess().getRule();
	}
	
	//StreamReference:
	//	hash='#'? na=Name (OPEN_SQARE_BRACKETS aatr_index=AttributeIndex CLOSE_SQARE_BRACKETS)?;
	public StreamReferenceElements getStreamReferenceAccess() {
		return pStreamReference;
	}
	
	public ParserRule getStreamReferenceRule() {
		return getStreamReferenceAccess().getRule();
	}
	
	//MathOtherOperations1:
	//	const_val=ConstantValue
	//	| fo=FunctionOperation
	//	| attrRef=AttributeReference;
	public MathOtherOperations1Elements getMathOtherOperations1Access() {
		return pMathOtherOperations1;
	}
	
	public ParserRule getMathOtherOperations1Rule() {
		return getMathOtherOperations1Access().getRule();
	}
	
	//AttributeReference:
	//	{AttributeReference} hash1='#'? name1=SourceOrEventReference (OPEN_SQARE_BRACKETS attribute_index1=AttributeIndex
	//	CLOSE_SQARE_BRACKETS)? (hash2='#' name2=SourceOrEventReference (OPEN_SQARE_BRACKETS attribute_index2=AttributeIndex
	//	CLOSE_SQARE_BRACKETS)?)? '.' attr_name=AttributeNameReference
	//	//{AttributeReference} hash1='#'? name1=Source (OPEN_SQARE_BRACKETSattribute_index1=AttributeIndex']')? (hash2='#' name2=Source (OPEN_SQARE_BRACKETSattribute_index2=AttributeIndexCLOSE_SQARE_BRACKETS)?)? '.'  attr_name=AttributeNameReference
	//	| featuresOrAttrRef=FeaturesOrOutAttrReference;
	public AttributeReferenceElements getAttributeReferenceAccess() {
		return pAttributeReference;
	}
	
	public ParserRule getAttributeReferenceRule() {
		return getAttributeReferenceAccess().getRule();
	}
	
	//AttributeNameReference:
	//	attrName1=[Features|IdNew];
	public AttributeNameReferenceElements getAttributeNameReferenceAccess() {
		return pAttributeNameReference;
	}
	
	public ParserRule getAttributeNameReferenceRule() {
		return getAttributeNameReferenceAccess().getRule();
	}
	
	//AttributeIndex:
	//	{AttributeIndex} INT_LITERAL | {AttributeIndex} LAST ('-' INT_LITERAL)?;
	public AttributeIndexElements getAttributeIndexAccess() {
		return pAttributeIndex;
	}
	
	public ParserRule getAttributeIndexRule() {
		return getAttributeIndexAccess().getRule();
	}
	
	//StandardStatefulSource:
	//	{StandardStatefulSource} (name=IdNew '=')? bs=BasicSource;
	public StandardStatefulSourceElements getStandardStatefulSourceAccess() {
		return pStandardStatefulSource;
	}
	
	public ParserRule getStandardStatefulSourceRule() {
		return getStandardStatefulSourceAccess().getRule();
	}
	
	//Source1OrStandardStatefulSource:
	//	StandardStatefulSource | Source1;
	public Source1OrStandardStatefulSourceElements getSource1OrStandardStatefulSourceAccess() {
		return pSource1OrStandardStatefulSource;
	}
	
	public ParserRule getSource1OrStandardStatefulSourceRule() {
		return getSource1OrStandardStatefulSourceAccess().getRule();
	}
	
	//SourceOrEventReference:
	//	na=[Source1OrStandardStatefulSource|IdNew];
	public SourceOrEventReferenceElements getSourceOrEventReferenceAccess() {
		return pSourceOrEventReference;
	}
	
	public ParserRule getSourceOrEventReferenceRule() {
		return getSourceOrEventReferenceAccess().getRule();
	}
	
	///*
	//Event:
	//	na=Name
	//;
	//*/ BasicSource:
	//	src=Source basic_ss_handlers=BasicSourceStreamHandlers?;
	public BasicSourceElements getBasicSourceAccess() {
		return pBasicSource;
	}
	
	public ParserRule getBasicSourceRule() {
		return getBasicSourceAccess().getRule();
	}
	
	//FeaturesOrOutAttr:
	//	Features | OutAttr;
	public FeaturesOrOutAttrElements getFeaturesOrOutAttrAccess() {
		return pFeaturesOrOutAttr;
	}
	
	public ParserRule getFeaturesOrOutAttrRule() {
		return getFeaturesOrOutAttrAccess().getRule();
	}
	
	//FeaturesOrOutAttrReference:
	//	srcoutAttrref=[FeaturesOrOutAttr|IdNew];
	public FeaturesOrOutAttrReferenceElements getFeaturesOrOutAttrReferenceAccess() {
		return pFeaturesOrOutAttrReference;
	}
	
	public ParserRule getFeaturesOrOutAttrReferenceRule() {
		return getFeaturesOrOutAttrReferenceAccess().getRule();
	}
	
	//ConstantValue:
	//	{ConstantValue} bv=BoolValue
	//	| {ConstantValue} sdv=SignedDoubleValue
	//	| {ConstantValue} sfv=SignedFloatValue
	//	| {ConstantValue} slv=SignedLongValue
	//	| {ConstantValue} siv=SignedIntValue
	//	| {ConstantValue} tv=TimeValue
	//	| {ConstantValue} sv=StringValue;
	public ConstantValueElements getConstantValueAccess() {
		return pConstantValue;
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}
	
	//Name:
	//	name=IdNew //k_word=Keyword |
	//;
	public NameElements getNameAccess() {
		return pName;
	}
	
	public ParserRule getNameRule() {
		return getNameAccess().getRule();
	}
	
	//Source:
	//	strId=[Source1|IdNew];
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}
	
	//Source1:
	//	inner='#'? name=IdNew;
	public Source1Elements getSource1Access() {
		return pSource1;
	}
	
	public ParserRule getSource1Rule() {
		return getSource1Access().getRule();
	}
	
	//BoolValue:
	//	TRUE | FALSE;
	public BoolValueElements getBoolValueAccess() {
		return pBoolValue;
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//SignedDoubleValue:
	//	('-' | '+')? DOUBLE_LITERAL;
	public SignedDoubleValueElements getSignedDoubleValueAccess() {
		return pSignedDoubleValue;
	}
	
	public ParserRule getSignedDoubleValueRule() {
		return getSignedDoubleValueAccess().getRule();
	}
	
	//SignedFloatValue:
	//	('-' | '+')? FLOAT_LITERAL;
	public SignedFloatValueElements getSignedFloatValueAccess() {
		return pSignedFloatValue;
	}
	
	public ParserRule getSignedFloatValueRule() {
		return getSignedFloatValueAccess().getRule();
	}
	
	//SignedLongValue:
	//	('-' | '+')? LONG_LITERAL;
	public SignedLongValueElements getSignedLongValueAccess() {
		return pSignedLongValue;
	}
	
	public ParserRule getSignedLongValueRule() {
		return getSignedLongValueAccess().getRule();
	}
	
	//StringValue:
	//	sl=STRING_LITERAL;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//TimeValue:
	//	yv=YearValue mv=MonthValue? wv=WeekValue? dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue?
	//	msecv=MillisecondValue?
	//	| mv=MonthValue wv=WeekValue? dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
	//	| wv=WeekValue dv=DayValue? hv=HourValue? minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
	//	| dv=DayValue hv=HourValue? minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
	//	| hv=HourValue minv=MinuteValue? secv=SecondValue? msecv=MillisecondValue?
	//	| minv=MinuteValue secv=SecondValue? msecv=MillisecondValue?
	//	| sv=SecondValue msecv=MillisecondValue?
	//	| msecv=MillisecondValue;
	public TimeValueElements getTimeValueAccess() {
		return pTimeValue;
	}
	
	public ParserRule getTimeValueRule() {
		return getTimeValueAccess().getRule();
	}
	
	//YearValue:
	//	INT_LITERAL YEARS;
	public YearValueElements getYearValueAccess() {
		return pYearValue;
	}
	
	public ParserRule getYearValueRule() {
		return getYearValueAccess().getRule();
	}
	
	//MonthValue:
	//	INT_LITERAL MONTHS;
	public MonthValueElements getMonthValueAccess() {
		return pMonthValue;
	}
	
	public ParserRule getMonthValueRule() {
		return getMonthValueAccess().getRule();
	}
	
	//WeekValue:
	//	INT_LITERAL WEEKS;
	public WeekValueElements getWeekValueAccess() {
		return pWeekValue;
	}
	
	public ParserRule getWeekValueRule() {
		return getWeekValueAccess().getRule();
	}
	
	//DayValue:
	//	INT_LITERAL DAYS;
	public DayValueElements getDayValueAccess() {
		return pDayValue;
	}
	
	public ParserRule getDayValueRule() {
		return getDayValueAccess().getRule();
	}
	
	//HourValue:
	//	INT_LITERAL HOURS;
	public HourValueElements getHourValueAccess() {
		return pHourValue;
	}
	
	public ParserRule getHourValueRule() {
		return getHourValueAccess().getRule();
	}
	
	//MinuteValue:
	//	INT_LITERAL MINUTES;
	public MinuteValueElements getMinuteValueAccess() {
		return pMinuteValue;
	}
	
	public ParserRule getMinuteValueRule() {
		return getMinuteValueAccess().getRule();
	}
	
	//SecondValue:
	//	INT_LITERAL SECONDS;
	public SecondValueElements getSecondValueAccess() {
		return pSecondValue;
	}
	
	public ParserRule getSecondValueRule() {
		return getSecondValueAccess().getRule();
	}
	
	//MillisecondValue:
	//	INT_LITERAL MILLISECONDS;
	public MillisecondValueElements getMillisecondValueAccess() {
		return pMillisecondValue;
	}
	
	public ParserRule getMillisecondValueRule() {
		return getMillisecondValueAccess().getRule();
	}
	
	//SignedIntValue:
	//	('-' | '+')? INT_LITERAL;
	public SignedIntValueElements getSignedIntValueAccess() {
		return pSignedIntValue;
	}
	
	public ParserRule getSignedIntValueRule() {
		return getSignedIntValueAccess().getRule();
	}
	
	//STRING_LITERAL:
	//	STRING;
	public STRING_LITERALElements getSTRING_LITERALAccess() {
		return pSTRING_LITERAL;
	}
	
	public ParserRule getSTRING_LITERALRule() {
		return getSTRING_LITERALAccess().getRule();
	}
	
	//INT_LITERAL:
	//	DIGIT+;
	public INT_LITERALElements getINT_LITERALAccess() {
		return pINT_LITERAL;
	}
	
	public ParserRule getINT_LITERALRule() {
		return getINT_LITERALAccess().getRule();
	}
	
	//DOUBLE_LITERAL:
	//	=> ({DOUBLE_LITERAL} DIGIT+ ('.' DIGIT*)? (e=E ('-' | '+')? DIGIT+)? d=D) | {DOUBLE_LITERAL} DIGIT+ ('.' DIGIT*)? e=E
	//	('-' | '+')? DIGIT+ d=D?
	//	| => ({DOUBLE_LITERAL} DIGIT* '.' DIGIT+ (e=E ('-' | '+')? DIGIT+)? d=D?);
	public DOUBLE_LITERALElements getDOUBLE_LITERALAccess() {
		return pDOUBLE_LITERAL;
	}
	
	public ParserRule getDOUBLE_LITERALRule() {
		return getDOUBLE_LITERALAccess().getRule();
	}
	
	//FLOAT_LITERAL:
	//	=> ({FLOAT_LITERAL} DIGIT+ ('.' DIGIT*)? (e=E ('-' | '+')? DIGIT+)? f=F) | {FLOAT_LITERAL} DIGIT* '.' DIGIT+ (e=E
	//	('-' | '+')? DIGIT+)? f=F;
	public FLOAT_LITERALElements getFLOAT_LITERALAccess() {
		return pFLOAT_LITERAL;
	}
	
	public ParserRule getFLOAT_LITERALRule() {
		return getFLOAT_LITERALAccess().getRule();
	}
	
	//LONG_LITERAL:
	//	DIGIT+ l=L;
	public LONG_LITERALElements getLONG_LITERALAccess() {
		return pLONG_LITERAL;
	}
	
	public ParserRule getLONG_LITERALRule() {
		return getLONG_LITERALAccess().getRule();
	}
	
	//fragment DIGIT:
	//	INT;
	public DIGITElements getDIGITAccess() {
		return pDIGIT;
	}
	
	public ParserRule getDIGITRule() {
		return getDIGITAccess().getRule();
	}
	
	//Keyword:
	//	{Keyword} STREAM
	//	| {Keyword} DEFINE
	//	| {Keyword} FROM
	//	| {Keyword} SELECT
	//	| {Keyword} a=AS
	//	| {Keyword} INSERT
	//	| {Keyword} INTO
	//	| {Keyword} ALL
	//	| {Keyword} EVENTS
	//	| {Keyword} TABLE
	//	| {Keyword} WINDOW
	//	| {Keyword} OUTPUT
	//	| {Keyword} RAW
	//	| {Keyword} EXPIRED
	//	| {Keyword} CURRENT
	//	| {Keyword} RETURN
	//	| {Keyword} PARTITION
	//	| {Keyword} every=EVERY
	//	| {Keyword} uni=UNIDIRECTIONAL
	//	| {Keyword} on=ON
	//	| {Keyword} WITHIN
	//	| {Keyword} LEFT
	//	| {Keyword} RIGHT
	//	| {Keyword} FULL
	//	| {Keyword} JOIN
	//	| {Keyword} OUTER
	//	| {Keyword} INNER
	//	| {Keyword} YEARS
	//	| {Keyword} MONTHS
	//	| {Keyword} WEEKS
	//	| {Keyword} DAYS
	//	| {Keyword} HOURS
	//	| {Keyword} MINUTES
	//	| {Keyword} SECONDS
	//	| {Keyword} MILLISECONDS
	//	| {Keyword} STRINGS
	//	| {Keyword} INTS
	//	| {Keyword} LONG
	//	| {Keyword} FLOAT
	//	| {Keyword} DOUBLE
	//	| {Keyword} BOOL
	//	| {Keyword} OBJECT
	//	| {Keyword} and=AND
	//	| {Keyword} or=OR
	//	| {Keyword} not=NOT
	//	| {Keyword} IS
	//	| {Keyword} NULL
	//	| {Keyword} SNAPSHOT
	//	| {Keyword} LAST
	//	| {Keyword} FIRST
	//	| {Keyword} GROUP
	//	| {Keyword} BY
	//	| {Keyword} HAVING
	//	| {Keyword} WITH
	//	| {Keyword} of=OF
	//	| {Keyword} BEGIN
	//	| {Keyword} END
	//	| {Keyword} DELETE
	//	| {Keyword} FOR
	//	| {Keyword} TRUE
	//	| {Keyword} FALSE
	//	| {Keyword} UPDATE;
	public KeywordElements getKeywordAccess() {
		return pKeyword;
	}
	
	public ParserRule getKeywordRule() {
		return getKeywordAccess().getRule();
	}
	
	//AS:
	//	a='as';
	public ASElements getASAccess() {
		return pAS;
	}
	
	public ParserRule getASRule() {
		return getASAccess().getRule();
	}
	
	//ON:
	//	on='on';
	public ONElements getONAccess() {
		return pON;
	}
	
	public ParserRule getONRule() {
		return getONAccess().getRule();
	}
	
	//UNIDIRECTIONAL:
	//	unidirectional='unidirectional';
	public UNIDIRECTIONALElements getUNIDIRECTIONALAccess() {
		return pUNIDIRECTIONAL;
	}
	
	public ParserRule getUNIDIRECTIONALRule() {
		return getUNIDIRECTIONALAccess().getRule();
	}
	
	//NOT:
	//	not1='not';
	public NOTElements getNOTAccess() {
		return pNOT;
	}
	
	public ParserRule getNOTRule() {
		return getNOTAccess().getRule();
	}
	
	//EVERY:
	//	every='every';
	public EVERYElements getEVERYAccess() {
		return pEVERY;
	}
	
	public ParserRule getEVERYRule() {
		return getEVERYAccess().getRule();
	}
	
	//AND:
	//	and='and';
	public ANDElements getANDAccess() {
		return pAND;
	}
	
	public ParserRule getANDRule() {
		return getANDAccess().getRule();
	}
	
	//OR:
	//	or+='or';
	public ORElements getORAccess() {
		return pOR;
	}
	
	public ParserRule getORRule() {
		return getORAccess().getRule();
	}
	
	//IN:
	//	in='in';
	public INElements getINAccess() {
		return pIN;
	}
	
	public ParserRule getINRule() {
		return getINAccess().getRule();
	}
	
	//OF:
	//	of='of';
	public OFElements getOFAccess() {
		return pOF;
	}
	
	public ParserRule getOFRule() {
		return getOFAccess().getRule();
	}
	
	//E:
	//	e='e';
	public EElements getEAccess() {
		return pE;
	}
	
	public ParserRule getERule() {
		return getEAccess().getRule();
	}
	
	//D:
	//	d='d';
	public DElements getDAccess() {
		return pD;
	}
	
	public ParserRule getDRule() {
		return getDAccess().getRule();
	}
	
	//F:
	//	f='f';
	public FElements getFAccess() {
		return pF;
	}
	
	public ParserRule getFRule() {
		return getFAccess().getRule();
	}
	
	//L:
	//	l='l';
	public LElements getLAccess() {
		return pL;
	}
	
	public ParserRule getLRule() {
		return getLAccess().getRule();
	}
	
	//APP:
	//	ap='app';
	public APPElements getAPPAccess() {
		return pAPP;
	}
	
	public ParserRule getAPPRule() {
		return getAPPAccess().getRule();
	}
	
	//fragment STREAM:
	//	str='stream';
	public STREAMElements getSTREAMAccess() {
		return pSTREAM;
	}
	
	public ParserRule getSTREAMRule() {
		return getSTREAMAccess().getRule();
	}
	
	//fragment DEFINE:
	//	define='define';
	public DEFINEElements getDEFINEAccess() {
		return pDEFINE;
	}
	
	public ParserRule getDEFINERule() {
		return getDEFINEAccess().getRule();
	}
	
	//fragment TABLE:
	//	table='table';
	public TABLEElements getTABLEAccess() {
		return pTABLE;
	}
	
	public ParserRule getTABLERule() {
		return getTABLEAccess().getRule();
	}
	
	//fragment WINDOW:
	//	window='window';
	public WINDOWElements getWINDOWAccess() {
		return pWINDOW;
	}
	
	public ParserRule getWINDOWRule() {
		return getWINDOWAccess().getRule();
	}
	
	//fragment OUTPUT:
	//	output='output';
	public OUTPUTElements getOUTPUTAccess() {
		return pOUTPUT;
	}
	
	public ParserRule getOUTPUTRule() {
		return getOUTPUTAccess().getRule();
	}
	
	//fragment STRINGS:
	//	string='string';
	public STRINGSElements getSTRINGSAccess() {
		return pSTRINGS;
	}
	
	public ParserRule getSTRINGSRule() {
		return getSTRINGSAccess().getRule();
	}
	
	//fragment INTS:
	//	int='int';
	public INTSElements getINTSAccess() {
		return pINTS;
	}
	
	public ParserRule getINTSRule() {
		return getINTSAccess().getRule();
	}
	
	//fragment LONG:
	//	long='long';
	public LONGElements getLONGAccess() {
		return pLONG;
	}
	
	public ParserRule getLONGRule() {
		return getLONGAccess().getRule();
	}
	
	//fragment DOUBLE:
	//	double='double';
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}
	
	//fragment FLOAT:
	//	float='float';
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//fragment BOOL:
	//	bool='bool';
	public BOOLElements getBOOLAccess() {
		return pBOOL;
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}
	
	//fragment OBJECT:
	//	object='object';
	public OBJECTElements getOBJECTAccess() {
		return pOBJECT;
	}
	
	public ParserRule getOBJECTRule() {
		return getOBJECTAccess().getRule();
	}
	
	//fragment ALL:
	//	all='all';
	public ALLElements getALLAccess() {
		return pALL;
	}
	
	public ParserRule getALLRule() {
		return getALLAccess().getRule();
	}
	
	//fragment EVENTS:
	//	events='events';
	public EVENTSElements getEVENTSAccess() {
		return pEVENTS;
	}
	
	public ParserRule getEVENTSRule() {
		return getEVENTSAccess().getRule();
	}
	
	//fragment RAW:
	//	raw='raw';
	public RAWElements getRAWAccess() {
		return pRAW;
	}
	
	public ParserRule getRAWRule() {
		return getRAWAccess().getRule();
	}
	
	//fragment EXPIRED:
	//	expired='expired';
	public EXPIREDElements getEXPIREDAccess() {
		return pEXPIRED;
	}
	
	public ParserRule getEXPIREDRule() {
		return getEXPIREDAccess().getRule();
	}
	
	//fragment CURRENT:
	//	currt='current';
	public CURRENTElements getCURRENTAccess() {
		return pCURRENT;
	}
	
	public ParserRule getCURRENTRule() {
		return getCURRENTAccess().getRule();
	}
	
	////fragment AND: (and='and');
	////fragment OR: (or+='or');
	////fragment IN: (in='in');
	////fragment NOT: (not='not');
	//fragment LAST:
	//	last='last';
	public LASTElements getLASTAccess() {
		return pLAST;
	}
	
	public ParserRule getLASTRule() {
		return getLASTAccess().getRule();
	}
	
	//fragment IS:
	//	is='is';
	public ISElements getISAccess() {
		return pIS;
	}
	
	public ParserRule getISRule() {
		return getISAccess().getRule();
	}
	
	//fragment NULL:
	//	null='null';
	public NULLElements getNULLAccess() {
		return pNULL;
	}
	
	public ParserRule getNULLRule() {
		return getNULLAccess().getRule();
	}
	
	//fragment TRIGGER:
	//	trigger='trigger';
	public TRIGGERElements getTRIGGERAccess() {
		return pTRIGGER;
	}
	
	public ParserRule getTRIGGERRule() {
		return getTRIGGERAccess().getRule();
	}
	
	//fragment AT:
	//	at='at';
	public ATElements getATAccess() {
		return pAT;
	}
	
	public ParserRule getATRule() {
		return getATAccess().getRule();
	}
	
	////fragment EVERY: (every='every' );
	//fragment FUNCTION:
	//	function='function';
	public FUNCTIONElements getFUNCTIONAccess() {
		return pFUNCTION;
	}
	
	public ParserRule getFUNCTIONRule() {
		return getFUNCTIONAccess().getRule();
	}
	
	//fragment RETURN:
	//	return='return';
	public RETURNElements getRETURNAccess() {
		return pRETURN;
	}
	
	public ParserRule getRETURNRule() {
		return getRETURNAccess().getRule();
	}
	
	//fragment FROM:
	//	from='from';
	public FROMElements getFROMAccess() {
		return pFROM;
	}
	
	public ParserRule getFROMRule() {
		return getFROMAccess().getRule();
	}
	
	////fragment UNIDIRECTIONAL: (unidirectional='unidirectional');
	////fragment ON: (on='on');
	//fragment WITHIN:
	//	within='within';
	public WITHINElements getWITHINAccess() {
		return pWITHIN;
	}
	
	public ParserRule getWITHINRule() {
		return getWITHINAccess().getRule();
	}
	
	//fragment LEFT:
	//	left='left';
	public LEFTElements getLEFTAccess() {
		return pLEFT;
	}
	
	public ParserRule getLEFTRule() {
		return getLEFTAccess().getRule();
	}
	
	//fragment RIGHT:
	//	right='right';
	public RIGHTElements getRIGHTAccess() {
		return pRIGHT;
	}
	
	public ParserRule getRIGHTRule() {
		return getRIGHTAccess().getRule();
	}
	
	//fragment FULL:
	//	full='full';
	public FULLElements getFULLAccess() {
		return pFULL;
	}
	
	public ParserRule getFULLRule() {
		return getFULLAccess().getRule();
	}
	
	//fragment JOIN:
	//	join='join';
	public JOINElements getJOINAccess() {
		return pJOIN;
	}
	
	public ParserRule getJOINRule() {
		return getJOINAccess().getRule();
	}
	
	//fragment INNER:
	//	inner='inner';
	public INNERElements getINNERAccess() {
		return pINNER;
	}
	
	public ParserRule getINNERRule() {
		return getINNERAccess().getRule();
	}
	
	//fragment OUTER:
	//	outer='outer';
	public OUTERElements getOUTERAccess() {
		return pOUTER;
	}
	
	public ParserRule getOUTERRule() {
		return getOUTERAccess().getRule();
	}
	
	////fragment AS: (a='as');
	//fragment SELECT:
	//	select='select';
	public SELECTElements getSELECTAccess() {
		return pSELECT;
	}
	
	public ParserRule getSELECTRule() {
		return getSELECTAccess().getRule();
	}
	
	//fragment GROUP:
	//	group='group';
	public GROUPElements getGROUPAccess() {
		return pGROUP;
	}
	
	public ParserRule getGROUPRule() {
		return getGROUPAccess().getRule();
	}
	
	//fragment BY:
	//	by='by';
	public BYElements getBYAccess() {
		return pBY;
	}
	
	public ParserRule getBYRule() {
		return getBYAccess().getRule();
	}
	
	//fragment HAVING:
	//	having='having';
	public HAVINGElements getHAVINGAccess() {
		return pHAVING;
	}
	
	public ParserRule getHAVINGRule() {
		return getHAVINGAccess().getRule();
	}
	
	//fragment SNAPSHOT:
	//	snapshot='snapshot';
	public SNAPSHOTElements getSNAPSHOTAccess() {
		return pSNAPSHOT;
	}
	
	public ParserRule getSNAPSHOTRule() {
		return getSNAPSHOTAccess().getRule();
	}
	
	//fragment FIRST:
	//	first='first';
	public FIRSTElements getFIRSTAccess() {
		return pFIRST;
	}
	
	public ParserRule getFIRSTRule() {
		return getFIRSTAccess().getRule();
	}
	
	//fragment INSERT:
	//	insert='insert';
	public INSERTElements getINSERTAccess() {
		return pINSERT;
	}
	
	public ParserRule getINSERTRule() {
		return getINSERTAccess().getRule();
	}
	
	//fragment INTO:
	//	into='into';
	public INTOElements getINTOAccess() {
		return pINTO;
	}
	
	public ParserRule getINTORule() {
		return getINTOAccess().getRule();
	}
	
	////fragment OF: (of='of');
	//fragment BEGIN:
	//	begin='begin';
	public BEGINElements getBEGINAccess() {
		return pBEGIN;
	}
	
	public ParserRule getBEGINRule() {
		return getBEGINAccess().getRule();
	}
	
	//fragment PLAN:
	//	plan='plan';
	public PLANElements getPLANAccess() {
		return pPLAN;
	}
	
	public ParserRule getPLANRule() {
		return getPLANAccess().getRule();
	}
	
	//fragment DELETE:
	//	delete='delete';
	public DELETEElements getDELETEAccess() {
		return pDELETE;
	}
	
	public ParserRule getDELETERule() {
		return getDELETEAccess().getRule();
	}
	
	//fragment FOR:
	//	for='for';
	public FORElements getFORAccess() {
		return pFOR;
	}
	
	public ParserRule getFORRule() {
		return getFORAccess().getRule();
	}
	
	//fragment UPDATE:
	//	update='update';
	public UPDATEElements getUPDATEAccess() {
		return pUPDATE;
	}
	
	public ParserRule getUPDATERule() {
		return getUPDATEAccess().getRule();
	}
	
	//fragment END:
	//	end='end';
	public ENDElements getENDAccess() {
		return pEND;
	}
	
	public ParserRule getENDRule() {
		return getENDAccess().getRule();
	}
	
	//fragment PARTITION:
	//	partition='partition';
	public PARTITIONElements getPARTITIONAccess() {
		return pPARTITION;
	}
	
	public ParserRule getPARTITIONRule() {
		return getPARTITIONAccess().getRule();
	}
	
	//fragment WITH:
	//	wi='with';
	public WITHElements getWITHAccess() {
		return pWITH;
	}
	
	public ParserRule getWITHRule() {
		return getWITHAccess().getRule();
	}
	
	//fragment AGGREGATION:
	//	aggre='aggregation';
	public AGGREGATIONElements getAGGREGATIONAccess() {
		return pAGGREGATION;
	}
	
	public ParserRule getAGGREGATIONRule() {
		return getAGGREGATIONAccess().getRule();
	}
	
	//fragment AGGREGATE:
	//	agrregate='aggregate';
	public AGGREGATEElements getAGGREGATEAccess() {
		return pAGGREGATE;
	}
	
	public ParserRule getAGGREGATERule() {
		return getAGGREGATEAccess().getRule();
	}
	
	//fragment SET:
	//	set='set';
	public SETElements getSETAccess() {
		return pSET;
	}
	
	public ParserRule getSETRule() {
		return getSETAccess().getRule();
	}
	
	//fragment PER:
	//	per='per';
	public PERElements getPERAccess() {
		return pPER;
	}
	
	public ParserRule getPERRule() {
		return getPERAccess().getRule();
	}
	
	//fragment YEARS:
	//	year='year' | years='years';
	public YEARSElements getYEARSAccess() {
		return pYEARS;
	}
	
	public ParserRule getYEARSRule() {
		return getYEARSAccess().getRule();
	}
	
	//fragment MONTHS:
	//	month='month' | months='months';
	public MONTHSElements getMONTHSAccess() {
		return pMONTHS;
	}
	
	public ParserRule getMONTHSRule() {
		return getMONTHSAccess().getRule();
	}
	
	//fragment WEEKS:
	//	week='week' | weeks='weeks';
	public WEEKSElements getWEEKSAccess() {
		return pWEEKS;
	}
	
	public ParserRule getWEEKSRule() {
		return getWEEKSAccess().getRule();
	}
	
	//fragment DAYS:
	//	day='day' | days='days';
	public DAYSElements getDAYSAccess() {
		return pDAYS;
	}
	
	public ParserRule getDAYSRule() {
		return getDAYSAccess().getRule();
	}
	
	//fragment HOURS:
	//	hour='hour' | hours='hours';
	public HOURSElements getHOURSAccess() {
		return pHOURS;
	}
	
	public ParserRule getHOURSRule() {
		return getHOURSAccess().getRule();
	}
	
	//fragment MINUTES:
	//	minute='minute' | minutes='minutes' | min='min';
	public MINUTESElements getMINUTESAccess() {
		return pMINUTES;
	}
	
	public ParserRule getMINUTESRule() {
		return getMINUTESAccess().getRule();
	}
	
	//fragment SECONDS:
	//	second='second' | seconds='seconds' | sec='sec';
	public SECONDSElements getSECONDSAccess() {
		return pSECONDS;
	}
	
	public ParserRule getSECONDSRule() {
		return getSECONDSAccess().getRule();
	}
	
	//fragment MILLISECONDS:
	//	millisecond='millisecond' | milliseconds='milliseconds' | millisec='millisec';
	public MILLISECONDSElements getMILLISECONDSAccess() {
		return pMILLISECONDS;
	}
	
	public ParserRule getMILLISECONDSRule() {
		return getMILLISECONDSAccess().getRule();
	}
	
	//fragment FALSE:
	//	fals='false';
	public FALSEElements getFALSEAccess() {
		return pFALSE;
	}
	
	public ParserRule getFALSERule() {
		return getFALSEAccess().getRule();
	}
	
	//fragment TRUE:
	//	tr='true';
	public TRUEElements getTRUEAccess() {
		return pTRUE;
	}
	
	public ParserRule getTRUERule() {
		return getTRUEAccess().getRule();
	}
	
	////fragment D: (d='d');
	////fragment E: (e='e');
	////fragment F: (f='f');
	////fragment L: (l='l');
	//COL:
	//	':';
	public COLElements getCOLAccess() {
		return pCOL;
	}
	
	public ParserRule getCOLRule() {
		return getCOLAccess().getRule();
	}
	
	//SCOL:
	//	';';
	public SCOLElements getSCOLAccess() {
		return pSCOL;
	}
	
	public ParserRule getSCOLRule() {
		return getSCOLAccess().getRule();
	}
	
	//DOT:
	//	'.';
	public DOTElements getDOTAccess() {
		return pDOT;
	}
	
	public ParserRule getDOTRule() {
		return getDOTAccess().getRule();
	}
	
	//TRIPLE_DOT:
	//	'...';
	public TRIPLE_DOTElements getTRIPLE_DOTAccess() {
		return pTRIPLE_DOT;
	}
	
	public ParserRule getTRIPLE_DOTRule() {
		return getTRIPLE_DOTAccess().getRule();
	}
	
	//OPEN_PAR:
	//	'(';
	public OPEN_PARElements getOPEN_PARAccess() {
		return pOPEN_PAR;
	}
	
	public ParserRule getOPEN_PARRule() {
		return getOPEN_PARAccess().getRule();
	}
	
	//CLOSE_PAR:
	//	')';
	public CLOSE_PARElements getCLOSE_PARAccess() {
		return pCLOSE_PAR;
	}
	
	public ParserRule getCLOSE_PARRule() {
		return getCLOSE_PARAccess().getRule();
	}
	
	//OPEN_SQARE_BRACKETS:
	//	'[';
	public OPEN_SQARE_BRACKETSElements getOPEN_SQARE_BRACKETSAccess() {
		return pOPEN_SQARE_BRACKETS;
	}
	
	public ParserRule getOPEN_SQARE_BRACKETSRule() {
		return getOPEN_SQARE_BRACKETSAccess().getRule();
	}
	
	//CLOSE_SQARE_BRACKETS:
	//	']';
	public CLOSE_SQARE_BRACKETSElements getCLOSE_SQARE_BRACKETSAccess() {
		return pCLOSE_SQARE_BRACKETS;
	}
	
	public ParserRule getCLOSE_SQARE_BRACKETSRule() {
		return getCLOSE_SQARE_BRACKETSAccess().getRule();
	}
	
	//COMMA:
	//	',';
	public COMMAElements getCOMMAAccess() {
		return pCOMMA;
	}
	
	public ParserRule getCOMMARule() {
		return getCOMMAAccess().getRule();
	}
	
	//ASSIGN:
	//	'=';
	public ASSIGNElements getASSIGNAccess() {
		return pASSIGN;
	}
	
	public ParserRule getASSIGNRule() {
		return getASSIGNAccess().getRule();
	}
	
	//STAR:
	//	'*';
	public STARElements getSTARAccess() {
		return pSTAR;
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}
	
	//PLUS:
	//	'+';
	public PLUSElements getPLUSAccess() {
		return pPLUS;
	}
	
	public ParserRule getPLUSRule() {
		return getPLUSAccess().getRule();
	}
	
	//QUESTION:
	//	'?';
	public QUESTIONElements getQUESTIONAccess() {
		return pQUESTION;
	}
	
	public ParserRule getQUESTIONRule() {
		return getQUESTIONAccess().getRule();
	}
	
	//MINUS:
	//	'-';
	public MINUSElements getMINUSAccess() {
		return pMINUS;
	}
	
	public ParserRule getMINUSRule() {
		return getMINUSAccess().getRule();
	}
	
	//DIV:
	//	'/';
	public DIVElements getDIVAccess() {
		return pDIV;
	}
	
	public ParserRule getDIVRule() {
		return getDIVAccess().getRule();
	}
	
	//MOD:
	//	'%';
	public MODElements getMODAccess() {
		return pMOD;
	}
	
	public ParserRule getMODRule() {
		return getMODAccess().getRule();
	}
	
	//LT:
	//	'<';
	public LTElements getLTAccess() {
		return pLT;
	}
	
	public ParserRule getLTRule() {
		return getLTAccess().getRule();
	}
	
	//LT_EQ:
	//	'<=';
	public LT_EQElements getLT_EQAccess() {
		return pLT_EQ;
	}
	
	public ParserRule getLT_EQRule() {
		return getLT_EQAccess().getRule();
	}
	
	//GT:
	//	'>';
	public GTElements getGTAccess() {
		return pGT;
	}
	
	public ParserRule getGTRule() {
		return getGTAccess().getRule();
	}
	
	//GT_EQ:
	//	'>=';
	public GT_EQElements getGT_EQAccess() {
		return pGT_EQ;
	}
	
	public ParserRule getGT_EQRule() {
		return getGT_EQAccess().getRule();
	}
	
	//EQ:
	//	'==';
	public EQElements getEQAccess() {
		return pEQ;
	}
	
	public ParserRule getEQRule() {
		return getEQAccess().getRule();
	}
	
	//NOT_EQ:
	//	'!=';
	public NOT_EQElements getNOT_EQAccess() {
		return pNOT_EQ;
	}
	
	public ParserRule getNOT_EQRule() {
		return getNOT_EQAccess().getRule();
	}
	
	//AT_SYMBOL:
	//	'@';
	public AT_SYMBOLElements getAT_SYMBOLAccess() {
		return pAT_SYMBOL;
	}
	
	public ParserRule getAT_SYMBOLRule() {
		return getAT_SYMBOLAccess().getRule();
	}
	
	//FOLLOWED_BY:
	//	'->';
	public FOLLOWED_BYElements getFOLLOWED_BYAccess() {
		return pFOLLOWED_BY;
	}
	
	public ParserRule getFOLLOWED_BYRule() {
		return getFOLLOWED_BYAccess().getRule();
	}
	
	//HASH:
	//	'#';
	public HASHElements getHASHAccess() {
		return pHASH;
	}
	
	public ParserRule getHASHRule() {
		return getHASHAccess().getRule();
	}
	
	//IdNew:
	//	ID;
	public IdNewElements getIdNewAccess() {
		return pIdNew;
	}
	
	public ParserRule getIdNewRule() {
		return getIdNewAccess().getRule();
	}
	
	//terminal ID_QUOTES:
	//	'`' ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* '`';
	public TerminalRule getID_QUOTESRule() {
		return tID_QUOTES;
	}
	
	//@ Override terminal ID:
	//	'`'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')* '`'?;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@ Override terminal INT returns ecore::EInt:
	//	'0'..'9';
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//@ Override terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//@ Override terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//@ Override terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//@ Override terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
}
