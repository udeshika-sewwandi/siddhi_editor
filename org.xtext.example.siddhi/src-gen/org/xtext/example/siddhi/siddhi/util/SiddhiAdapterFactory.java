/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.siddhi.siddhi.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.example.siddhi.siddhi.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.example.siddhi.siddhi.SiddhiPackage
 * @generated
 */
public class SiddhiAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SiddhiPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SiddhiAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = SiddhiPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SiddhiSwitch<Adapter> modelSwitch =
    new SiddhiSwitch<Adapter>()
    {
      @Override
      public Adapter caseSiddhiQL(SiddhiQL object)
      {
        return createSiddhiQLAdapter();
      }
      @Override
      public Adapter caseExecutionPlan(ExecutionPlan object)
      {
        return createExecutionPlanAdapter();
      }
      @Override
      public Adapter caseExecutionElement(ExecutionElement object)
      {
        return createExecutionElementAdapter();
      }
      @Override
      public Adapter caseDefinitionStream(DefinitionStream object)
      {
        return createDefinitionStreamAdapter();
      }
      @Override
      public Adapter caseDefinitionTable(DefinitionTable object)
      {
        return createDefinitionTableAdapter();
      }
      @Override
      public Adapter caseDefinitionWindow(DefinitionWindow object)
      {
        return createDefinitionWindowAdapter();
      }
      @Override
      public Adapter caseDefinitionTrigger(DefinitionTrigger object)
      {
        return createDefinitionTriggerAdapter();
      }
      @Override
      public Adapter caseDefinitionFunction(DefinitionFunction object)
      {
        return createDefinitionFunctionAdapter();
      }
      @Override
      public Adapter caseDefinitionAggregation(DefinitionAggregation object)
      {
        return createDefinitionAggregationAdapter();
      }
      @Override
      public Adapter caseAggregationTime(AggregationTime object)
      {
        return createAggregationTimeAdapter();
      }
      @Override
      public Adapter caseAggregationTimeInterval(AggregationTimeInterval object)
      {
        return createAggregationTimeIntervalAdapter();
      }
      @Override
      public Adapter caseAggregationTimeDuration(AggregationTimeDuration object)
      {
        return createAggregationTimeDurationAdapter();
      }
      @Override
      public Adapter caseAggregationTimeRange(AggregationTimeRange object)
      {
        return createAggregationTimeRangeAdapter();
      }
      @Override
      public Adapter caseFunctionName(FunctionName object)
      {
        return createFunctionNameAdapter();
      }
      @Override
      public Adapter caseLanguageName(LanguageName object)
      {
        return createLanguageNameAdapter();
      }
      @Override
      public Adapter caseFunctionBody(FunctionBody object)
      {
        return createFunctionBodyAdapter();
      }
      @Override
      public Adapter caseTriggerName(TriggerName object)
      {
        return createTriggerNameAdapter();
      }
      @Override
      public Adapter caseAppAnnotation(AppAnnotation object)
      {
        return createAppAnnotationAdapter();
      }
      @Override
      public Adapter caseAnnotation(Annotation object)
      {
        return createAnnotationAdapter();
      }
      @Override
      public Adapter caseAnnotationElement(AnnotationElement object)
      {
        return createAnnotationElementAdapter();
      }
      @Override
      public Adapter casePropertyValue(PropertyValue object)
      {
        return createPropertyValueAdapter();
      }
      @Override
      public Adapter casePropertyName(PropertyName object)
      {
        return createPropertyNameAdapter();
      }
      @Override
      public Adapter casePropertySeparator(PropertySeparator object)
      {
        return createPropertySeparatorAdapter();
      }
      @Override
      public Adapter caseFeatures(Features object)
      {
        return createFeaturesAdapter();
      }
      @Override
      public Adapter caseAttributeType(AttributeType object)
      {
        return createAttributeTypeAdapter();
      }
      @Override
      public Adapter caseSource(Source object)
      {
        return createSourceAdapter();
      }
      @Override
      public Adapter caseSource1(Source1 object)
      {
        return createSource1Adapter();
      }
      @Override
      public Adapter caseExecPartition(ExecPartition object)
      {
        return createExecPartitionAdapter();
      }
      @Override
      public Adapter casePartitionWithStream(PartitionWithStream object)
      {
        return createPartitionWithStreamAdapter();
      }
      @Override
      public Adapter caseConditionRanges(ConditionRanges object)
      {
        return createConditionRangesAdapter();
      }
      @Override
      public Adapter caseConditionRange(ConditionRange object)
      {
        return createConditionRangeAdapter();
      }
      @Override
      public Adapter caseQuery(Query object)
      {
        return createQueryAdapter();
      }
      @Override
      public Adapter caseQueryOutput(QueryOutput object)
      {
        return createQueryOutputAdapter();
      }
      @Override
      public Adapter caseTarget(Target object)
      {
        return createTargetAdapter();
      }
      @Override
      public Adapter caseSetClause(SetClause object)
      {
        return createSetClauseAdapter();
      }
      @Override
      public Adapter caseSetAssignment(SetAssignment object)
      {
        return createSetAssignmentAdapter();
      }
      @Override
      public Adapter caseOutputEventType(OutputEventType object)
      {
        return createOutputEventTypeAdapter();
      }
      @Override
      public Adapter caseOutputRate(OutputRate object)
      {
        return createOutputRateAdapter();
      }
      @Override
      public Adapter caseOutputRateType(OutputRateType object)
      {
        return createOutputRateTypeAdapter();
      }
      @Override
      public Adapter caseGroupByQuerySelection(GroupByQuerySelection object)
      {
        return createGroupByQuerySelectionAdapter();
      }
      @Override
      public Adapter caseQuerySection(QuerySection object)
      {
        return createQuerySectionAdapter();
      }
      @Override
      public Adapter caseGroupBy(GroupBy object)
      {
        return createGroupByAdapter();
      }
      @Override
      public Adapter caseHavingExpr(HavingExpr object)
      {
        return createHavingExprAdapter();
      }
      @Override
      public Adapter caseOutputAttribute(OutputAttribute object)
      {
        return createOutputAttributeAdapter();
      }
      @Override
      public Adapter caseOutAttr(OutAttr object)
      {
        return createOutAttrAdapter();
      }
      @Override
      public Adapter caseQueryInput(QueryInput object)
      {
        return createQueryInputAdapter();
      }
      @Override
      public Adapter caseSequenceStream(SequenceStream object)
      {
        return createSequenceStreamAdapter();
      }
      @Override
      public Adapter caseEverySequenceSourceChain(EverySequenceSourceChain object)
      {
        return createEverySequenceSourceChainAdapter();
      }
      @Override
      public Adapter caseEveryAbsentSequenceSourceChain(EveryAbsentSequenceSourceChain object)
      {
        return createEveryAbsentSequenceSourceChainAdapter();
      }
      @Override
      public Adapter caseAbsentSequenceSourceChain(AbsentSequenceSourceChain object)
      {
        return createAbsentSequenceSourceChainAdapter();
      }
      @Override
      public Adapter caseLeftAbsentSequenceSource(LeftAbsentSequenceSource object)
      {
        return createLeftAbsentSequenceSourceAdapter();
      }
      @Override
      public Adapter caseRightAbsentSequenceSource(RightAbsentSequenceSource object)
      {
        return createRightAbsentSequenceSourceAdapter();
      }
      @Override
      public Adapter caseSequenceSourceChain(SequenceSourceChain object)
      {
        return createSequenceSourceChainAdapter();
      }
      @Override
      public Adapter caseSequenceSource(SequenceSource object)
      {
        return createSequenceSourceAdapter();
      }
      @Override
      public Adapter caseSequenceCollectionStatefulSource(SequenceCollectionStatefulSource object)
      {
        return createSequenceCollectionStatefulSourceAdapter();
      }
      @Override
      public Adapter caseAnonymousStream(AnonymousStream object)
      {
        return createAnonymousStreamAdapter();
      }
      @Override
      public Adapter casePatternStream(PatternStream object)
      {
        return createPatternStreamAdapter();
      }
      @Override
      public Adapter caseEveryPatternSourceChain(EveryPatternSourceChain object)
      {
        return createEveryPatternSourceChainAdapter();
      }
      @Override
      public Adapter casePatternSourceChain(PatternSourceChain object)
      {
        return createPatternSourceChainAdapter();
      }
      @Override
      public Adapter casePatternSource(PatternSource object)
      {
        return createPatternSourceAdapter();
      }
      @Override
      public Adapter caseLogicalStatefulSource(LogicalStatefulSource object)
      {
        return createLogicalStatefulSourceAdapter();
      }
      @Override
      public Adapter casePatternCollectionStatefulSource(PatternCollectionStatefulSource object)
      {
        return createPatternCollectionStatefulSourceAdapter();
      }
      @Override
      public Adapter caseCollect(Collect object)
      {
        return createCollectAdapter();
      }
      @Override
      public Adapter caseLogicalAbsentStatefulSource(LogicalAbsentStatefulSource object)
      {
        return createLogicalAbsentStatefulSourceAdapter();
      }
      @Override
      public Adapter caseAbsentPatternSourceChain(AbsentPatternSourceChain object)
      {
        return createAbsentPatternSourceChainAdapter();
      }
      @Override
      public Adapter caseEveryAbsentPatternSource(EveryAbsentPatternSource object)
      {
        return createEveryAbsentPatternSourceAdapter();
      }
      @Override
      public Adapter caseBasicAbsentPatternSource(BasicAbsentPatternSource object)
      {
        return createBasicAbsentPatternSourceAdapter();
      }
      @Override
      public Adapter caseForTime(ForTime object)
      {
        return createForTimeAdapter();
      }
      @Override
      public Adapter caseLeftAbsentPatternSource(LeftAbsentPatternSource object)
      {
        return createLeftAbsentPatternSourceAdapter();
      }
      @Override
      public Adapter caseRightAbsentPatternSource(RightAbsentPatternSource object)
      {
        return createRightAbsentPatternSourceAdapter();
      }
      @Override
      public Adapter caseJoinStream(JoinStream object)
      {
        return createJoinStreamAdapter();
      }
      @Override
      public Adapter caseWithinTimeRange(WithinTimeRange object)
      {
        return createWithinTimeRangeAdapter();
      }
      @Override
      public Adapter casePer1(Per1 object)
      {
        return createPer1Adapter();
      }
      @Override
      public Adapter caseJoinSource(JoinSource object)
      {
        return createJoinSourceAdapter();
      }
      @Override
      public Adapter caseStreamAlias(StreamAlias object)
      {
        return createStreamAliasAdapter();
      }
      @Override
      public Adapter caseWithinTime(WithinTime object)
      {
        return createWithinTimeAdapter();
      }
      @Override
      public Adapter casejoins(joins object)
      {
        return createjoinsAdapter();
      }
      @Override
      public Adapter caseStandardStream(StandardStream object)
      {
        return createStandardStreamAdapter();
      }
      @Override
      public Adapter caseMainSource(MainSource object)
      {
        return createMainSourceAdapter();
      }
      @Override
      public Adapter caseBasicSourceStreamHandlers(BasicSourceStreamHandlers object)
      {
        return createBasicSourceStreamHandlersAdapter();
      }
      @Override
      public Adapter caseBasicSourceStreamHandlers1(BasicSourceStreamHandlers1 object)
      {
        return createBasicSourceStreamHandlers1Adapter();
      }
      @Override
      public Adapter caseBasicSourceStreamHandler(BasicSourceStreamHandler object)
      {
        return createBasicSourceStreamHandlerAdapter();
      }
      @Override
      public Adapter caseFilter(Filter object)
      {
        return createFilterAdapter();
      }
      @Override
      public Adapter caseStreamFunction(StreamFunction object)
      {
        return createStreamFunctionAdapter();
      }
      @Override
      public Adapter caseWin(Win object)
      {
        return createWinAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseMathOperation(MathOperation object)
      {
        return createMathOperationAdapter();
      }
      @Override
      public Adapter caseMathAddsubOperation(MathAddsubOperation object)
      {
        return createMathAddsubOperationAdapter();
      }
      @Override
      public Adapter caseMathDivmulOperation(MathDivmulOperation object)
      {
        return createMathDivmulOperationAdapter();
      }
      @Override
      public Adapter caseMathOtherOperations(MathOtherOperations object)
      {
        return createMathOtherOperationsAdapter();
      }
      @Override
      public Adapter caseNullCheck(NullCheck object)
      {
        return createNullCheckAdapter();
      }
      @Override
      public Adapter caseStreamReference(StreamReference object)
      {
        return createStreamReferenceAdapter();
      }
      @Override
      public Adapter caseLiteral(Literal object)
      {
        return createLiteralAdapter();
      }
      @Override
      public Adapter caseAttributeReference(AttributeReference object)
      {
        return createAttributeReferenceAdapter();
      }
      @Override
      public Adapter caseFeaturesOrOutAttr(FeaturesOrOutAttr object)
      {
        return createFeaturesOrOutAttrAdapter();
      }
      @Override
      public Adapter caseFeaturesOrOutAttrReference(FeaturesOrOutAttrReference object)
      {
        return createFeaturesOrOutAttrReferenceAdapter();
      }
      @Override
      public Adapter caseStandardStatefulSource(StandardStatefulSource object)
      {
        return createStandardStatefulSourceAdapter();
      }
      @Override
      public Adapter caseBasicSource(BasicSource object)
      {
        return createBasicSourceAdapter();
      }
      @Override
      public Adapter caseSource1OrStandardStatefulSource(Source1OrStandardStatefulSource object)
      {
        return createSource1OrStandardStatefulSourceAdapter();
      }
      @Override
      public Adapter caseSourceOrEventReference(SourceOrEventReference object)
      {
        return createSourceOrEventReferenceAdapter();
      }
      @Override
      public Adapter caseAttributeNameReference(AttributeNameReference object)
      {
        return createAttributeNameReferenceAdapter();
      }
      @Override
      public Adapter caseAttributeIndex(AttributeIndex object)
      {
        return createAttributeIndexAdapter();
      }
      @Override
      public Adapter caseConstantValue(ConstantValue object)
      {
        return createConstantValueAdapter();
      }
      @Override
      public Adapter caseFunctionOperation(FunctionOperation object)
      {
        return createFunctionOperationAdapter();
      }
      @Override
      public Adapter caseFunctionNamespace(FunctionNamespace object)
      {
        return createFunctionNamespaceAdapter();
      }
      @Override
      public Adapter caseFunctionId(FunctionId object)
      {
        return createFunctionIdAdapter();
      }
      @Override
      public Adapter caseAttributeList(AttributeList object)
      {
        return createAttributeListAdapter();
      }
      @Override
      public Adapter caseAttribute(Attribute object)
      {
        return createAttributeAdapter();
      }
      @Override
      public Adapter caseName(Name object)
      {
        return createNameAdapter();
      }
      @Override
      public Adapter caseBoolValue(BoolValue object)
      {
        return createBoolValueAdapter();
      }
      @Override
      public Adapter caseSignedDoubleValue(SignedDoubleValue object)
      {
        return createSignedDoubleValueAdapter();
      }
      @Override
      public Adapter caseSignedFloatValue(SignedFloatValue object)
      {
        return createSignedFloatValueAdapter();
      }
      @Override
      public Adapter caseSignedLongValue(SignedLongValue object)
      {
        return createSignedLongValueAdapter();
      }
      @Override
      public Adapter caseStringValue(StringValue object)
      {
        return createStringValueAdapter();
      }
      @Override
      public Adapter caseTimeValue(TimeValue object)
      {
        return createTimeValueAdapter();
      }
      @Override
      public Adapter caseYearValue(YearValue object)
      {
        return createYearValueAdapter();
      }
      @Override
      public Adapter caseMonthValue(MonthValue object)
      {
        return createMonthValueAdapter();
      }
      @Override
      public Adapter caseWeekValue(WeekValue object)
      {
        return createWeekValueAdapter();
      }
      @Override
      public Adapter caseDayValue(DayValue object)
      {
        return createDayValueAdapter();
      }
      @Override
      public Adapter caseHourValue(HourValue object)
      {
        return createHourValueAdapter();
      }
      @Override
      public Adapter caseMinuteValue(MinuteValue object)
      {
        return createMinuteValueAdapter();
      }
      @Override
      public Adapter caseSecondValue(SecondValue object)
      {
        return createSecondValueAdapter();
      }
      @Override
      public Adapter caseMillisecondValue(MillisecondValue object)
      {
        return createMillisecondValueAdapter();
      }
      @Override
      public Adapter caseDOUBLE_LITERAL(DOUBLE_LITERAL object)
      {
        return createDOUBLE_LITERALAdapter();
      }
      @Override
      public Adapter caseFLOAT_LITERAL(FLOAT_LITERAL object)
      {
        return createFLOAT_LITERALAdapter();
      }
      @Override
      public Adapter caseLONG_LITERAL(LONG_LITERAL object)
      {
        return createLONG_LITERALAdapter();
      }
      @Override
      public Adapter caseKeyword(Keyword object)
      {
        return createKeywordAdapter();
      }
      @Override
      public Adapter caseAS(AS object)
      {
        return createASAdapter();
      }
      @Override
      public Adapter caseON(ON object)
      {
        return createONAdapter();
      }
      @Override
      public Adapter caseUNIDIRECTIONAL(UNIDIRECTIONAL object)
      {
        return createUNIDIRECTIONALAdapter();
      }
      @Override
      public Adapter caseNOT(NOT object)
      {
        return createNOTAdapter();
      }
      @Override
      public Adapter caseEVERY(EVERY object)
      {
        return createEVERYAdapter();
      }
      @Override
      public Adapter caseAND(AND object)
      {
        return createANDAdapter();
      }
      @Override
      public Adapter caseOR(OR object)
      {
        return createORAdapter();
      }
      @Override
      public Adapter caseIN(IN object)
      {
        return createINAdapter();
      }
      @Override
      public Adapter caseOF(OF object)
      {
        return createOFAdapter();
      }
      @Override
      public Adapter caseE(E object)
      {
        return createEAdapter();
      }
      @Override
      public Adapter caseD(D object)
      {
        return createDAdapter();
      }
      @Override
      public Adapter caseF(F object)
      {
        return createFAdapter();
      }
      @Override
      public Adapter caseL(L object)
      {
        return createLAdapter();
      }
      @Override
      public Adapter caseAPP(APP object)
      {
        return createAPPAdapter();
      }
      @Override
      public Adapter caseSTREAM(STREAM object)
      {
        return createSTREAMAdapter();
      }
      @Override
      public Adapter caseDEFINE(DEFINE object)
      {
        return createDEFINEAdapter();
      }
      @Override
      public Adapter caseTABLE(TABLE object)
      {
        return createTABLEAdapter();
      }
      @Override
      public Adapter caseWINDOW(WINDOW object)
      {
        return createWINDOWAdapter();
      }
      @Override
      public Adapter caseOUTPUT(OUTPUT object)
      {
        return createOUTPUTAdapter();
      }
      @Override
      public Adapter caseSTRINGS(STRINGS object)
      {
        return createSTRINGSAdapter();
      }
      @Override
      public Adapter caseINTS(INTS object)
      {
        return createINTSAdapter();
      }
      @Override
      public Adapter caseLONG(LONG object)
      {
        return createLONGAdapter();
      }
      @Override
      public Adapter caseDOUBLE(DOUBLE object)
      {
        return createDOUBLEAdapter();
      }
      @Override
      public Adapter caseFLOAT(FLOAT object)
      {
        return createFLOATAdapter();
      }
      @Override
      public Adapter caseBOOL(BOOL object)
      {
        return createBOOLAdapter();
      }
      @Override
      public Adapter caseOBJECT(OBJECT object)
      {
        return createOBJECTAdapter();
      }
      @Override
      public Adapter caseALL(ALL object)
      {
        return createALLAdapter();
      }
      @Override
      public Adapter caseEVENTS(EVENTS object)
      {
        return createEVENTSAdapter();
      }
      @Override
      public Adapter caseRAW(RAW object)
      {
        return createRAWAdapter();
      }
      @Override
      public Adapter caseEXPIRED(EXPIRED object)
      {
        return createEXPIREDAdapter();
      }
      @Override
      public Adapter caseCURRENT(CURRENT object)
      {
        return createCURRENTAdapter();
      }
      @Override
      public Adapter caseLAST(LAST object)
      {
        return createLASTAdapter();
      }
      @Override
      public Adapter caseIS(IS object)
      {
        return createISAdapter();
      }
      @Override
      public Adapter caseNULL(NULL object)
      {
        return createNULLAdapter();
      }
      @Override
      public Adapter caseTRIGGER(TRIGGER object)
      {
        return createTRIGGERAdapter();
      }
      @Override
      public Adapter caseAT(AT object)
      {
        return createATAdapter();
      }
      @Override
      public Adapter caseFUNCTION(FUNCTION object)
      {
        return createFUNCTIONAdapter();
      }
      @Override
      public Adapter caseRETURN(RETURN object)
      {
        return createRETURNAdapter();
      }
      @Override
      public Adapter caseFROM(FROM object)
      {
        return createFROMAdapter();
      }
      @Override
      public Adapter caseWITHIN(WITHIN object)
      {
        return createWITHINAdapter();
      }
      @Override
      public Adapter caseLEFT(LEFT object)
      {
        return createLEFTAdapter();
      }
      @Override
      public Adapter caseRIGHT(RIGHT object)
      {
        return createRIGHTAdapter();
      }
      @Override
      public Adapter caseFULL(FULL object)
      {
        return createFULLAdapter();
      }
      @Override
      public Adapter caseJOIN(JOIN object)
      {
        return createJOINAdapter();
      }
      @Override
      public Adapter caseINNER(INNER object)
      {
        return createINNERAdapter();
      }
      @Override
      public Adapter caseOUTER(OUTER object)
      {
        return createOUTERAdapter();
      }
      @Override
      public Adapter caseSELECT(SELECT object)
      {
        return createSELECTAdapter();
      }
      @Override
      public Adapter caseGROUP(GROUP object)
      {
        return createGROUPAdapter();
      }
      @Override
      public Adapter caseBY(BY object)
      {
        return createBYAdapter();
      }
      @Override
      public Adapter caseHAVING(HAVING object)
      {
        return createHAVINGAdapter();
      }
      @Override
      public Adapter caseSNAPSHOT(SNAPSHOT object)
      {
        return createSNAPSHOTAdapter();
      }
      @Override
      public Adapter caseFIRST(FIRST object)
      {
        return createFIRSTAdapter();
      }
      @Override
      public Adapter caseINSERT(INSERT object)
      {
        return createINSERTAdapter();
      }
      @Override
      public Adapter caseINTO(INTO object)
      {
        return createINTOAdapter();
      }
      @Override
      public Adapter caseBEGIN(BEGIN object)
      {
        return createBEGINAdapter();
      }
      @Override
      public Adapter casePLAN(PLAN object)
      {
        return createPLANAdapter();
      }
      @Override
      public Adapter caseDELETE(DELETE object)
      {
        return createDELETEAdapter();
      }
      @Override
      public Adapter caseFOR(FOR object)
      {
        return createFORAdapter();
      }
      @Override
      public Adapter caseUPDATE(UPDATE object)
      {
        return createUPDATEAdapter();
      }
      @Override
      public Adapter caseEND(END object)
      {
        return createENDAdapter();
      }
      @Override
      public Adapter casePARTITION(PARTITION object)
      {
        return createPARTITIONAdapter();
      }
      @Override
      public Adapter caseWITH(WITH object)
      {
        return createWITHAdapter();
      }
      @Override
      public Adapter caseAGGREGATION(AGGREGATION object)
      {
        return createAGGREGATIONAdapter();
      }
      @Override
      public Adapter caseAGGREGATE(AGGREGATE object)
      {
        return createAGGREGATEAdapter();
      }
      @Override
      public Adapter caseSET(SET object)
      {
        return createSETAdapter();
      }
      @Override
      public Adapter casePER(PER object)
      {
        return createPERAdapter();
      }
      @Override
      public Adapter caseYEARS(YEARS object)
      {
        return createYEARSAdapter();
      }
      @Override
      public Adapter caseMONTHS(MONTHS object)
      {
        return createMONTHSAdapter();
      }
      @Override
      public Adapter caseWEEKS(WEEKS object)
      {
        return createWEEKSAdapter();
      }
      @Override
      public Adapter caseDAYS(DAYS object)
      {
        return createDAYSAdapter();
      }
      @Override
      public Adapter caseHOURS(HOURS object)
      {
        return createHOURSAdapter();
      }
      @Override
      public Adapter caseMINUTES(MINUTES object)
      {
        return createMINUTESAdapter();
      }
      @Override
      public Adapter caseSECONDS(SECONDS object)
      {
        return createSECONDSAdapter();
      }
      @Override
      public Adapter caseMILLISECONDS(MILLISECONDS object)
      {
        return createMILLISECONDSAdapter();
      }
      @Override
      public Adapter caseFALSE(FALSE object)
      {
        return createFALSEAdapter();
      }
      @Override
      public Adapter caseTRUE(TRUE object)
      {
        return createTRUEAdapter();
      }
      @Override
      public Adapter caseLeftAbsentSequenceSource1(LeftAbsentSequenceSource1 object)
      {
        return createLeftAbsentSequenceSource1Adapter();
      }
      @Override
      public Adapter caseRightAbsentSequenceSource1(RightAbsentSequenceSource1 object)
      {
        return createRightAbsentSequenceSource1Adapter();
      }
      @Override
      public Adapter caseLeftAbsentPatternSource1(LeftAbsentPatternSource1 object)
      {
        return createLeftAbsentPatternSource1Adapter();
      }
      @Override
      public Adapter caseRightAbsentPatternSource1(RightAbsentPatternSource1 object)
      {
        return createRightAbsentPatternSource1Adapter();
      }
      @Override
      public Adapter caseMathLogicalOperation(MathLogicalOperation object)
      {
        return createMathLogicalOperationAdapter();
      }
      @Override
      public Adapter caseMathInOperation(MathInOperation object)
      {
        return createMathInOperationAdapter();
      }
      @Override
      public Adapter caseMathGtLtOperation(MathGtLtOperation object)
      {
        return createMathGtLtOperationAdapter();
      }
      @Override
      public Adapter caseMathEqualOperation(MathEqualOperation object)
      {
        return createMathEqualOperationAdapter();
      }
      @Override
      public Adapter caseNotOperation(NotOperation object)
      {
        return createNotOperationAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SiddhiQL <em>QL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SiddhiQL
   * @generated
   */
  public Adapter createSiddhiQLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.ExecutionPlan <em>Execution Plan</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.ExecutionPlan
   * @generated
   */
  public Adapter createExecutionPlanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.ExecutionElement <em>Execution Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.ExecutionElement
   * @generated
   */
  public Adapter createExecutionElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DefinitionStream <em>Definition Stream</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DefinitionStream
   * @generated
   */
  public Adapter createDefinitionStreamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DefinitionTable <em>Definition Table</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DefinitionTable
   * @generated
   */
  public Adapter createDefinitionTableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DefinitionWindow <em>Definition Window</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DefinitionWindow
   * @generated
   */
  public Adapter createDefinitionWindowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DefinitionTrigger <em>Definition Trigger</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DefinitionTrigger
   * @generated
   */
  public Adapter createDefinitionTriggerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DefinitionFunction <em>Definition Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DefinitionFunction
   * @generated
   */
  public Adapter createDefinitionFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DefinitionAggregation <em>Definition Aggregation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DefinitionAggregation
   * @generated
   */
  public Adapter createDefinitionAggregationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AggregationTime <em>Aggregation Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AggregationTime
   * @generated
   */
  public Adapter createAggregationTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AggregationTimeInterval <em>Aggregation Time Interval</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AggregationTimeInterval
   * @generated
   */
  public Adapter createAggregationTimeIntervalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AggregationTimeDuration <em>Aggregation Time Duration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AggregationTimeDuration
   * @generated
   */
  public Adapter createAggregationTimeDurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AggregationTimeRange <em>Aggregation Time Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AggregationTimeRange
   * @generated
   */
  public Adapter createAggregationTimeRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FunctionName <em>Function Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FunctionName
   * @generated
   */
  public Adapter createFunctionNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.LanguageName <em>Language Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.LanguageName
   * @generated
   */
  public Adapter createLanguageNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FunctionBody <em>Function Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FunctionBody
   * @generated
   */
  public Adapter createFunctionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.TriggerName <em>Trigger Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.TriggerName
   * @generated
   */
  public Adapter createTriggerNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AppAnnotation <em>App Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AppAnnotation
   * @generated
   */
  public Adapter createAppAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Annotation <em>Annotation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Annotation
   * @generated
   */
  public Adapter createAnnotationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AnnotationElement <em>Annotation Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AnnotationElement
   * @generated
   */
  public Adapter createAnnotationElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.PropertyValue <em>Property Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.PropertyValue
   * @generated
   */
  public Adapter createPropertyValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.PropertyName <em>Property Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.PropertyName
   * @generated
   */
  public Adapter createPropertyNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.PropertySeparator <em>Property Separator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.PropertySeparator
   * @generated
   */
  public Adapter createPropertySeparatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Features <em>Features</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Features
   * @generated
   */
  public Adapter createFeaturesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AttributeType <em>Attribute Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AttributeType
   * @generated
   */
  public Adapter createAttributeTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Source <em>Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Source
   * @generated
   */
  public Adapter createSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Source1 <em>Source1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Source1
   * @generated
   */
  public Adapter createSource1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.ExecPartition <em>Exec Partition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.ExecPartition
   * @generated
   */
  public Adapter createExecPartitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.PartitionWithStream <em>Partition With Stream</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.PartitionWithStream
   * @generated
   */
  public Adapter createPartitionWithStreamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.ConditionRanges <em>Condition Ranges</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.ConditionRanges
   * @generated
   */
  public Adapter createConditionRangesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.ConditionRange <em>Condition Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.ConditionRange
   * @generated
   */
  public Adapter createConditionRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Query <em>Query</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Query
   * @generated
   */
  public Adapter createQueryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.QueryOutput <em>Query Output</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.QueryOutput
   * @generated
   */
  public Adapter createQueryOutputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Target <em>Target</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Target
   * @generated
   */
  public Adapter createTargetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SetClause <em>Set Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SetClause
   * @generated
   */
  public Adapter createSetClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SetAssignment <em>Set Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SetAssignment
   * @generated
   */
  public Adapter createSetAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.OutputEventType <em>Output Event Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.OutputEventType
   * @generated
   */
  public Adapter createOutputEventTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.OutputRate <em>Output Rate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.OutputRate
   * @generated
   */
  public Adapter createOutputRateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.OutputRateType <em>Output Rate Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.OutputRateType
   * @generated
   */
  public Adapter createOutputRateTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.GroupByQuerySelection <em>Group By Query Selection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.GroupByQuerySelection
   * @generated
   */
  public Adapter createGroupByQuerySelectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.QuerySection <em>Query Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.QuerySection
   * @generated
   */
  public Adapter createQuerySectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.GroupBy <em>Group By</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.GroupBy
   * @generated
   */
  public Adapter createGroupByAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.HavingExpr <em>Having Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.HavingExpr
   * @generated
   */
  public Adapter createHavingExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.OutputAttribute <em>Output Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.OutputAttribute
   * @generated
   */
  public Adapter createOutputAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.OutAttr <em>Out Attr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.OutAttr
   * @generated
   */
  public Adapter createOutAttrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.QueryInput <em>Query Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.QueryInput
   * @generated
   */
  public Adapter createQueryInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SequenceStream <em>Sequence Stream</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SequenceStream
   * @generated
   */
  public Adapter createSequenceStreamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.EverySequenceSourceChain <em>Every Sequence Source Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.EverySequenceSourceChain
   * @generated
   */
  public Adapter createEverySequenceSourceChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.EveryAbsentSequenceSourceChain <em>Every Absent Sequence Source Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.EveryAbsentSequenceSourceChain
   * @generated
   */
  public Adapter createEveryAbsentSequenceSourceChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AbsentSequenceSourceChain <em>Absent Sequence Source Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AbsentSequenceSourceChain
   * @generated
   */
  public Adapter createAbsentSequenceSourceChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.LeftAbsentSequenceSource <em>Left Absent Sequence Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.LeftAbsentSequenceSource
   * @generated
   */
  public Adapter createLeftAbsentSequenceSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.RightAbsentSequenceSource <em>Right Absent Sequence Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.RightAbsentSequenceSource
   * @generated
   */
  public Adapter createRightAbsentSequenceSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SequenceSourceChain <em>Sequence Source Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SequenceSourceChain
   * @generated
   */
  public Adapter createSequenceSourceChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SequenceSource <em>Sequence Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SequenceSource
   * @generated
   */
  public Adapter createSequenceSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SequenceCollectionStatefulSource <em>Sequence Collection Stateful Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SequenceCollectionStatefulSource
   * @generated
   */
  public Adapter createSequenceCollectionStatefulSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AnonymousStream <em>Anonymous Stream</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AnonymousStream
   * @generated
   */
  public Adapter createAnonymousStreamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.PatternStream <em>Pattern Stream</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.PatternStream
   * @generated
   */
  public Adapter createPatternStreamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.EveryPatternSourceChain <em>Every Pattern Source Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.EveryPatternSourceChain
   * @generated
   */
  public Adapter createEveryPatternSourceChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.PatternSourceChain <em>Pattern Source Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.PatternSourceChain
   * @generated
   */
  public Adapter createPatternSourceChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.PatternSource <em>Pattern Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.PatternSource
   * @generated
   */
  public Adapter createPatternSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.LogicalStatefulSource <em>Logical Stateful Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.LogicalStatefulSource
   * @generated
   */
  public Adapter createLogicalStatefulSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.PatternCollectionStatefulSource <em>Pattern Collection Stateful Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.PatternCollectionStatefulSource
   * @generated
   */
  public Adapter createPatternCollectionStatefulSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Collect <em>Collect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Collect
   * @generated
   */
  public Adapter createCollectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.LogicalAbsentStatefulSource <em>Logical Absent Stateful Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.LogicalAbsentStatefulSource
   * @generated
   */
  public Adapter createLogicalAbsentStatefulSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AbsentPatternSourceChain <em>Absent Pattern Source Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AbsentPatternSourceChain
   * @generated
   */
  public Adapter createAbsentPatternSourceChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.EveryAbsentPatternSource <em>Every Absent Pattern Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.EveryAbsentPatternSource
   * @generated
   */
  public Adapter createEveryAbsentPatternSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.BasicAbsentPatternSource <em>Basic Absent Pattern Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.BasicAbsentPatternSource
   * @generated
   */
  public Adapter createBasicAbsentPatternSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.ForTime <em>For Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.ForTime
   * @generated
   */
  public Adapter createForTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.LeftAbsentPatternSource <em>Left Absent Pattern Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.LeftAbsentPatternSource
   * @generated
   */
  public Adapter createLeftAbsentPatternSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.RightAbsentPatternSource <em>Right Absent Pattern Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.RightAbsentPatternSource
   * @generated
   */
  public Adapter createRightAbsentPatternSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.JoinStream <em>Join Stream</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.JoinStream
   * @generated
   */
  public Adapter createJoinStreamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.WithinTimeRange <em>Within Time Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.WithinTimeRange
   * @generated
   */
  public Adapter createWithinTimeRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Per1 <em>Per1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Per1
   * @generated
   */
  public Adapter createPer1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.JoinSource <em>Join Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.JoinSource
   * @generated
   */
  public Adapter createJoinSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.StreamAlias <em>Stream Alias</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.StreamAlias
   * @generated
   */
  public Adapter createStreamAliasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.WithinTime <em>Within Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.WithinTime
   * @generated
   */
  public Adapter createWithinTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.joins <em>joins</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.joins
   * @generated
   */
  public Adapter createjoinsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.StandardStream <em>Standard Stream</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.StandardStream
   * @generated
   */
  public Adapter createStandardStreamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MainSource <em>Main Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MainSource
   * @generated
   */
  public Adapter createMainSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.BasicSourceStreamHandlers <em>Basic Source Stream Handlers</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.BasicSourceStreamHandlers
   * @generated
   */
  public Adapter createBasicSourceStreamHandlersAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.BasicSourceStreamHandlers1 <em>Basic Source Stream Handlers1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.BasicSourceStreamHandlers1
   * @generated
   */
  public Adapter createBasicSourceStreamHandlers1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.BasicSourceStreamHandler <em>Basic Source Stream Handler</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.BasicSourceStreamHandler
   * @generated
   */
  public Adapter createBasicSourceStreamHandlerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Filter <em>Filter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Filter
   * @generated
   */
  public Adapter createFilterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.StreamFunction <em>Stream Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.StreamFunction
   * @generated
   */
  public Adapter createStreamFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Win <em>Win</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Win
   * @generated
   */
  public Adapter createWinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MathOperation <em>Math Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MathOperation
   * @generated
   */
  public Adapter createMathOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MathAddsubOperation <em>Math Addsub Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MathAddsubOperation
   * @generated
   */
  public Adapter createMathAddsubOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MathDivmulOperation <em>Math Divmul Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MathDivmulOperation
   * @generated
   */
  public Adapter createMathDivmulOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MathOtherOperations <em>Math Other Operations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MathOtherOperations
   * @generated
   */
  public Adapter createMathOtherOperationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.NullCheck <em>Null Check</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.NullCheck
   * @generated
   */
  public Adapter createNullCheckAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.StreamReference <em>Stream Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.StreamReference
   * @generated
   */
  public Adapter createStreamReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Literal
   * @generated
   */
  public Adapter createLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AttributeReference <em>Attribute Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AttributeReference
   * @generated
   */
  public Adapter createAttributeReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FeaturesOrOutAttr <em>Features Or Out Attr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FeaturesOrOutAttr
   * @generated
   */
  public Adapter createFeaturesOrOutAttrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FeaturesOrOutAttrReference <em>Features Or Out Attr Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FeaturesOrOutAttrReference
   * @generated
   */
  public Adapter createFeaturesOrOutAttrReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.StandardStatefulSource <em>Standard Stateful Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.StandardStatefulSource
   * @generated
   */
  public Adapter createStandardStatefulSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.BasicSource <em>Basic Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.BasicSource
   * @generated
   */
  public Adapter createBasicSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Source1OrStandardStatefulSource <em>Source1 Or Standard Stateful Source</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Source1OrStandardStatefulSource
   * @generated
   */
  public Adapter createSource1OrStandardStatefulSourceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SourceOrEventReference <em>Source Or Event Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SourceOrEventReference
   * @generated
   */
  public Adapter createSourceOrEventReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AttributeNameReference <em>Attribute Name Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AttributeNameReference
   * @generated
   */
  public Adapter createAttributeNameReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AttributeIndex <em>Attribute Index</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AttributeIndex
   * @generated
   */
  public Adapter createAttributeIndexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.ConstantValue <em>Constant Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.ConstantValue
   * @generated
   */
  public Adapter createConstantValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FunctionOperation <em>Function Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FunctionOperation
   * @generated
   */
  public Adapter createFunctionOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FunctionNamespace <em>Function Namespace</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FunctionNamespace
   * @generated
   */
  public Adapter createFunctionNamespaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FunctionId <em>Function Id</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FunctionId
   * @generated
   */
  public Adapter createFunctionIdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AttributeList <em>Attribute List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AttributeList
   * @generated
   */
  public Adapter createAttributeListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Attribute <em>Attribute</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Attribute
   * @generated
   */
  public Adapter createAttributeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Name <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Name
   * @generated
   */
  public Adapter createNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.BoolValue <em>Bool Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.BoolValue
   * @generated
   */
  public Adapter createBoolValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SignedDoubleValue <em>Signed Double Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SignedDoubleValue
   * @generated
   */
  public Adapter createSignedDoubleValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SignedFloatValue <em>Signed Float Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SignedFloatValue
   * @generated
   */
  public Adapter createSignedFloatValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SignedLongValue <em>Signed Long Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SignedLongValue
   * @generated
   */
  public Adapter createSignedLongValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.StringValue <em>String Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.StringValue
   * @generated
   */
  public Adapter createStringValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.TimeValue <em>Time Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.TimeValue
   * @generated
   */
  public Adapter createTimeValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.YearValue <em>Year Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.YearValue
   * @generated
   */
  public Adapter createYearValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MonthValue <em>Month Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MonthValue
   * @generated
   */
  public Adapter createMonthValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.WeekValue <em>Week Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.WeekValue
   * @generated
   */
  public Adapter createWeekValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DayValue <em>Day Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DayValue
   * @generated
   */
  public Adapter createDayValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.HourValue <em>Hour Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.HourValue
   * @generated
   */
  public Adapter createHourValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MinuteValue <em>Minute Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MinuteValue
   * @generated
   */
  public Adapter createMinuteValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SecondValue <em>Second Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SecondValue
   * @generated
   */
  public Adapter createSecondValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MillisecondValue <em>Millisecond Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MillisecondValue
   * @generated
   */
  public Adapter createMillisecondValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DOUBLE_LITERAL <em>DOUBLE LITERAL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DOUBLE_LITERAL
   * @generated
   */
  public Adapter createDOUBLE_LITERALAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FLOAT_LITERAL <em>FLOAT LITERAL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FLOAT_LITERAL
   * @generated
   */
  public Adapter createFLOAT_LITERALAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.LONG_LITERAL <em>LONG LITERAL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.LONG_LITERAL
   * @generated
   */
  public Adapter createLONG_LITERALAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.Keyword <em>Keyword</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.Keyword
   * @generated
   */
  public Adapter createKeywordAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AS <em>AS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AS
   * @generated
   */
  public Adapter createASAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.ON <em>ON</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.ON
   * @generated
   */
  public Adapter createONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.UNIDIRECTIONAL <em>UNIDIRECTIONAL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.UNIDIRECTIONAL
   * @generated
   */
  public Adapter createUNIDIRECTIONALAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.NOT <em>NOT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.NOT
   * @generated
   */
  public Adapter createNOTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.EVERY <em>EVERY</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.EVERY
   * @generated
   */
  public Adapter createEVERYAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AND <em>AND</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AND
   * @generated
   */
  public Adapter createANDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.OR <em>OR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.OR
   * @generated
   */
  public Adapter createORAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.IN <em>IN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.IN
   * @generated
   */
  public Adapter createINAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.OF <em>OF</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.OF
   * @generated
   */
  public Adapter createOFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.E <em>E</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.E
   * @generated
   */
  public Adapter createEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.D <em>D</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.D
   * @generated
   */
  public Adapter createDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.F <em>F</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.F
   * @generated
   */
  public Adapter createFAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.L <em>L</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.L
   * @generated
   */
  public Adapter createLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.APP <em>APP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.APP
   * @generated
   */
  public Adapter createAPPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.STREAM <em>STREAM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.STREAM
   * @generated
   */
  public Adapter createSTREAMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DEFINE <em>DEFINE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DEFINE
   * @generated
   */
  public Adapter createDEFINEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.TABLE <em>TABLE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.TABLE
   * @generated
   */
  public Adapter createTABLEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.WINDOW <em>WINDOW</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.WINDOW
   * @generated
   */
  public Adapter createWINDOWAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.OUTPUT <em>OUTPUT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.OUTPUT
   * @generated
   */
  public Adapter createOUTPUTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.STRINGS <em>STRINGS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.STRINGS
   * @generated
   */
  public Adapter createSTRINGSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.INTS <em>INTS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.INTS
   * @generated
   */
  public Adapter createINTSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.LONG <em>LONG</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.LONG
   * @generated
   */
  public Adapter createLONGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DOUBLE <em>DOUBLE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DOUBLE
   * @generated
   */
  public Adapter createDOUBLEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FLOAT <em>FLOAT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FLOAT
   * @generated
   */
  public Adapter createFLOATAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.BOOL <em>BOOL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.BOOL
   * @generated
   */
  public Adapter createBOOLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.OBJECT <em>OBJECT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.OBJECT
   * @generated
   */
  public Adapter createOBJECTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.ALL <em>ALL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.ALL
   * @generated
   */
  public Adapter createALLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.EVENTS <em>EVENTS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.EVENTS
   * @generated
   */
  public Adapter createEVENTSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.RAW <em>RAW</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.RAW
   * @generated
   */
  public Adapter createRAWAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.EXPIRED <em>EXPIRED</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.EXPIRED
   * @generated
   */
  public Adapter createEXPIREDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.CURRENT <em>CURRENT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.CURRENT
   * @generated
   */
  public Adapter createCURRENTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.LAST <em>LAST</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.LAST
   * @generated
   */
  public Adapter createLASTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.IS <em>IS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.IS
   * @generated
   */
  public Adapter createISAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.NULL <em>NULL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.NULL
   * @generated
   */
  public Adapter createNULLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.TRIGGER <em>TRIGGER</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.TRIGGER
   * @generated
   */
  public Adapter createTRIGGERAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AT <em>AT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AT
   * @generated
   */
  public Adapter createATAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FUNCTION <em>FUNCTION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FUNCTION
   * @generated
   */
  public Adapter createFUNCTIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.RETURN <em>RETURN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.RETURN
   * @generated
   */
  public Adapter createRETURNAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FROM <em>FROM</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FROM
   * @generated
   */
  public Adapter createFROMAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.WITHIN <em>WITHIN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.WITHIN
   * @generated
   */
  public Adapter createWITHINAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.LEFT <em>LEFT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.LEFT
   * @generated
   */
  public Adapter createLEFTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.RIGHT <em>RIGHT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.RIGHT
   * @generated
   */
  public Adapter createRIGHTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FULL <em>FULL</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FULL
   * @generated
   */
  public Adapter createFULLAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.JOIN <em>JOIN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.JOIN
   * @generated
   */
  public Adapter createJOINAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.INNER <em>INNER</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.INNER
   * @generated
   */
  public Adapter createINNERAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.OUTER <em>OUTER</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.OUTER
   * @generated
   */
  public Adapter createOUTERAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SELECT <em>SELECT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SELECT
   * @generated
   */
  public Adapter createSELECTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.GROUP <em>GROUP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.GROUP
   * @generated
   */
  public Adapter createGROUPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.BY <em>BY</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.BY
   * @generated
   */
  public Adapter createBYAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.HAVING <em>HAVING</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.HAVING
   * @generated
   */
  public Adapter createHAVINGAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SNAPSHOT <em>SNAPSHOT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SNAPSHOT
   * @generated
   */
  public Adapter createSNAPSHOTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FIRST <em>FIRST</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FIRST
   * @generated
   */
  public Adapter createFIRSTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.INSERT <em>INSERT</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.INSERT
   * @generated
   */
  public Adapter createINSERTAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.INTO <em>INTO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.INTO
   * @generated
   */
  public Adapter createINTOAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.BEGIN <em>BEGIN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.BEGIN
   * @generated
   */
  public Adapter createBEGINAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.PLAN <em>PLAN</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.PLAN
   * @generated
   */
  public Adapter createPLANAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DELETE <em>DELETE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DELETE
   * @generated
   */
  public Adapter createDELETEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FOR <em>FOR</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FOR
   * @generated
   */
  public Adapter createFORAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.UPDATE <em>UPDATE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.UPDATE
   * @generated
   */
  public Adapter createUPDATEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.END <em>END</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.END
   * @generated
   */
  public Adapter createENDAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.PARTITION <em>PARTITION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.PARTITION
   * @generated
   */
  public Adapter createPARTITIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.WITH <em>WITH</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.WITH
   * @generated
   */
  public Adapter createWITHAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AGGREGATION <em>AGGREGATION</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AGGREGATION
   * @generated
   */
  public Adapter createAGGREGATIONAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.AGGREGATE <em>AGGREGATE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.AGGREGATE
   * @generated
   */
  public Adapter createAGGREGATEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SET <em>SET</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SET
   * @generated
   */
  public Adapter createSETAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.PER <em>PER</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.PER
   * @generated
   */
  public Adapter createPERAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.YEARS <em>YEARS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.YEARS
   * @generated
   */
  public Adapter createYEARSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MONTHS <em>MONTHS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MONTHS
   * @generated
   */
  public Adapter createMONTHSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.WEEKS <em>WEEKS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.WEEKS
   * @generated
   */
  public Adapter createWEEKSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.DAYS <em>DAYS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.DAYS
   * @generated
   */
  public Adapter createDAYSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.HOURS <em>HOURS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.HOURS
   * @generated
   */
  public Adapter createHOURSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MINUTES <em>MINUTES</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MINUTES
   * @generated
   */
  public Adapter createMINUTESAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.SECONDS <em>SECONDS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.SECONDS
   * @generated
   */
  public Adapter createSECONDSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MILLISECONDS <em>MILLISECONDS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MILLISECONDS
   * @generated
   */
  public Adapter createMILLISECONDSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.FALSE <em>FALSE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.FALSE
   * @generated
   */
  public Adapter createFALSEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.TRUE <em>TRUE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.TRUE
   * @generated
   */
  public Adapter createTRUEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.LeftAbsentSequenceSource1 <em>Left Absent Sequence Source1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.LeftAbsentSequenceSource1
   * @generated
   */
  public Adapter createLeftAbsentSequenceSource1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.RightAbsentSequenceSource1 <em>Right Absent Sequence Source1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.RightAbsentSequenceSource1
   * @generated
   */
  public Adapter createRightAbsentSequenceSource1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.LeftAbsentPatternSource1 <em>Left Absent Pattern Source1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.LeftAbsentPatternSource1
   * @generated
   */
  public Adapter createLeftAbsentPatternSource1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.RightAbsentPatternSource1 <em>Right Absent Pattern Source1</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.RightAbsentPatternSource1
   * @generated
   */
  public Adapter createRightAbsentPatternSource1Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MathLogicalOperation <em>Math Logical Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MathLogicalOperation
   * @generated
   */
  public Adapter createMathLogicalOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MathInOperation <em>Math In Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MathInOperation
   * @generated
   */
  public Adapter createMathInOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MathGtLtOperation <em>Math Gt Lt Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MathGtLtOperation
   * @generated
   */
  public Adapter createMathGtLtOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.MathEqualOperation <em>Math Equal Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.MathEqualOperation
   * @generated
   */
  public Adapter createMathEqualOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.siddhi.siddhi.NotOperation <em>Not Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.siddhi.siddhi.NotOperation
   * @generated
   */
  public Adapter createNotOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //SiddhiAdapterFactory
