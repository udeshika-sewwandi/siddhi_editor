/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.siddhi.siddhi.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.siddhi.siddhi.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.siddhi.siddhi.SiddhiPackage
 * @generated
 */
public class SiddhiSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SiddhiPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SiddhiSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SiddhiPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SiddhiPackage.SIDDHI_QL:
      {
        SiddhiQL siddhiQL = (SiddhiQL)theEObject;
        T result = caseSiddhiQL(siddhiQL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.EXECUTION_PLAN:
      {
        ExecutionPlan executionPlan = (ExecutionPlan)theEObject;
        T result = caseExecutionPlan(executionPlan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.EXECUTION_ELEMENT:
      {
        ExecutionElement executionElement = (ExecutionElement)theEObject;
        T result = caseExecutionElement(executionElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DEFINITION_STREAM:
      {
        DefinitionStream definitionStream = (DefinitionStream)theEObject;
        T result = caseDefinitionStream(definitionStream);
        if (result == null) result = caseDEFINE(definitionStream);
        if (result == null) result = caseSTREAM(definitionStream);
        if (result == null) result = caseTABLE(definitionStream);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DEFINITION_TABLE:
      {
        DefinitionTable definitionTable = (DefinitionTable)theEObject;
        T result = caseDefinitionTable(definitionTable);
        if (result == null) result = caseDEFINE(definitionTable);
        if (result == null) result = caseTABLE(definitionTable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DEFINITION_WINDOW:
      {
        DefinitionWindow definitionWindow = (DefinitionWindow)theEObject;
        T result = caseDefinitionWindow(definitionWindow);
        if (result == null) result = caseDEFINE(definitionWindow);
        if (result == null) result = caseWINDOW(definitionWindow);
        if (result == null) result = caseOUTPUT(definitionWindow);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DEFINITION_TRIGGER:
      {
        DefinitionTrigger definitionTrigger = (DefinitionTrigger)theEObject;
        T result = caseDefinitionTrigger(definitionTrigger);
        if (result == null) result = caseDEFINE(definitionTrigger);
        if (result == null) result = caseTRIGGER(definitionTrigger);
        if (result == null) result = caseAT(definitionTrigger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DEFINITION_FUNCTION:
      {
        DefinitionFunction definitionFunction = (DefinitionFunction)theEObject;
        T result = caseDefinitionFunction(definitionFunction);
        if (result == null) result = caseDEFINE(definitionFunction);
        if (result == null) result = caseFUNCTION(definitionFunction);
        if (result == null) result = caseRETURN(definitionFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DEFINITION_AGGREGATION:
      {
        DefinitionAggregation definitionAggregation = (DefinitionAggregation)theEObject;
        T result = caseDefinitionAggregation(definitionAggregation);
        if (result == null) result = caseDEFINE(definitionAggregation);
        if (result == null) result = caseAGGREGATION(definitionAggregation);
        if (result == null) result = caseFROM(definitionAggregation);
        if (result == null) result = caseAGGREGATE(definitionAggregation);
        if (result == null) result = caseBY(definitionAggregation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.AGGREGATION_TIME:
      {
        AggregationTime aggregationTime = (AggregationTime)theEObject;
        T result = caseAggregationTime(aggregationTime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.AGGREGATION_TIME_INTERVAL:
      {
        aggregation_time_interval aggregation_time_interval = (aggregation_time_interval)theEObject;
        T result = caseaggregation_time_interval(aggregation_time_interval);
        if (result == null) result = caseAggregationTime(aggregation_time_interval);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.AGGREGATION_TIME_DURATION:
      {
        AggregationTimeDuration aggregationTimeDuration = (AggregationTimeDuration)theEObject;
        T result = caseAggregationTimeDuration(aggregationTimeDuration);
        if (result == null) result = caseSECONDS(aggregationTimeDuration);
        if (result == null) result = caseMINUTES(aggregationTimeDuration);
        if (result == null) result = caseHOURS(aggregationTimeDuration);
        if (result == null) result = caseDAYS(aggregationTimeDuration);
        if (result == null) result = caseWEEKS(aggregationTimeDuration);
        if (result == null) result = caseMONTHS(aggregationTimeDuration);
        if (result == null) result = caseYEARS(aggregationTimeDuration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.AGGREGATION_TIME_RANGE:
      {
        AggregationTimeRange aggregationTimeRange = (AggregationTimeRange)theEObject;
        T result = caseAggregationTimeRange(aggregationTimeRange);
        if (result == null) result = caseAggregationTime(aggregationTimeRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FUNCTION_NAME:
      {
        FunctionName functionName = (FunctionName)theEObject;
        T result = caseFunctionName(functionName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.LANGUAGE_NAME:
      {
        LanguageName languageName = (LanguageName)theEObject;
        T result = caseLanguageName(languageName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FUNCTION_BODY:
      {
        FunctionBody functionBody = (FunctionBody)theEObject;
        T result = caseFunctionBody(functionBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.TRIGGER_NAME:
      {
        TriggerName triggerName = (TriggerName)theEObject;
        T result = caseTriggerName(triggerName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.APP_ANNOTATION:
      {
        AppAnnotation appAnnotation = (AppAnnotation)theEObject;
        T result = caseAppAnnotation(appAnnotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ANNOTATION:
      {
        Annotation annotation = (Annotation)theEObject;
        T result = caseAnnotation(annotation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ANNOTATION_ELEMENT:
      {
        AnnotationElement annotationElement = (AnnotationElement)theEObject;
        T result = caseAnnotationElement(annotationElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PROPERTY_VALUE:
      {
        PropertyValue propertyValue = (PropertyValue)theEObject;
        T result = casePropertyValue(propertyValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PROPERTY_NAME:
      {
        PropertyName propertyName = (PropertyName)theEObject;
        T result = casePropertyName(propertyName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PROPERTY_SEPARATOR:
      {
        PropertySeparator propertySeparator = (PropertySeparator)theEObject;
        T result = casePropertySeparator(propertySeparator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FEATURES:
      {
        Features features = (Features)theEObject;
        T result = caseFeatures(features);
        if (result == null) result = caseFeaturesOrOutAttr(features);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ATTRIBUTE_TYPE:
      {
        AttributeType attributeType = (AttributeType)theEObject;
        T result = caseAttributeType(attributeType);
        if (result == null) result = caseSTRINGS(attributeType);
        if (result == null) result = caseINTS(attributeType);
        if (result == null) result = caseLONG(attributeType);
        if (result == null) result = caseFLOAT(attributeType);
        if (result == null) result = caseDOUBLE(attributeType);
        if (result == null) result = caseBOOL(attributeType);
        if (result == null) result = caseOBJECT(attributeType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.EXEC_PARTITION:
      {
        ExecPartition execPartition = (ExecPartition)theEObject;
        T result = caseExecPartition(execPartition);
        if (result == null) result = casePARTITION(execPartition);
        if (result == null) result = caseWITH(execPartition);
        if (result == null) result = caseBEGIN(execPartition);
        if (result == null) result = caseEND(execPartition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PARTITION_WITH_STREAM:
      {
        PartitionWithStream partitionWithStream = (PartitionWithStream)theEObject;
        T result = casePartitionWithStream(partitionWithStream);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.CONDITION_RANGES:
      {
        ConditionRanges conditionRanges = (ConditionRanges)theEObject;
        T result = caseConditionRanges(conditionRanges);
        if (result == null) result = casePartitionWithStream(conditionRanges);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.CONDITION_RANGE:
      {
        ConditionRange conditionRange = (ConditionRange)theEObject;
        T result = caseConditionRange(conditionRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.QUERY:
      {
        Query query = (Query)theEObject;
        T result = caseQuery(query);
        if (result == null) result = caseFROM(query);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.QUERY_INPUT:
      {
        QueryInput queryInput = (QueryInput)theEObject;
        T result = caseQueryInput(queryInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.JOIN_STREAM:
      {
        JoinStream joinStream = (JoinStream)theEObject;
        T result = caseJoinStream(joinStream);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.WITHIN_TIME_RANGE:
      {
        WithinTimeRange withinTimeRange = (WithinTimeRange)theEObject;
        T result = caseWithinTimeRange(withinTimeRange);
        if (result == null) result = caseWITHIN(withinTimeRange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PER1:
      {
        Per1 per1 = (Per1)theEObject;
        T result = casePer1(per1);
        if (result == null) result = casePER(per1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.JOIN_SOURCE:
      {
        JoinSource joinSource = (JoinSource)theEObject;
        T result = caseJoinSource(joinSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.STREAM_ALIAS:
      {
        StreamAlias streamAlias = (StreamAlias)theEObject;
        T result = caseStreamAlias(streamAlias);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.JOINS:
      {
        joins joins = (joins)theEObject;
        T result = casejoins(joins);
        if (result == null) result = caseLEFT(joins);
        if (result == null) result = caseOUTER(joins);
        if (result == null) result = caseJOIN(joins);
        if (result == null) result = caseRIGHT(joins);
        if (result == null) result = caseFULL(joins);
        if (result == null) result = caseINNER(joins);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.STANDARD_STREAM:
      {
        StandardStream standardStream = (StandardStream)theEObject;
        T result = caseStandardStream(standardStream);
        if (result == null) result = caseJoinStream(standardStream);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MAIN_SOURCE:
      {
        MainSource mainSource = (MainSource)theEObject;
        T result = caseMainSource(mainSource);
        if (result == null) result = caseJoinSource(mainSource);
        if (result == null) result = caseStandardStream(mainSource);
        if (result == null) result = caseJoinStream(mainSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PATTERN_STREAM:
      {
        PatternStream patternStream = (PatternStream)theEObject;
        T result = casePatternStream(patternStream);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.EVERY_PATTERN_SOURCE_CHAIN:
      {
        EveryPatternSourceChain everyPatternSourceChain = (EveryPatternSourceChain)theEObject;
        T result = caseEveryPatternSourceChain(everyPatternSourceChain);
        if (result == null) result = casePatternStream(everyPatternSourceChain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PATTERN_SOURCE_CHAIN:
      {
        PatternSourceChain patternSourceChain = (PatternSourceChain)theEObject;
        T result = casePatternSourceChain(patternSourceChain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PATTERN_SOURCE:
      {
        PatternSource patternSource = (PatternSource)theEObject;
        T result = casePatternSource(patternSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE:
      {
        LogicalStatefulSource logicalStatefulSource = (LogicalStatefulSource)theEObject;
        T result = caseLogicalStatefulSource(logicalStatefulSource);
        if (result == null) result = caseSequenceSource(logicalStatefulSource);
        if (result == null) result = caseSequenceSourceChain(logicalStatefulSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PATTERN_COLLECTION_STATEFUL_SOURCE:
      {
        PatternCollectionStatefulSource patternCollectionStatefulSource = (PatternCollectionStatefulSource)theEObject;
        T result = casePatternCollectionStatefulSource(patternCollectionStatefulSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.COLLECT:
      {
        Collect collect = (Collect)theEObject;
        T result = caseCollect(collect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.WITHIN_TIME:
      {
        WithinTime withinTime = (WithinTime)theEObject;
        T result = caseWithinTime(withinTime);
        if (result == null) result = caseWITHIN(withinTime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.LOGICAL_ABSENT_STATEFUL_SOURCE:
      {
        LogicalAbsentStatefulSource logicalAbsentStatefulSource = (LogicalAbsentStatefulSource)theEObject;
        T result = caseLogicalAbsentStatefulSource(logicalAbsentStatefulSource);
        if (result == null) result = caseSequenceSource(logicalAbsentStatefulSource);
        if (result == null) result = caseSequenceSourceChain(logicalAbsentStatefulSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ABSENT_PATTERN_SOURCE_CHAIN:
      {
        AbsentPatternSourceChain absentPatternSourceChain = (AbsentPatternSourceChain)theEObject;
        T result = caseAbsentPatternSourceChain(absentPatternSourceChain);
        if (result == null) result = casePatternStream(absentPatternSourceChain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.EVERY_ABSENT_PATTERN_SOURCE:
      {
        EveryAbsentPatternSource everyAbsentPatternSource = (EveryAbsentPatternSource)theEObject;
        T result = caseEveryAbsentPatternSource(everyAbsentPatternSource);
        if (result == null) result = caseAbsentPatternSourceChain(everyAbsentPatternSource);
        if (result == null) result = casePatternStream(everyAbsentPatternSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.BASIC_ABSENT_PATTERN_SOURCE:
      {
        BasicAbsentPatternSource basicAbsentPatternSource = (BasicAbsentPatternSource)theEObject;
        T result = caseBasicAbsentPatternSource(basicAbsentPatternSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FOR_TIME:
      {
        ForTime forTime = (ForTime)theEObject;
        T result = caseForTime(forTime);
        if (result == null) result = caseFOR(forTime);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.LEFT_ABSENT_PATTERN_SOURCE:
      {
        LeftAbsentPatternSource leftAbsentPatternSource = (LeftAbsentPatternSource)theEObject;
        T result = caseLeftAbsentPatternSource(leftAbsentPatternSource);
        if (result == null) result = caseAbsentPatternSourceChain(leftAbsentPatternSource);
        if (result == null) result = casePatternStream(leftAbsentPatternSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.RIGHT_ABSENT_PATTERN_SOURCE:
      {
        RightAbsentPatternSource rightAbsentPatternSource = (RightAbsentPatternSource)theEObject;
        T result = caseRightAbsentPatternSource(rightAbsentPatternSource);
        if (result == null) result = caseAbsentPatternSourceChain(rightAbsentPatternSource);
        if (result == null) result = casePatternStream(rightAbsentPatternSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SEQUENCE_STREAM:
      {
        SequenceStream sequenceStream = (SequenceStream)theEObject;
        T result = caseSequenceStream(sequenceStream);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.EVERY_SEQUENCE_SOURCE_CHAIN:
      {
        EverySequenceSourceChain everySequenceSourceChain = (EverySequenceSourceChain)theEObject;
        T result = caseEverySequenceSourceChain(everySequenceSourceChain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.EVERY_ABSENT_SEQUENCE_SOURCE_CHAIN:
      {
        EveryAbsentSequenceSourceChain everyAbsentSequenceSourceChain = (EveryAbsentSequenceSourceChain)theEObject;
        T result = caseEveryAbsentSequenceSourceChain(everyAbsentSequenceSourceChain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ABSENT_SEQUENCE_SOURCE_CHAIN:
      {
        AbsentSequenceSourceChain absentSequenceSourceChain = (AbsentSequenceSourceChain)theEObject;
        T result = caseAbsentSequenceSourceChain(absentSequenceSourceChain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.LEFT_ABSENT_SEQUENCE_SOURCE:
      {
        LeftAbsentSequenceSource leftAbsentSequenceSource = (LeftAbsentSequenceSource)theEObject;
        T result = caseLeftAbsentSequenceSource(leftAbsentSequenceSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.RIGHT_ABSENT_SEQUENCE_SOURCE:
      {
        RightAbsentSequenceSource rightAbsentSequenceSource = (RightAbsentSequenceSource)theEObject;
        T result = caseRightAbsentSequenceSource(rightAbsentSequenceSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SEQUENCE_SOURCE_CHAIN:
      {
        SequenceSourceChain sequenceSourceChain = (SequenceSourceChain)theEObject;
        T result = caseSequenceSourceChain(sequenceSourceChain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SEQUENCE_SOURCE:
      {
        SequenceSource sequenceSource = (SequenceSource)theEObject;
        T result = caseSequenceSource(sequenceSource);
        if (result == null) result = caseSequenceSourceChain(sequenceSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SEQUENCE_COLLECTION_STATEFUL_SOURCE:
      {
        SequenceCollectionStatefulSource sequenceCollectionStatefulSource = (SequenceCollectionStatefulSource)theEObject;
        T result = caseSequenceCollectionStatefulSource(sequenceCollectionStatefulSource);
        if (result == null) result = caseSequenceSource(sequenceCollectionStatefulSource);
        if (result == null) result = caseSequenceSourceChain(sequenceCollectionStatefulSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ANONYMOUS_STREAM:
      {
        AnonymousStream anonymousStream = (AnonymousStream)theEObject;
        T result = caseAnonymousStream(anonymousStream);
        if (result == null) result = caseFROM(anonymousStream);
        if (result == null) result = caseRETURN(anonymousStream);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.OUTPUT_RATE:
      {
        OutputRate outputRate = (OutputRate)theEObject;
        T result = caseOutputRate(outputRate);
        if (result == null) result = caseOUTPUT(outputRate);
        if (result == null) result = caseEVENTS(outputRate);
        if (result == null) result = caseSNAPSHOT(outputRate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.OUTPUT_RATE_TYPE:
      {
        OutputRateType outputRateType = (OutputRateType)theEObject;
        T result = caseOutputRateType(outputRateType);
        if (result == null) result = caseALL(outputRateType);
        if (result == null) result = caseLAST(outputRateType);
        if (result == null) result = caseFIRST(outputRateType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.QUERY_OUTPUT:
      {
        QueryOutput queryOutput = (QueryOutput)theEObject;
        T result = caseQueryOutput(queryOutput);
        if (result == null) result = caseINSERT(queryOutput);
        if (result == null) result = caseINTO(queryOutput);
        if (result == null) result = caseDELETE(queryOutput);
        if (result == null) result = caseFOR(queryOutput);
        if (result == null) result = caseUPDATE(queryOutput);
        if (result == null) result = caseRETURN(queryOutput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SET_CLAUSE:
      {
        SetClause setClause = (SetClause)theEObject;
        T result = caseSetClause(setClause);
        if (result == null) result = caseSET(setClause);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SET_ASSIGNMENT:
      {
        SetAssignment setAssignment = (SetAssignment)theEObject;
        T result = caseSetAssignment(setAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.OUTPUT_EVENT_TYPE:
      {
        OutputEventType outputEventType = (OutputEventType)theEObject;
        T result = caseOutputEventType(outputEventType);
        if (result == null) result = caseALL(outputEventType);
        if (result == null) result = caseEVENTS(outputEventType);
        if (result == null) result = caseRAW(outputEventType);
        if (result == null) result = caseEXPIRED(outputEventType);
        if (result == null) result = caseCURRENT(outputEventType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.BASIC_SOURCE_STREAM_HANDLERS:
      {
        BasicSourceStreamHandlers basicSourceStreamHandlers = (BasicSourceStreamHandlers)theEObject;
        T result = caseBasicSourceStreamHandlers(basicSourceStreamHandlers);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.BASIC_SOURCE_STREAM_HANDLERS1:
      {
        BasicSourceStreamHandlers1 basicSourceStreamHandlers1 = (BasicSourceStreamHandlers1)theEObject;
        T result = caseBasicSourceStreamHandlers1(basicSourceStreamHandlers1);
        if (result == null) result = caseWINDOW(basicSourceStreamHandlers1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.BASIC_SOURCE_STREAM_HANDLER:
      {
        BasicSourceStreamHandler basicSourceStreamHandler = (BasicSourceStreamHandler)theEObject;
        T result = caseBasicSourceStreamHandler(basicSourceStreamHandler);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FILTER:
      {
        Filter filter = (Filter)theEObject;
        T result = caseFilter(filter);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.STREAM_FUNCTION:
      {
        StreamFunction streamFunction = (StreamFunction)theEObject;
        T result = caseStreamFunction(streamFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.WIN:
      {
        Win win = (Win)theEObject;
        T result = caseWin(win);
        if (result == null) result = caseWINDOW(win);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FUNCTION_OPERATION:
      {
        FunctionOperation functionOperation = (FunctionOperation)theEObject;
        T result = caseFunctionOperation(functionOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FUNCTION_NAMESPACE:
      {
        FunctionNamespace functionNamespace = (FunctionNamespace)theEObject;
        T result = caseFunctionNamespace(functionNamespace);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FUNCTION_ID:
      {
        FunctionId functionId = (FunctionId)theEObject;
        T result = caseFunctionId(functionId);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ATTRIBUTE_LIST:
      {
        AttributeList attributeList = (AttributeList)theEObject;
        T result = caseAttributeList(attributeList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ATTRIBUTE:
      {
        Attribute attribute = (Attribute)theEObject;
        T result = caseAttribute(attribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.GROUP_BY_QUERY_SELECTION:
      {
        GroupByQuerySelection groupByQuerySelection = (GroupByQuerySelection)theEObject;
        T result = caseGroupByQuerySelection(groupByQuerySelection);
        if (result == null) result = caseSELECT(groupByQuerySelection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.QUERY_SECTION:
      {
        QuerySection querySection = (QuerySection)theEObject;
        T result = caseQuerySection(querySection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.OUTPUT_ATTRIBUTE:
      {
        OutputAttribute outputAttribute = (OutputAttribute)theEObject;
        T result = caseOutputAttribute(outputAttribute);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.OUT_ATTR:
      {
        OutAttr outAttr = (OutAttr)theEObject;
        T result = caseOutAttr(outAttr);
        if (result == null) result = caseFeaturesOrOutAttr(outAttr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.GROUP_BY:
      {
        GroupBy groupBy = (GroupBy)theEObject;
        T result = caseGroupBy(groupBy);
        if (result == null) result = caseGROUP(groupBy);
        if (result == null) result = caseBY(groupBy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.HAVING_EXPR:
      {
        HavingExpr havingExpr = (HavingExpr)theEObject;
        T result = caseHavingExpr(havingExpr);
        if (result == null) result = caseHAVING(havingExpr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MATH_OPERATION:
      {
        MathOperation mathOperation = (MathOperation)theEObject;
        T result = caseMathOperation(mathOperation);
        if (result == null) result = caseExpression(mathOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.NULL_CHECK:
      {
        NullCheck nullCheck = (NullCheck)theEObject;
        T result = caseNullCheck(nullCheck);
        if (result == null) result = caseMathOperation(nullCheck);
        if (result == null) result = caseIS(nullCheck);
        if (result == null) result = caseNULL(nullCheck);
        if (result == null) result = caseExpression(nullCheck);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.STREAM_REFERENCE:
      {
        StreamReference streamReference = (StreamReference)theEObject;
        T result = caseStreamReference(streamReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MATH_OTHER_OPERATIONS1:
      {
        MathOtherOperations1 mathOtherOperations1 = (MathOtherOperations1)theEObject;
        T result = caseMathOtherOperations1(mathOtherOperations1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ATTRIBUTE_REFERENCE:
      {
        AttributeReference attributeReference = (AttributeReference)theEObject;
        T result = caseAttributeReference(attributeReference);
        if (result == null) result = caseSetAssignment(attributeReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ATTRIBUTE_NAME_REFERENCE:
      {
        AttributeNameReference attributeNameReference = (AttributeNameReference)theEObject;
        T result = caseAttributeNameReference(attributeNameReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ATTRIBUTE_INDEX:
      {
        AttributeIndex attributeIndex = (AttributeIndex)theEObject;
        T result = caseAttributeIndex(attributeIndex);
        if (result == null) result = caseLAST(attributeIndex);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.STANDARD_STATEFUL_SOURCE:
      {
        StandardStatefulSource standardStatefulSource = (StandardStatefulSource)theEObject;
        T result = caseStandardStatefulSource(standardStatefulSource);
        if (result == null) result = casePatternCollectionStatefulSource(standardStatefulSource);
        if (result == null) result = caseSequenceCollectionStatefulSource(standardStatefulSource);
        if (result == null) result = caseSource1OrStandardStatefulSource(standardStatefulSource);
        if (result == null) result = caseSequenceSource(standardStatefulSource);
        if (result == null) result = caseSequenceSourceChain(standardStatefulSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SOURCE1_OR_STANDARD_STATEFUL_SOURCE:
      {
        Source1OrStandardStatefulSource source1OrStandardStatefulSource = (Source1OrStandardStatefulSource)theEObject;
        T result = caseSource1OrStandardStatefulSource(source1OrStandardStatefulSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SOURCE_OR_EVENT_REFERENCE:
      {
        SourceOrEventReference sourceOrEventReference = (SourceOrEventReference)theEObject;
        T result = caseSourceOrEventReference(sourceOrEventReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.BASIC_SOURCE:
      {
        BasicSource basicSource = (BasicSource)theEObject;
        T result = caseBasicSource(basicSource);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FEATURES_OR_OUT_ATTR:
      {
        FeaturesOrOutAttr featuresOrOutAttr = (FeaturesOrOutAttr)theEObject;
        T result = caseFeaturesOrOutAttr(featuresOrOutAttr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FEATURES_OR_OUT_ATTR_REFERENCE:
      {
        FeaturesOrOutAttrReference featuresOrOutAttrReference = (FeaturesOrOutAttrReference)theEObject;
        T result = caseFeaturesOrOutAttrReference(featuresOrOutAttrReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.CONSTANT_VALUE:
      {
        ConstantValue constantValue = (ConstantValue)theEObject;
        T result = caseConstantValue(constantValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.NAME:
      {
        Name name = (Name)theEObject;
        T result = caseName(name);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SOURCE:
      {
        Source source = (Source)theEObject;
        T result = caseSource(source);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SOURCE1:
      {
        Source1 source1 = (Source1)theEObject;
        T result = caseSource1(source1);
        if (result == null) result = caseSource1OrStandardStatefulSource(source1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.BOOL_VALUE:
      {
        BoolValue boolValue = (BoolValue)theEObject;
        T result = caseBoolValue(boolValue);
        if (result == null) result = caseTRUE(boolValue);
        if (result == null) result = caseFALSE(boolValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SIGNED_DOUBLE_VALUE:
      {
        SignedDoubleValue signedDoubleValue = (SignedDoubleValue)theEObject;
        T result = caseSignedDoubleValue(signedDoubleValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SIGNED_FLOAT_VALUE:
      {
        SignedFloatValue signedFloatValue = (SignedFloatValue)theEObject;
        T result = caseSignedFloatValue(signedFloatValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SIGNED_LONG_VALUE:
      {
        SignedLongValue signedLongValue = (SignedLongValue)theEObject;
        T result = caseSignedLongValue(signedLongValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.STRING_VALUE:
      {
        StringValue stringValue = (StringValue)theEObject;
        T result = caseStringValue(stringValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.TIME_VALUE:
      {
        TimeValue timeValue = (TimeValue)theEObject;
        T result = caseTimeValue(timeValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.YEAR_VALUE:
      {
        YearValue yearValue = (YearValue)theEObject;
        T result = caseYearValue(yearValue);
        if (result == null) result = caseYEARS(yearValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MONTH_VALUE:
      {
        MonthValue monthValue = (MonthValue)theEObject;
        T result = caseMonthValue(monthValue);
        if (result == null) result = caseMONTHS(monthValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.WEEK_VALUE:
      {
        WeekValue weekValue = (WeekValue)theEObject;
        T result = caseWeekValue(weekValue);
        if (result == null) result = caseWEEKS(weekValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DAY_VALUE:
      {
        DayValue dayValue = (DayValue)theEObject;
        T result = caseDayValue(dayValue);
        if (result == null) result = caseDAYS(dayValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.HOUR_VALUE:
      {
        HourValue hourValue = (HourValue)theEObject;
        T result = caseHourValue(hourValue);
        if (result == null) result = caseHOURS(hourValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MINUTE_VALUE:
      {
        MinuteValue minuteValue = (MinuteValue)theEObject;
        T result = caseMinuteValue(minuteValue);
        if (result == null) result = caseMINUTES(minuteValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SECOND_VALUE:
      {
        SecondValue secondValue = (SecondValue)theEObject;
        T result = caseSecondValue(secondValue);
        if (result == null) result = caseSECONDS(secondValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MILLISECOND_VALUE:
      {
        MillisecondValue millisecondValue = (MillisecondValue)theEObject;
        T result = caseMillisecondValue(millisecondValue);
        if (result == null) result = caseMILLISECONDS(millisecondValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DOUBLE_LITERAL:
      {
        DOUBLE_LITERAL doublE_LITERAL = (DOUBLE_LITERAL)theEObject;
        T result = caseDOUBLE_LITERAL(doublE_LITERAL);
        if (result == null) result = caseSignedDoubleValue(doublE_LITERAL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FLOAT_LITERAL:
      {
        FLOAT_LITERAL floaT_LITERAL = (FLOAT_LITERAL)theEObject;
        T result = caseFLOAT_LITERAL(floaT_LITERAL);
        if (result == null) result = caseSignedFloatValue(floaT_LITERAL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.LONG_LITERAL:
      {
        LONG_LITERAL lonG_LITERAL = (LONG_LITERAL)theEObject;
        T result = caseLONG_LITERAL(lonG_LITERAL);
        if (result == null) result = caseSignedLongValue(lonG_LITERAL);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.KEYWORD:
      {
        Keyword keyword = (Keyword)theEObject;
        T result = caseKeyword(keyword);
        if (result == null) result = caseSTREAM(keyword);
        if (result == null) result = caseDEFINE(keyword);
        if (result == null) result = caseFROM(keyword);
        if (result == null) result = caseSELECT(keyword);
        if (result == null) result = caseINSERT(keyword);
        if (result == null) result = caseINTO(keyword);
        if (result == null) result = caseALL(keyword);
        if (result == null) result = caseEVENTS(keyword);
        if (result == null) result = caseTABLE(keyword);
        if (result == null) result = caseWINDOW(keyword);
        if (result == null) result = caseOUTPUT(keyword);
        if (result == null) result = caseRAW(keyword);
        if (result == null) result = caseEXPIRED(keyword);
        if (result == null) result = caseCURRENT(keyword);
        if (result == null) result = caseRETURN(keyword);
        if (result == null) result = casePARTITION(keyword);
        if (result == null) result = caseWITHIN(keyword);
        if (result == null) result = caseLEFT(keyword);
        if (result == null) result = caseRIGHT(keyword);
        if (result == null) result = caseFULL(keyword);
        if (result == null) result = caseJOIN(keyword);
        if (result == null) result = caseOUTER(keyword);
        if (result == null) result = caseINNER(keyword);
        if (result == null) result = caseYEARS(keyword);
        if (result == null) result = caseMONTHS(keyword);
        if (result == null) result = caseWEEKS(keyword);
        if (result == null) result = caseDAYS(keyword);
        if (result == null) result = caseHOURS(keyword);
        if (result == null) result = caseMINUTES(keyword);
        if (result == null) result = caseSECONDS(keyword);
        if (result == null) result = caseMILLISECONDS(keyword);
        if (result == null) result = caseSTRINGS(keyword);
        if (result == null) result = caseINTS(keyword);
        if (result == null) result = caseLONG(keyword);
        if (result == null) result = caseFLOAT(keyword);
        if (result == null) result = caseDOUBLE(keyword);
        if (result == null) result = caseBOOL(keyword);
        if (result == null) result = caseOBJECT(keyword);
        if (result == null) result = caseIS(keyword);
        if (result == null) result = caseNULL(keyword);
        if (result == null) result = caseSNAPSHOT(keyword);
        if (result == null) result = caseLAST(keyword);
        if (result == null) result = caseFIRST(keyword);
        if (result == null) result = caseGROUP(keyword);
        if (result == null) result = caseBY(keyword);
        if (result == null) result = caseHAVING(keyword);
        if (result == null) result = caseWITH(keyword);
        if (result == null) result = caseBEGIN(keyword);
        if (result == null) result = caseEND(keyword);
        if (result == null) result = caseDELETE(keyword);
        if (result == null) result = caseFOR(keyword);
        if (result == null) result = caseTRUE(keyword);
        if (result == null) result = caseFALSE(keyword);
        if (result == null) result = caseUPDATE(keyword);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.AS:
      {
        AS as = (AS)theEObject;
        T result = caseAS(as);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ON:
      {
        ON on = (ON)theEObject;
        T result = caseON(on);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.UNIDIRECTIONAL:
      {
        UNIDIRECTIONAL unidirectional = (UNIDIRECTIONAL)theEObject;
        T result = caseUNIDIRECTIONAL(unidirectional);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.NOT:
      {
        NOT not = (NOT)theEObject;
        T result = caseNOT(not);
        if (result == null) result = caseLogicalAbsentStatefulSource(not);
        if (result == null) result = caseBasicAbsentPatternSource(not);
        if (result == null) result = caseSequenceSource(not);
        if (result == null) result = caseSequenceSourceChain(not);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.EVERY:
      {
        EVERY every = (EVERY)theEObject;
        T result = caseEVERY(every);
        if (result == null) result = caseEveryAbsentPatternSource(every);
        if (result == null) result = caseLeftAbsentPatternSource(every);
        if (result == null) result = caseRightAbsentPatternSource(every);
        if (result == null) result = caseEverySequenceSourceChain(every);
        if (result == null) result = caseEveryAbsentSequenceSourceChain(every);
        if (result == null) result = caseAbsentPatternSourceChain(every);
        if (result == null) result = casePatternStream(every);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.AND:
      {
        AND and = (AND)theEObject;
        T result = caseAND(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.OR:
      {
        OR or = (OR)theEObject;
        T result = caseOR(or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.IN:
      {
        IN in = (IN)theEObject;
        T result = caseIN(in);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.OF:
      {
        OF of = (OF)theEObject;
        T result = caseOF(of);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.E:
      {
        E e = (E)theEObject;
        T result = caseE(e);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.D:
      {
        D d = (D)theEObject;
        T result = caseD(d);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.F:
      {
        F f = (F)theEObject;
        T result = caseF(f);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.L:
      {
        L l = (L)theEObject;
        T result = caseL(l);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.APP:
      {
        APP app = (APP)theEObject;
        T result = caseAPP(app);
        if (result == null) result = caseAppAnnotation(app);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.STREAM:
      {
        STREAM stream = (STREAM)theEObject;
        T result = caseSTREAM(stream);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DEFINE:
      {
        DEFINE define = (DEFINE)theEObject;
        T result = caseDEFINE(define);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.TABLE:
      {
        TABLE table = (TABLE)theEObject;
        T result = caseTABLE(table);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.WINDOW:
      {
        WINDOW window = (WINDOW)theEObject;
        T result = caseWINDOW(window);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.OUTPUT:
      {
        OUTPUT output = (OUTPUT)theEObject;
        T result = caseOUTPUT(output);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.STRINGS:
      {
        STRINGS strings = (STRINGS)theEObject;
        T result = caseSTRINGS(strings);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.INTS:
      {
        INTS ints = (INTS)theEObject;
        T result = caseINTS(ints);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.LONG:
      {
        LONG long_ = (LONG)theEObject;
        T result = caseLONG(long_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DOUBLE:
      {
        DOUBLE double_ = (DOUBLE)theEObject;
        T result = caseDOUBLE(double_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FLOAT:
      {
        FLOAT float_ = (FLOAT)theEObject;
        T result = caseFLOAT(float_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.BOOL:
      {
        BOOL bool = (BOOL)theEObject;
        T result = caseBOOL(bool);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.OBJECT:
      {
        OBJECT object = (OBJECT)theEObject;
        T result = caseOBJECT(object);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.ALL:
      {
        ALL all = (ALL)theEObject;
        T result = caseALL(all);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.EVENTS:
      {
        EVENTS events = (EVENTS)theEObject;
        T result = caseEVENTS(events);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.RAW:
      {
        RAW raw = (RAW)theEObject;
        T result = caseRAW(raw);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.EXPIRED:
      {
        EXPIRED expired = (EXPIRED)theEObject;
        T result = caseEXPIRED(expired);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.CURRENT:
      {
        CURRENT current = (CURRENT)theEObject;
        T result = caseCURRENT(current);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.LAST:
      {
        LAST last = (LAST)theEObject;
        T result = caseLAST(last);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.IS:
      {
        IS is = (IS)theEObject;
        T result = caseIS(is);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.NULL:
      {
        NULL null_ = (NULL)theEObject;
        T result = caseNULL(null_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.TRIGGER:
      {
        TRIGGER trigger = (TRIGGER)theEObject;
        T result = caseTRIGGER(trigger);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.AT:
      {
        AT at = (AT)theEObject;
        T result = caseAT(at);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FUNCTION:
      {
        FUNCTION function = (FUNCTION)theEObject;
        T result = caseFUNCTION(function);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.RETURN:
      {
        RETURN return_ = (RETURN)theEObject;
        T result = caseRETURN(return_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FROM:
      {
        FROM from = (FROM)theEObject;
        T result = caseFROM(from);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.WITHIN:
      {
        WITHIN within = (WITHIN)theEObject;
        T result = caseWITHIN(within);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.LEFT:
      {
        LEFT left = (LEFT)theEObject;
        T result = caseLEFT(left);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.RIGHT:
      {
        RIGHT right = (RIGHT)theEObject;
        T result = caseRIGHT(right);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FULL:
      {
        FULL full = (FULL)theEObject;
        T result = caseFULL(full);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.JOIN:
      {
        JOIN join = (JOIN)theEObject;
        T result = caseJOIN(join);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.INNER:
      {
        INNER inner = (INNER)theEObject;
        T result = caseINNER(inner);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.OUTER:
      {
        OUTER outer = (OUTER)theEObject;
        T result = caseOUTER(outer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SELECT:
      {
        SELECT select = (SELECT)theEObject;
        T result = caseSELECT(select);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.GROUP:
      {
        GROUP group = (GROUP)theEObject;
        T result = caseGROUP(group);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.BY:
      {
        BY by = (BY)theEObject;
        T result = caseBY(by);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.HAVING:
      {
        HAVING having = (HAVING)theEObject;
        T result = caseHAVING(having);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SNAPSHOT:
      {
        SNAPSHOT snapshot = (SNAPSHOT)theEObject;
        T result = caseSNAPSHOT(snapshot);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FIRST:
      {
        FIRST first = (FIRST)theEObject;
        T result = caseFIRST(first);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.INSERT:
      {
        INSERT insert = (INSERT)theEObject;
        T result = caseINSERT(insert);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.INTO:
      {
        INTO into = (INTO)theEObject;
        T result = caseINTO(into);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.BEGIN:
      {
        BEGIN begin = (BEGIN)theEObject;
        T result = caseBEGIN(begin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PLAN:
      {
        PLAN plan = (PLAN)theEObject;
        T result = casePLAN(plan);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DELETE:
      {
        DELETE delete = (DELETE)theEObject;
        T result = caseDELETE(delete);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FOR:
      {
        FOR for_ = (FOR)theEObject;
        T result = caseFOR(for_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.UPDATE:
      {
        UPDATE update = (UPDATE)theEObject;
        T result = caseUPDATE(update);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.END:
      {
        END end = (END)theEObject;
        T result = caseEND(end);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PARTITION:
      {
        PARTITION partition = (PARTITION)theEObject;
        T result = casePARTITION(partition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.WITH:
      {
        WITH with = (WITH)theEObject;
        T result = caseWITH(with);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.AGGREGATION:
      {
        AGGREGATION aggregation = (AGGREGATION)theEObject;
        T result = caseAGGREGATION(aggregation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.AGGREGATE:
      {
        AGGREGATE aggregate = (AGGREGATE)theEObject;
        T result = caseAGGREGATE(aggregate);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SET:
      {
        SET set = (SET)theEObject;
        T result = caseSET(set);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.PER:
      {
        PER per = (PER)theEObject;
        T result = casePER(per);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.YEARS:
      {
        YEARS years = (YEARS)theEObject;
        T result = caseYEARS(years);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MONTHS:
      {
        MONTHS months = (MONTHS)theEObject;
        T result = caseMONTHS(months);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.WEEKS:
      {
        WEEKS weeks = (WEEKS)theEObject;
        T result = caseWEEKS(weeks);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.DAYS:
      {
        DAYS days = (DAYS)theEObject;
        T result = caseDAYS(days);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.HOURS:
      {
        HOURS hours = (HOURS)theEObject;
        T result = caseHOURS(hours);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MINUTES:
      {
        MINUTES minutes = (MINUTES)theEObject;
        T result = caseMINUTES(minutes);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.SECONDS:
      {
        SECONDS seconds = (SECONDS)theEObject;
        T result = caseSECONDS(seconds);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MILLISECONDS:
      {
        MILLISECONDS milliseconds = (MILLISECONDS)theEObject;
        T result = caseMILLISECONDS(milliseconds);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.FALSE:
      {
        FALSE false_ = (FALSE)theEObject;
        T result = caseFALSE(false_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.TRUE:
      {
        TRUE true_ = (TRUE)theEObject;
        T result = caseTRUE(true_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.LEFT_ABSENT_PATTERN_SOURCE1:
      {
        LeftAbsentPatternSource1 leftAbsentPatternSource1 = (LeftAbsentPatternSource1)theEObject;
        T result = caseLeftAbsentPatternSource1(leftAbsentPatternSource1);
        if (result == null) result = caseLeftAbsentPatternSource(leftAbsentPatternSource1);
        if (result == null) result = caseAbsentPatternSourceChain(leftAbsentPatternSource1);
        if (result == null) result = casePatternStream(leftAbsentPatternSource1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.RIGHT_ABSENT_PATTERN_SOURCE1:
      {
        RightAbsentPatternSource1 rightAbsentPatternSource1 = (RightAbsentPatternSource1)theEObject;
        T result = caseRightAbsentPatternSource1(rightAbsentPatternSource1);
        if (result == null) result = caseRightAbsentPatternSource(rightAbsentPatternSource1);
        if (result == null) result = caseAbsentPatternSourceChain(rightAbsentPatternSource1);
        if (result == null) result = casePatternStream(rightAbsentPatternSource1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.LEFT_ABSENT_SEQUENCE_SOURCE1:
      {
        LeftAbsentSequenceSource1 leftAbsentSequenceSource1 = (LeftAbsentSequenceSource1)theEObject;
        T result = caseLeftAbsentSequenceSource1(leftAbsentSequenceSource1);
        if (result == null) result = caseLeftAbsentSequenceSource(leftAbsentSequenceSource1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.RIGHT_ABSENT_SEQUENCE_SOURCE1:
      {
        RightAbsentSequenceSource1 rightAbsentSequenceSource1 = (RightAbsentSequenceSource1)theEObject;
        T result = caseRightAbsentSequenceSource1(rightAbsentSequenceSource1);
        if (result == null) result = caseRightAbsentSequenceSource(rightAbsentSequenceSource1);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MATH_LOGICAL_OPERATION:
      {
        MathLogicalOperation mathLogicalOperation = (MathLogicalOperation)theEObject;
        T result = caseMathLogicalOperation(mathLogicalOperation);
        if (result == null) result = caseMathOperation(mathLogicalOperation);
        if (result == null) result = caseExpression(mathLogicalOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MATH_IN_OPERATION:
      {
        MathInOperation mathInOperation = (MathInOperation)theEObject;
        T result = caseMathInOperation(mathInOperation);
        if (result == null) result = caseMathOperation(mathInOperation);
        if (result == null) result = caseExpression(mathInOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MATH_GT_LT_OPERATION:
      {
        MathGtLtOperation mathGtLtOperation = (MathGtLtOperation)theEObject;
        T result = caseMathGtLtOperation(mathGtLtOperation);
        if (result == null) result = caseMathOperation(mathGtLtOperation);
        if (result == null) result = caseExpression(mathGtLtOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MATH_EQUAL_OPERATION:
      {
        MathEqualOperation mathEqualOperation = (MathEqualOperation)theEObject;
        T result = caseMathEqualOperation(mathEqualOperation);
        if (result == null) result = caseMathOperation(mathEqualOperation);
        if (result == null) result = caseExpression(mathEqualOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MATH_ADDSUB_OPERATION:
      {
        MathAddsubOperation mathAddsubOperation = (MathAddsubOperation)theEObject;
        T result = caseMathAddsubOperation(mathAddsubOperation);
        if (result == null) result = caseMathOperation(mathAddsubOperation);
        if (result == null) result = caseExpression(mathAddsubOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.MATH_DIVMUL_OPERATION:
      {
        MathDivmulOperation mathDivmulOperation = (MathDivmulOperation)theEObject;
        T result = caseMathDivmulOperation(mathDivmulOperation);
        if (result == null) result = caseMathOperation(mathDivmulOperation);
        if (result == null) result = caseExpression(mathDivmulOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SiddhiPackage.NOT_OPERATION:
      {
        NotOperation notOperation = (NotOperation)theEObject;
        T result = caseNotOperation(notOperation);
        if (result == null) result = caseMathOperation(notOperation);
        if (result == null) result = caseExpression(notOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>QL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>QL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSiddhiQL(SiddhiQL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Execution Plan</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Execution Plan</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecutionPlan(ExecutionPlan object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Execution Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Execution Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecutionElement(ExecutionElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Definition Stream</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Definition Stream</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefinitionStream(DefinitionStream object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Definition Table</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Definition Table</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefinitionTable(DefinitionTable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Definition Window</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Definition Window</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefinitionWindow(DefinitionWindow object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Definition Trigger</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Definition Trigger</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefinitionTrigger(DefinitionTrigger object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Definition Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Definition Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefinitionFunction(DefinitionFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Definition Aggregation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Definition Aggregation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefinitionAggregation(DefinitionAggregation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aggregation Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aggregation Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAggregationTime(AggregationTime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>aggregation time interval</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>aggregation time interval</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseaggregation_time_interval(aggregation_time_interval object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aggregation Time Duration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aggregation Time Duration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAggregationTimeDuration(AggregationTimeDuration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aggregation Time Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aggregation Time Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAggregationTimeRange(AggregationTimeRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionName(FunctionName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Language Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Language Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLanguageName(LanguageName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionBody(FunctionBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Trigger Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Trigger Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTriggerName(TriggerName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>App Annotation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>App Annotation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAppAnnotation(AppAnnotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotation(Annotation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Annotation Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Annotation Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnnotationElement(AnnotationElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyValue(PropertyValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyName(PropertyName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Separator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Separator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertySeparator(PropertySeparator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Features</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Features</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeatures(Features object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeType(AttributeType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exec Partition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exec Partition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExecPartition(ExecPartition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Partition With Stream</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Partition With Stream</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePartitionWithStream(PartitionWithStream object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition Ranges</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition Ranges</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionRanges(ConditionRanges object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Condition Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Condition Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConditionRange(ConditionRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuery(Query object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQueryInput(QueryInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Join Stream</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Join Stream</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJoinStream(JoinStream object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Within Time Range</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Within Time Range</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWithinTimeRange(WithinTimeRange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Per1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Per1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePer1(Per1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Join Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Join Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJoinSource(JoinSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stream Alias</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stream Alias</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStreamAlias(StreamAlias object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>joins</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>joins</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casejoins(joins object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Standard Stream</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Standard Stream</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStandardStream(StandardStream object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Main Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Main Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMainSource(MainSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Stream</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Stream</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternStream(PatternStream object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Every Pattern Source Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Every Pattern Source Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEveryPatternSourceChain(EveryPatternSourceChain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Source Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Source Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternSourceChain(PatternSourceChain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternSource(PatternSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Stateful Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Stateful Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalStatefulSource(LogicalStatefulSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pattern Collection Stateful Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pattern Collection Stateful Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePatternCollectionStatefulSource(PatternCollectionStatefulSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Collect</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Collect</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCollect(Collect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Within Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Within Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWithinTime(WithinTime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Absent Stateful Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Absent Stateful Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalAbsentStatefulSource(LogicalAbsentStatefulSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Absent Pattern Source Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Absent Pattern Source Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbsentPatternSourceChain(AbsentPatternSourceChain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Every Absent Pattern Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Every Absent Pattern Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEveryAbsentPatternSource(EveryAbsentPatternSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Absent Pattern Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Absent Pattern Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicAbsentPatternSource(BasicAbsentPatternSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForTime(ForTime object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Left Absent Pattern Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Left Absent Pattern Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLeftAbsentPatternSource(LeftAbsentPatternSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Right Absent Pattern Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Right Absent Pattern Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRightAbsentPatternSource(RightAbsentPatternSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Stream</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Stream</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceStream(SequenceStream object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Every Sequence Source Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Every Sequence Source Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEverySequenceSourceChain(EverySequenceSourceChain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Every Absent Sequence Source Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Every Absent Sequence Source Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEveryAbsentSequenceSourceChain(EveryAbsentSequenceSourceChain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Absent Sequence Source Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Absent Sequence Source Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbsentSequenceSourceChain(AbsentSequenceSourceChain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Left Absent Sequence Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Left Absent Sequence Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLeftAbsentSequenceSource(LeftAbsentSequenceSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Right Absent Sequence Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Right Absent Sequence Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRightAbsentSequenceSource(RightAbsentSequenceSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Source Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Source Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceSourceChain(SequenceSourceChain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceSource(SequenceSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Collection Stateful Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Collection Stateful Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceCollectionStatefulSource(SequenceCollectionStatefulSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Anonymous Stream</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Anonymous Stream</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnonymousStream(AnonymousStream object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Rate</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Rate</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputRate(OutputRate object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Rate Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Rate Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputRateType(OutputRateType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query Output</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query Output</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQueryOutput(QueryOutput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Clause</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Clause</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetClause(SetClause object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Set Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Set Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSetAssignment(SetAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Event Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Event Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputEventType(OutputEventType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Source Stream Handlers</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Source Stream Handlers</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicSourceStreamHandlers(BasicSourceStreamHandlers object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Source Stream Handlers1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Source Stream Handlers1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicSourceStreamHandlers1(BasicSourceStreamHandlers1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Source Stream Handler</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Source Stream Handler</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicSourceStreamHandler(BasicSourceStreamHandler object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Filter</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Filter</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFilter(Filter object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stream Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stream Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStreamFunction(StreamFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Win</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Win</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWin(Win object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionOperation(FunctionOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Namespace</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Namespace</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionNamespace(FunctionNamespace object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Id</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Id</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionId(FunctionId object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeList(AttributeList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttribute(Attribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Group By Query Selection</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Group By Query Selection</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGroupByQuerySelection(GroupByQuerySelection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Query Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Query Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQuerySection(QuerySection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Attribute</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Attribute</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputAttribute(OutputAttribute object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Out Attr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Out Attr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutAttr(OutAttr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Group By</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Group By</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGroupBy(GroupBy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Having Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Having Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHavingExpr(HavingExpr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathOperation(MathOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Null Check</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Null Check</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNullCheck(NullCheck object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Stream Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Stream Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStreamReference(StreamReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Other Operations1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Other Operations1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathOtherOperations1(MathOtherOperations1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeReference(AttributeReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Name Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Name Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeNameReference(AttributeNameReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Attribute Index</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Attribute Index</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAttributeIndex(AttributeIndex object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Standard Stateful Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Standard Stateful Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStandardStatefulSource(StandardStatefulSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Source1 Or Standard Stateful Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Source1 Or Standard Stateful Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSource1OrStandardStatefulSource(Source1OrStandardStatefulSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Source Or Event Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Source Or Event Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSourceOrEventReference(SourceOrEventReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Basic Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Basic Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBasicSource(BasicSource object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Features Or Out Attr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Features Or Out Attr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeaturesOrOutAttr(FeaturesOrOutAttr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Features Or Out Attr Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Features Or Out Attr Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeaturesOrOutAttrReference(FeaturesOrOutAttrReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstantValue(ConstantValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseName(Name object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Source</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Source</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSource(Source object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Source1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Source1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSource1(Source1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolValue(BoolValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signed Double Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signed Double Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignedDoubleValue(SignedDoubleValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signed Float Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signed Float Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignedFloatValue(SignedFloatValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Signed Long Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Signed Long Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignedLongValue(SignedLongValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringValue(StringValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Time Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Time Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimeValue(TimeValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Year Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Year Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseYearValue(YearValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Month Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Month Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMonthValue(MonthValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Week Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Week Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWeekValue(WeekValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Day Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Day Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDayValue(DayValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hour Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hour Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHourValue(HourValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Minute Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Minute Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMinuteValue(MinuteValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Second Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Second Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSecondValue(SecondValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Millisecond Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Millisecond Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMillisecondValue(MillisecondValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DOUBLE LITERAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DOUBLE LITERAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDOUBLE_LITERAL(DOUBLE_LITERAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FLOAT LITERAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FLOAT LITERAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFLOAT_LITERAL(FLOAT_LITERAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LONG LITERAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LONG LITERAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLONG_LITERAL(LONG_LITERAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Keyword</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Keyword</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseKeyword(Keyword object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAS(AS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ON</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ON</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseON(ON object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UNIDIRECTIONAL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UNIDIRECTIONAL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUNIDIRECTIONAL(UNIDIRECTIONAL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NOT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NOT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNOT(NOT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EVERY</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EVERY</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEVERY(EVERY object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AND</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AND</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAND(AND object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>OR</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>OR</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOR(OR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IN</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IN</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIN(IN object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>OF</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>OF</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOF(OF object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>E</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>E</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseE(E object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>D</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>D</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseD(D object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>F</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>F</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseF(F object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>L</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>L</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseL(L object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>APP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>APP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAPP(APP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>STREAM</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>STREAM</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTREAM(STREAM object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DEFINE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DEFINE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDEFINE(DEFINE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>TABLE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>TABLE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTABLE(TABLE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>WINDOW</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>WINDOW</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWINDOW(WINDOW object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>OUTPUT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>OUTPUT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOUTPUT(OUTPUT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>STRINGS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>STRINGS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSTRINGS(STRINGS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>INTS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>INTS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseINTS(INTS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LONG</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LONG</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLONG(LONG object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DOUBLE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DOUBLE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDOUBLE(DOUBLE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FLOAT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FLOAT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFLOAT(FLOAT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BOOL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BOOL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBOOL(BOOL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>OBJECT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>OBJECT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOBJECT(OBJECT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>ALL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>ALL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseALL(ALL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EVENTS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EVENTS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEVENTS(EVENTS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RAW</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RAW</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRAW(RAW object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EXPIRED</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EXPIRED</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEXPIRED(EXPIRED object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>CURRENT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>CURRENT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCURRENT(CURRENT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LAST</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LAST</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLAST(LAST object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>IS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>IS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIS(IS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>NULL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>NULL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNULL(NULL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>TRIGGER</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>TRIGGER</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTRIGGER(TRIGGER object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAT(AT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FUNCTION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FUNCTION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFUNCTION(FUNCTION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RETURN</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RETURN</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRETURN(RETURN object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FROM</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FROM</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFROM(FROM object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>WITHIN</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>WITHIN</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWITHIN(WITHIN object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LEFT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LEFT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLEFT(LEFT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>RIGHT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>RIGHT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRIGHT(RIGHT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FULL</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FULL</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFULL(FULL object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>JOIN</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>JOIN</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseJOIN(JOIN object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>INNER</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>INNER</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseINNER(INNER object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>OUTER</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>OUTER</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOUTER(OUTER object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SELECT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SELECT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSELECT(SELECT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>GROUP</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>GROUP</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGROUP(GROUP object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BY</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BY</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBY(BY object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>HAVING</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>HAVING</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHAVING(HAVING object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SNAPSHOT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SNAPSHOT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSNAPSHOT(SNAPSHOT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FIRST</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FIRST</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFIRST(FIRST object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>INSERT</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>INSERT</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseINSERT(INSERT object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>INTO</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>INTO</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseINTO(INTO object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>BEGIN</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>BEGIN</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBEGIN(BEGIN object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PLAN</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PLAN</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePLAN(PLAN object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DELETE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DELETE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDELETE(DELETE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FOR</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FOR</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFOR(FOR object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>UPDATE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>UPDATE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseUPDATE(UPDATE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>END</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>END</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEND(END object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PARTITION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PARTITION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePARTITION(PARTITION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>WITH</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>WITH</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWITH(WITH object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AGGREGATION</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AGGREGATION</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAGGREGATION(AGGREGATION object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>AGGREGATE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>AGGREGATE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAGGREGATE(AGGREGATE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SET</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SET</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSET(SET object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>PER</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>PER</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePER(PER object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>YEARS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>YEARS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseYEARS(YEARS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MONTHS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MONTHS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMONTHS(MONTHS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>WEEKS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>WEEKS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWEEKS(WEEKS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>DAYS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>DAYS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDAYS(DAYS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>HOURS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>HOURS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHOURS(HOURS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MINUTES</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MINUTES</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMINUTES(MINUTES object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>SECONDS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>SECONDS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSECONDS(SECONDS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>MILLISECONDS</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>MILLISECONDS</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMILLISECONDS(MILLISECONDS object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>FALSE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>FALSE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFALSE(FALSE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>TRUE</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>TRUE</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTRUE(TRUE object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Left Absent Pattern Source1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Left Absent Pattern Source1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLeftAbsentPatternSource1(LeftAbsentPatternSource1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Right Absent Pattern Source1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Right Absent Pattern Source1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRightAbsentPatternSource1(RightAbsentPatternSource1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Left Absent Sequence Source1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Left Absent Sequence Source1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLeftAbsentSequenceSource1(LeftAbsentSequenceSource1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Right Absent Sequence Source1</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Right Absent Sequence Source1</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRightAbsentSequenceSource1(RightAbsentSequenceSource1 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Logical Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Logical Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathLogicalOperation(MathLogicalOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math In Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math In Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathInOperation(MathInOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Gt Lt Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Gt Lt Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathGtLtOperation(MathGtLtOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Equal Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Equal Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathEqualOperation(MathEqualOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Addsub Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Addsub Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathAddsubOperation(MathAddsubOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Math Divmul Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Math Divmul Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMathDivmulOperation(MathDivmulOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotOperation(NotOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SiddhiSwitch
