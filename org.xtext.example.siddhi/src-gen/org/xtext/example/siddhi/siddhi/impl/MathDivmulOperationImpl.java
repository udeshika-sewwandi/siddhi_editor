/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.siddhi.siddhi.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.siddhi.siddhi.MathDivmulOperation;
import org.xtext.example.siddhi.siddhi.MathOperation;
import org.xtext.example.siddhi.siddhi.SiddhiPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Math Divmul Operation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.MathDivmulOperationImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.MathDivmulOperationImpl#getMultiply <em>Multiply</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.MathDivmulOperationImpl#getDevide <em>Devide</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.MathDivmulOperationImpl#getMod <em>Mod</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.MathDivmulOperationImpl#getRight <em>Right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MathDivmulOperationImpl extends MathOperationImpl implements MathDivmulOperation
{
  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected MathOperation left;

  /**
   * The default value of the '{@link #getMultiply() <em>Multiply</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiply()
   * @generated
   * @ordered
   */
  protected static final String MULTIPLY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMultiply() <em>Multiply</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiply()
   * @generated
   * @ordered
   */
  protected String multiply = MULTIPLY_EDEFAULT;

  /**
   * The default value of the '{@link #getDevide() <em>Devide</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDevide()
   * @generated
   * @ordered
   */
  protected static final String DEVIDE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDevide() <em>Devide</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDevide()
   * @generated
   * @ordered
   */
  protected String devide = DEVIDE_EDEFAULT;

  /**
   * The default value of the '{@link #getMod() <em>Mod</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMod()
   * @generated
   * @ordered
   */
  protected static final String MOD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMod() <em>Mod</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMod()
   * @generated
   * @ordered
   */
  protected String mod = MOD_EDEFAULT;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected MathOperation right;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MathDivmulOperationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SiddhiPackage.eINSTANCE.getMathDivmulOperation();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MathOperation getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(MathOperation newLeft, NotificationChain msgs)
  {
    MathOperation oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SiddhiPackage.MATH_DIVMUL_OPERATION__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft(MathOperation newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.MATH_DIVMUL_OPERATION__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.MATH_DIVMUL_OPERATION__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.MATH_DIVMUL_OPERATION__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMultiply()
  {
    return multiply;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMultiply(String newMultiply)
  {
    String oldMultiply = multiply;
    multiply = newMultiply;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.MATH_DIVMUL_OPERATION__MULTIPLY, oldMultiply, multiply));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDevide()
  {
    return devide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDevide(String newDevide)
  {
    String oldDevide = devide;
    devide = newDevide;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.MATH_DIVMUL_OPERATION__DEVIDE, oldDevide, devide));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMod()
  {
    return mod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMod(String newMod)
  {
    String oldMod = mod;
    mod = newMod;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.MATH_DIVMUL_OPERATION__MOD, oldMod, mod));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MathOperation getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight(MathOperation newRight, NotificationChain msgs)
  {
    MathOperation oldRight = right;
    right = newRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SiddhiPackage.MATH_DIVMUL_OPERATION__RIGHT, oldRight, newRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRight(MathOperation newRight)
  {
    if (newRight != right)
    {
      NotificationChain msgs = null;
      if (right != null)
        msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.MATH_DIVMUL_OPERATION__RIGHT, null, msgs);
      if (newRight != null)
        msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.MATH_DIVMUL_OPERATION__RIGHT, null, msgs);
      msgs = basicSetRight(newRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.MATH_DIVMUL_OPERATION__RIGHT, newRight, newRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SiddhiPackage.MATH_DIVMUL_OPERATION__LEFT:
        return basicSetLeft(null, msgs);
      case SiddhiPackage.MATH_DIVMUL_OPERATION__RIGHT:
        return basicSetRight(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SiddhiPackage.MATH_DIVMUL_OPERATION__LEFT:
        return getLeft();
      case SiddhiPackage.MATH_DIVMUL_OPERATION__MULTIPLY:
        return getMultiply();
      case SiddhiPackage.MATH_DIVMUL_OPERATION__DEVIDE:
        return getDevide();
      case SiddhiPackage.MATH_DIVMUL_OPERATION__MOD:
        return getMod();
      case SiddhiPackage.MATH_DIVMUL_OPERATION__RIGHT:
        return getRight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SiddhiPackage.MATH_DIVMUL_OPERATION__LEFT:
        setLeft((MathOperation)newValue);
        return;
      case SiddhiPackage.MATH_DIVMUL_OPERATION__MULTIPLY:
        setMultiply((String)newValue);
        return;
      case SiddhiPackage.MATH_DIVMUL_OPERATION__DEVIDE:
        setDevide((String)newValue);
        return;
      case SiddhiPackage.MATH_DIVMUL_OPERATION__MOD:
        setMod((String)newValue);
        return;
      case SiddhiPackage.MATH_DIVMUL_OPERATION__RIGHT:
        setRight((MathOperation)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SiddhiPackage.MATH_DIVMUL_OPERATION__LEFT:
        setLeft((MathOperation)null);
        return;
      case SiddhiPackage.MATH_DIVMUL_OPERATION__MULTIPLY:
        setMultiply(MULTIPLY_EDEFAULT);
        return;
      case SiddhiPackage.MATH_DIVMUL_OPERATION__DEVIDE:
        setDevide(DEVIDE_EDEFAULT);
        return;
      case SiddhiPackage.MATH_DIVMUL_OPERATION__MOD:
        setMod(MOD_EDEFAULT);
        return;
      case SiddhiPackage.MATH_DIVMUL_OPERATION__RIGHT:
        setRight((MathOperation)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SiddhiPackage.MATH_DIVMUL_OPERATION__LEFT:
        return left != null;
      case SiddhiPackage.MATH_DIVMUL_OPERATION__MULTIPLY:
        return MULTIPLY_EDEFAULT == null ? multiply != null : !MULTIPLY_EDEFAULT.equals(multiply);
      case SiddhiPackage.MATH_DIVMUL_OPERATION__DEVIDE:
        return DEVIDE_EDEFAULT == null ? devide != null : !DEVIDE_EDEFAULT.equals(devide);
      case SiddhiPackage.MATH_DIVMUL_OPERATION__MOD:
        return MOD_EDEFAULT == null ? mod != null : !MOD_EDEFAULT.equals(mod);
      case SiddhiPackage.MATH_DIVMUL_OPERATION__RIGHT:
        return right != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (multiply: ");
    result.append(multiply);
    result.append(", devide: ");
    result.append(devide);
    result.append(", mod: ");
    result.append(mod);
    result.append(')');
    return result.toString();
  }

} //MathDivmulOperationImpl
