/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.siddhi.siddhi.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.siddhi.siddhi.AttributeReference;
import org.xtext.example.siddhi.siddhi.BY;
import org.xtext.example.siddhi.siddhi.GroupBy;
import org.xtext.example.siddhi.siddhi.SiddhiPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Group By</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.GroupByImpl#getBy <em>By</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.GroupByImpl#getAttr_ref <em>Attr ref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GroupByImpl extends GROUPImpl implements GroupBy
{
  /**
   * The default value of the '{@link #getBy() <em>By</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBy()
   * @generated
   * @ordered
   */
  protected static final String BY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBy() <em>By</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBy()
   * @generated
   * @ordered
   */
  protected String by = BY_EDEFAULT;

  /**
   * The cached value of the '{@link #getAttr_ref() <em>Attr ref</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttr_ref()
   * @generated
   * @ordered
   */
  protected EList<AttributeReference> attr_ref;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GroupByImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SiddhiPackage.eINSTANCE.getGroupBy();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getBy()
  {
    return by;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBy(String newBy)
  {
    String oldBy = by;
    by = newBy;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.GROUP_BY__BY, oldBy, by));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AttributeReference> getAttr_ref()
  {
    if (attr_ref == null)
    {
      attr_ref = new EObjectContainmentEList<AttributeReference>(AttributeReference.class, this, SiddhiPackage.GROUP_BY__ATTR_REF);
    }
    return attr_ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SiddhiPackage.GROUP_BY__ATTR_REF:
        return ((InternalEList<?>)getAttr_ref()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SiddhiPackage.GROUP_BY__BY:
        return getBy();
      case SiddhiPackage.GROUP_BY__ATTR_REF:
        return getAttr_ref();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SiddhiPackage.GROUP_BY__BY:
        setBy((String)newValue);
        return;
      case SiddhiPackage.GROUP_BY__ATTR_REF:
        getAttr_ref().clear();
        getAttr_ref().addAll((Collection<? extends AttributeReference>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SiddhiPackage.GROUP_BY__BY:
        setBy(BY_EDEFAULT);
        return;
      case SiddhiPackage.GROUP_BY__ATTR_REF:
        getAttr_ref().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SiddhiPackage.GROUP_BY__BY:
        return BY_EDEFAULT == null ? by != null : !BY_EDEFAULT.equals(by);
      case SiddhiPackage.GROUP_BY__ATTR_REF:
        return attr_ref != null && !attr_ref.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eBaseStructuralFeatureID(int derivedFeatureID, Class<?> baseClass)
  {
    if (baseClass == BY.class)
    {
      switch (derivedFeatureID)
      {
        case SiddhiPackage.GROUP_BY__BY: return SiddhiPackage.BY__BY;
        default: return -1;
      }
    }
    return super.eBaseStructuralFeatureID(derivedFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int eDerivedStructuralFeatureID(int baseFeatureID, Class<?> baseClass)
  {
    if (baseClass == BY.class)
    {
      switch (baseFeatureID)
      {
        case SiddhiPackage.BY__BY: return SiddhiPackage.GROUP_BY__BY;
        default: return -1;
      }
    }
    return super.eDerivedStructuralFeatureID(baseFeatureID, baseClass);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (by: ");
    result.append(by);
    result.append(')');
    return result.toString();
  }

} //GroupByImpl
