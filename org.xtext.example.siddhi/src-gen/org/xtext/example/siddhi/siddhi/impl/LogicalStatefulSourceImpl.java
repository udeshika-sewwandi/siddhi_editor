/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.siddhi.siddhi.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.siddhi.siddhi.AND;
import org.xtext.example.siddhi.siddhi.LogicalStatefulSource;
import org.xtext.example.siddhi.siddhi.OR;
import org.xtext.example.siddhi.siddhi.SiddhiPackage;
import org.xtext.example.siddhi.siddhi.StandardStatefulSource;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Logical Stateful Source</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.LogicalStatefulSourceImpl#getStdSource <em>Std Source</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.LogicalStatefulSourceImpl#getAnd <em>And</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.LogicalStatefulSourceImpl#getOr <em>Or</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LogicalStatefulSourceImpl extends SequenceSourceImpl implements LogicalStatefulSource
{
  /**
   * The cached value of the '{@link #getStdSource() <em>Std Source</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStdSource()
   * @generated
   * @ordered
   */
  protected EList<StandardStatefulSource> stdSource;

  /**
   * The cached value of the '{@link #getAnd() <em>And</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnd()
   * @generated
   * @ordered
   */
  protected AND and;

  /**
   * The cached value of the '{@link #getOr() <em>Or</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOr()
   * @generated
   * @ordered
   */
  protected OR or;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LogicalStatefulSourceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SiddhiPackage.eINSTANCE.getLogicalStatefulSource();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<StandardStatefulSource> getStdSource()
  {
    if (stdSource == null)
    {
      stdSource = new EObjectContainmentEList<StandardStatefulSource>(StandardStatefulSource.class, this, SiddhiPackage.LOGICAL_STATEFUL_SOURCE__STD_SOURCE);
    }
    return stdSource;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AND getAnd()
  {
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAnd(AND newAnd, NotificationChain msgs)
  {
    AND oldAnd = and;
    and = newAnd;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SiddhiPackage.LOGICAL_STATEFUL_SOURCE__AND, oldAnd, newAnd);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAnd(AND newAnd)
  {
    if (newAnd != and)
    {
      NotificationChain msgs = null;
      if (and != null)
        msgs = ((InternalEObject)and).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.LOGICAL_STATEFUL_SOURCE__AND, null, msgs);
      if (newAnd != null)
        msgs = ((InternalEObject)newAnd).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.LOGICAL_STATEFUL_SOURCE__AND, null, msgs);
      msgs = basicSetAnd(newAnd, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.LOGICAL_STATEFUL_SOURCE__AND, newAnd, newAnd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OR getOr()
  {
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOr(OR newOr, NotificationChain msgs)
  {
    OR oldOr = or;
    or = newOr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SiddhiPackage.LOGICAL_STATEFUL_SOURCE__OR, oldOr, newOr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOr(OR newOr)
  {
    if (newOr != or)
    {
      NotificationChain msgs = null;
      if (or != null)
        msgs = ((InternalEObject)or).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.LOGICAL_STATEFUL_SOURCE__OR, null, msgs);
      if (newOr != null)
        msgs = ((InternalEObject)newOr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.LOGICAL_STATEFUL_SOURCE__OR, null, msgs);
      msgs = basicSetOr(newOr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.LOGICAL_STATEFUL_SOURCE__OR, newOr, newOr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__STD_SOURCE:
        return ((InternalEList<?>)getStdSource()).basicRemove(otherEnd, msgs);
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__AND:
        return basicSetAnd(null, msgs);
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__OR:
        return basicSetOr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__STD_SOURCE:
        return getStdSource();
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__AND:
        return getAnd();
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__OR:
        return getOr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__STD_SOURCE:
        getStdSource().clear();
        getStdSource().addAll((Collection<? extends StandardStatefulSource>)newValue);
        return;
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__AND:
        setAnd((AND)newValue);
        return;
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__OR:
        setOr((OR)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__STD_SOURCE:
        getStdSource().clear();
        return;
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__AND:
        setAnd((AND)null);
        return;
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__OR:
        setOr((OR)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__STD_SOURCE:
        return stdSource != null && !stdSource.isEmpty();
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__AND:
        return and != null;
      case SiddhiPackage.LOGICAL_STATEFUL_SOURCE__OR:
        return or != null;
    }
    return super.eIsSet(featureID);
  }

} //LogicalStatefulSourceImpl
