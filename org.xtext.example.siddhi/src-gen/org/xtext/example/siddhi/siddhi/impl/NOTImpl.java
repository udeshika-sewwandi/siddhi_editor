/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.siddhi.siddhi.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.example.siddhi.siddhi.BasicSource;
import org.xtext.example.siddhi.siddhi.ForTime;
import org.xtext.example.siddhi.siddhi.NOT;
import org.xtext.example.siddhi.siddhi.SiddhiPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>NOT</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.NOTImpl#getBasicSrc <em>Basic Src</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.NOTImpl#getFt <em>Ft</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.NOTImpl#getNot1 <em>Not1</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NOTImpl extends LogicalAbsentStatefulSourceImpl implements NOT
{
  /**
   * The cached value of the '{@link #getBasicSrc() <em>Basic Src</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBasicSrc()
   * @generated
   * @ordered
   */
  protected BasicSource basicSrc;

  /**
   * The cached value of the '{@link #getFt() <em>Ft</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFt()
   * @generated
   * @ordered
   */
  protected ForTime ft;

  /**
   * The default value of the '{@link #getNot1() <em>Not1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNot1()
   * @generated
   * @ordered
   */
  protected static final String NOT1_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNot1() <em>Not1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNot1()
   * @generated
   * @ordered
   */
  protected String not1 = NOT1_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NOTImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SiddhiPackage.eINSTANCE.getNOT();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BasicSource getBasicSrc()
  {
    return basicSrc;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBasicSrc(BasicSource newBasicSrc, NotificationChain msgs)
  {
    BasicSource oldBasicSrc = basicSrc;
    basicSrc = newBasicSrc;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SiddhiPackage.NOT__BASIC_SRC, oldBasicSrc, newBasicSrc);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBasicSrc(BasicSource newBasicSrc)
  {
    if (newBasicSrc != basicSrc)
    {
      NotificationChain msgs = null;
      if (basicSrc != null)
        msgs = ((InternalEObject)basicSrc).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.NOT__BASIC_SRC, null, msgs);
      if (newBasicSrc != null)
        msgs = ((InternalEObject)newBasicSrc).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.NOT__BASIC_SRC, null, msgs);
      msgs = basicSetBasicSrc(newBasicSrc, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.NOT__BASIC_SRC, newBasicSrc, newBasicSrc));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ForTime getFt()
  {
    return ft;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFt(ForTime newFt, NotificationChain msgs)
  {
    ForTime oldFt = ft;
    ft = newFt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SiddhiPackage.NOT__FT, oldFt, newFt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFt(ForTime newFt)
  {
    if (newFt != ft)
    {
      NotificationChain msgs = null;
      if (ft != null)
        msgs = ((InternalEObject)ft).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.NOT__FT, null, msgs);
      if (newFt != null)
        msgs = ((InternalEObject)newFt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.NOT__FT, null, msgs);
      msgs = basicSetFt(newFt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.NOT__FT, newFt, newFt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getNot1()
  {
    return not1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNot1(String newNot1)
  {
    String oldNot1 = not1;
    not1 = newNot1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.NOT__NOT1, oldNot1, not1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SiddhiPackage.NOT__BASIC_SRC:
        return basicSetBasicSrc(null, msgs);
      case SiddhiPackage.NOT__FT:
        return basicSetFt(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SiddhiPackage.NOT__BASIC_SRC:
        return getBasicSrc();
      case SiddhiPackage.NOT__FT:
        return getFt();
      case SiddhiPackage.NOT__NOT1:
        return getNot1();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SiddhiPackage.NOT__BASIC_SRC:
        setBasicSrc((BasicSource)newValue);
        return;
      case SiddhiPackage.NOT__FT:
        setFt((ForTime)newValue);
        return;
      case SiddhiPackage.NOT__NOT1:
        setNot1((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SiddhiPackage.NOT__BASIC_SRC:
        setBasicSrc((BasicSource)null);
        return;
      case SiddhiPackage.NOT__FT:
        setFt((ForTime)null);
        return;
      case SiddhiPackage.NOT__NOT1:
        setNot1(NOT1_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SiddhiPackage.NOT__BASIC_SRC:
        return basicSrc != null;
      case SiddhiPackage.NOT__FT:
        return ft != null;
      case SiddhiPackage.NOT__NOT1:
        return NOT1_EDEFAULT == null ? not1 != null : !NOT1_EDEFAULT.equals(not1);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (not1: ");
    result.append(not1);
    result.append(')');
    return result.toString();
  }

} //NOTImpl
