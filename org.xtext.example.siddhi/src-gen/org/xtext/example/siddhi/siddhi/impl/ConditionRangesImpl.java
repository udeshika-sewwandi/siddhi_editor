/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.siddhi.siddhi.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.example.siddhi.siddhi.ConditionRange;
import org.xtext.example.siddhi.siddhi.ConditionRanges;
import org.xtext.example.siddhi.siddhi.OF;
import org.xtext.example.siddhi.siddhi.OR;
import org.xtext.example.siddhi.siddhi.SiddhiPackage;
import org.xtext.example.siddhi.siddhi.Source;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition Ranges</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.ConditionRangesImpl#getOf <em>Of</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.ConditionRangesImpl#getStr_id2 <em>Str id2</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.ConditionRangesImpl#getConRange <em>Con Range</em>}</li>
 *   <li>{@link org.xtext.example.siddhi.siddhi.impl.ConditionRangesImpl#getOr <em>Or</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionRangesImpl extends PartitionWithStreamImpl implements ConditionRanges
{
  /**
   * The cached value of the '{@link #getOf() <em>Of</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOf()
   * @generated
   * @ordered
   */
  protected OF of;

  /**
   * The cached value of the '{@link #getStr_id2() <em>Str id2</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStr_id2()
   * @generated
   * @ordered
   */
  protected Source str_id2;

  /**
   * The cached value of the '{@link #getConRange() <em>Con Range</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConRange()
   * @generated
   * @ordered
   */
  protected EList<ConditionRange> conRange;

  /**
   * The cached value of the '{@link #getOr() <em>Or</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOr()
   * @generated
   * @ordered
   */
  protected EList<OR> or;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionRangesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SiddhiPackage.eINSTANCE.getConditionRanges();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OF getOf()
  {
    return of;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOf(OF newOf, NotificationChain msgs)
  {
    OF oldOf = of;
    of = newOf;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SiddhiPackage.CONDITION_RANGES__OF, oldOf, newOf);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOf(OF newOf)
  {
    if (newOf != of)
    {
      NotificationChain msgs = null;
      if (of != null)
        msgs = ((InternalEObject)of).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.CONDITION_RANGES__OF, null, msgs);
      if (newOf != null)
        msgs = ((InternalEObject)newOf).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.CONDITION_RANGES__OF, null, msgs);
      msgs = basicSetOf(newOf, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.CONDITION_RANGES__OF, newOf, newOf));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Source getStr_id2()
  {
    return str_id2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStr_id2(Source newStr_id2, NotificationChain msgs)
  {
    Source oldStr_id2 = str_id2;
    str_id2 = newStr_id2;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SiddhiPackage.CONDITION_RANGES__STR_ID2, oldStr_id2, newStr_id2);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStr_id2(Source newStr_id2)
  {
    if (newStr_id2 != str_id2)
    {
      NotificationChain msgs = null;
      if (str_id2 != null)
        msgs = ((InternalEObject)str_id2).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.CONDITION_RANGES__STR_ID2, null, msgs);
      if (newStr_id2 != null)
        msgs = ((InternalEObject)newStr_id2).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SiddhiPackage.CONDITION_RANGES__STR_ID2, null, msgs);
      msgs = basicSetStr_id2(newStr_id2, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SiddhiPackage.CONDITION_RANGES__STR_ID2, newStr_id2, newStr_id2));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ConditionRange> getConRange()
  {
    if (conRange == null)
    {
      conRange = new EObjectContainmentEList<ConditionRange>(ConditionRange.class, this, SiddhiPackage.CONDITION_RANGES__CON_RANGE);
    }
    return conRange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<OR> getOr()
  {
    if (or == null)
    {
      or = new EObjectContainmentEList<OR>(OR.class, this, SiddhiPackage.CONDITION_RANGES__OR);
    }
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SiddhiPackage.CONDITION_RANGES__OF:
        return basicSetOf(null, msgs);
      case SiddhiPackage.CONDITION_RANGES__STR_ID2:
        return basicSetStr_id2(null, msgs);
      case SiddhiPackage.CONDITION_RANGES__CON_RANGE:
        return ((InternalEList<?>)getConRange()).basicRemove(otherEnd, msgs);
      case SiddhiPackage.CONDITION_RANGES__OR:
        return ((InternalEList<?>)getOr()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SiddhiPackage.CONDITION_RANGES__OF:
        return getOf();
      case SiddhiPackage.CONDITION_RANGES__STR_ID2:
        return getStr_id2();
      case SiddhiPackage.CONDITION_RANGES__CON_RANGE:
        return getConRange();
      case SiddhiPackage.CONDITION_RANGES__OR:
        return getOr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SiddhiPackage.CONDITION_RANGES__OF:
        setOf((OF)newValue);
        return;
      case SiddhiPackage.CONDITION_RANGES__STR_ID2:
        setStr_id2((Source)newValue);
        return;
      case SiddhiPackage.CONDITION_RANGES__CON_RANGE:
        getConRange().clear();
        getConRange().addAll((Collection<? extends ConditionRange>)newValue);
        return;
      case SiddhiPackage.CONDITION_RANGES__OR:
        getOr().clear();
        getOr().addAll((Collection<? extends OR>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SiddhiPackage.CONDITION_RANGES__OF:
        setOf((OF)null);
        return;
      case SiddhiPackage.CONDITION_RANGES__STR_ID2:
        setStr_id2((Source)null);
        return;
      case SiddhiPackage.CONDITION_RANGES__CON_RANGE:
        getConRange().clear();
        return;
      case SiddhiPackage.CONDITION_RANGES__OR:
        getOr().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SiddhiPackage.CONDITION_RANGES__OF:
        return of != null;
      case SiddhiPackage.CONDITION_RANGES__STR_ID2:
        return str_id2 != null;
      case SiddhiPackage.CONDITION_RANGES__CON_RANGE:
        return conRange != null && !conRange.isEmpty();
      case SiddhiPackage.CONDITION_RANGES__OR:
        return or != null && !or.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ConditionRangesImpl
