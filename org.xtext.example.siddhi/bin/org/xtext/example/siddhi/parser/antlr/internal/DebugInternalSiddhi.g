/*
 * generated by Xtext 2.11.0
 */
grammar DebugInternalSiddhi;

// Rule SiddhiQL
ruleSiddhiQL:
	ruleExecutionPlan
	*
;

// Rule ExecutionPlan
ruleExecutionPlan:
	ruleAppAnnotation
	*
	(
		(
			(ruleDefinitionStream
			)=>
			ruleDefinitionStream
		)
		    |
		(
			(ruleDefinitionTable
			)=>
			ruleDefinitionTable
		)
		    |
		(
			(ruleDefinitionWindow
			)=>
			ruleDefinitionWindow
		)
		    |
		(
			(ruleDefinitionTrigger
			)=>
			ruleDefinitionTrigger
		)
		    |
		(
			(ruleDefinitionFunction
			)=>
			ruleDefinitionFunction
		)
		    |
		(
			(ruleDefinitionAggregation
			)=>
			ruleDefinitionAggregation
		)
	)
	(
		(';'
		(
			(
				(ruleDefinitionStream
				)=>
				ruleDefinitionStream
			)
			    |
			(
				(ruleDefinitionTable
				)=>
				ruleDefinitionTable
			)
			    |
			(
				(ruleDefinitionWindow
				)=>
				ruleDefinitionWindow
			)
			    |
			(
				(ruleDefinitionTrigger
				)=>
				ruleDefinitionTrigger
			)
			    |
			(
				(ruleDefinitionFunction
				)=>
				ruleDefinitionFunction
			)
			    |
			(
				(ruleDefinitionAggregation
				)=>
				ruleDefinitionAggregation
			)
		)
		)=>
		';'
		(
			(
				(ruleDefinitionStream
				)=>
				ruleDefinitionStream
			)
			    |
			(
				(ruleDefinitionTable
				)=>
				ruleDefinitionTable
			)
			    |
			(
				(ruleDefinitionWindow
				)=>
				ruleDefinitionWindow
			)
			    |
			(
				(ruleDefinitionTrigger
				)=>
				ruleDefinitionTrigger
			)
			    |
			(
				(ruleDefinitionFunction
				)=>
				ruleDefinitionFunction
			)
			    |
			(
				(ruleDefinitionAggregation
				)=>
				ruleDefinitionAggregation
			)
		)
	)*
	(
		(';'
		ruleExecutionElement
		)=>
		';'
		ruleExecutionElement
	)*
	';'?
;

// Rule ExecutionElement
ruleExecutionElement:
	(
		(
			(ruleExecPartition
			)=>
			ruleExecPartition
		)
		    |
		(
			(ruleQuery
			)=>
			ruleQuery
		)
	)
;

// Rule DefinitionStream
ruleDefinitionStream:
	ruleAnnotation
	*
	ruleDEFINE
	(
		ruleSTREAM
		    |
		ruleTABLE
	)
	ruleSource1
	ruleOPEN_PAR
	ruleFeatures
	(
		','
		ruleFeatures
	)*
	ruleCLOSE_PAR
;

// Rule DefinitionTable
ruleDefinitionTable:
	ruleAnnotation
	*
	ruleDEFINE
	ruleTABLE
	ruleSource1
	ruleOPEN_PAR
	ruleFeatures
	(
		','
		ruleFeatures
	)*
	ruleCLOSE_PAR
;

// Rule DefinitionWindow
ruleDefinitionWindow:
	ruleAnnotation
	*
	ruleDEFINE
	ruleWINDOW
	ruleSource1
	ruleOPEN_PAR
	ruleFeatures
	(
		','
		ruleFeatures
	)*
	ruleCLOSE_PAR
	ruleFunctionOperation
	(
		ruleOUTPUT
		ruleOutputEventType
	)?
;

// Rule DefinitionTrigger
ruleDefinitionTrigger:
	ruleDEFINE
	ruleTRIGGER
	ruleTriggerName
	ruleAT
	(
		ruleEVERY
		ruleTimeValue
		    |
		ruleStringValue
	)
;

// Rule DefinitionFunction
ruleDefinitionFunction:
	ruleDEFINE
	ruleFUNCTION
	ruleFunctionName
	ruleOPEN_SQARE_BRACKETS
	ruleLanguageName
	ruleCLOSE_SQARE_BRACKETS
	ruleRETURN
	ruleAttributeType
	ruleFunctionBody
;

// Rule DefinitionAggregation
ruleDefinitionAggregation:
	ruleAnnotation
	*
	ruleDEFINE
	ruleAGGREGATION
	ruleSource1
	ruleFROM
	ruleStandardStream
	ruleGroupByQuerySelection
	ruleAGGREGATE
	(
		ruleBY
		ruleAttributeReference
	)?
	ruleEVERY
	ruleAggregationTime
;

// Rule AggregationTime
ruleAggregationTime:
	(
		ruleAggregationTimeRange
		    |
		ruleaggregation_time_interval
	)
;

// Rule aggregation_time_interval
ruleaggregation_time_interval:
	ruleAggregationTimeDuration
	(
		','
		ruleAggregationTimeDuration
	)*
;

// Rule AggregationTimeDuration
ruleAggregationTimeDuration:
	(
		ruleSECONDS
		    |
		ruleMINUTES
		    |
		ruleHOURS
		    |
		ruleDAYS
		    |
		ruleWEEKS
		    |
		ruleMONTHS
		    |
		ruleYEARS
	)
;

// Rule AggregationTimeRange
ruleAggregationTimeRange:
	ruleAggregationTimeDuration
	ruleTRIPLE_DOT
	ruleAggregationTimeDuration
;

// Rule FunctionName
ruleFunctionName:
	RULE_ID
;

// Rule LanguageName
ruleLanguageName:
	RULE_ID
;

// Rule FunctionBody
ruleFunctionBody:
	RULE_SCRIPT
;

// Rule TriggerName
ruleTriggerName:
	RULE_ID
;

// Rule AppAnnotation
ruleAppAnnotation:
	'@'
	ruleAPP
	':'
	ruleName
	(
		ruleOPEN_PAR
		ruleAnnotationElement
		(
			','
			ruleAnnotationElement
		)*
		ruleCLOSE_PAR
	)?
;

// Rule Annotation
ruleAnnotation:
	'@'
	ruleName
	ruleOPEN_PAR
	(
		ruleAnnotationElement
		    |
		ruleAnnotation
	)
	(
		','
		(
			ruleAnnotationElement
			    |
			ruleAnnotation
		)
	)*
	ruleCLOSE_PAR
;

// Rule AnnotationElement
ruleAnnotationElement:
	(
		rulePropertyName
		'='
	)?
	rulePropertyValue
;

// Rule PropertyValue
rulePropertyValue:
	ruleStringValue
;

// Rule PropertyName
rulePropertyName:
	ruleName
	(
		rulePropertySeparator
		ruleName
	)*
;

// Rule PropertySeparator
rulePropertySeparator:
	(
		ruleDOT
		    |
		ruleMINUS
		    |
		ruleCOL
	)
;

// Rule Features
ruleFeatures:
	ruleIdNew
	ruleAttributeType
;

// Rule AttributeType
ruleAttributeType:
	(
		ruleSTRINGS
		    |
		ruleINTS
		    |
		ruleLONG
		    |
		ruleFLOAT
		    |
		ruleDOUBLE
		    |
		ruleBOOL
		    |
		ruleOBJECT
	)
;

// Rule ExecPartition
ruleExecPartition:
	ruleAnnotation
	*
	rulePARTITION
	ruleWITH
	ruleOPEN_PAR
	rulePartitionWithStream
	(
		','
		rulePartitionWithStream
	)*
	ruleCLOSE_PAR
	ruleBEGIN
	ruleQuery
	ruleQuery
	*
	';'?
	ruleEND
;

// Rule PartitionWithStream
rulePartitionWithStream:
	ruleConditionRanges
	ruleOF
	ruleSource
;

// Rule ConditionRanges
ruleConditionRanges:
	ruleConditionRange
	(
		ruleOR
		ruleConditionRange
	)*
;

// Rule ConditionRange
ruleConditionRange:
	ruleExpression
	ruleAS
	?
	ruleStringValue
	?
;

// Rule Query
ruleQuery:
	ruleAnnotation
	*
	ruleFROM
	ruleQueryInput
	ruleQuerySection
	?
	ruleOutputRate
	?
	ruleQueryOutput
	?
;

// Rule QueryInput
ruleQueryInput:
	(
		(
			(ruleJoinStream
			)=>
			ruleJoinStream
		)
		    |
		(
			(ruleSequenceStream
			)=>
			ruleSequenceStream
		)
		    |
		(
			(rulePatternStream
			)=>
			rulePatternStream
		)
		    |
		ruleAnonymousStream
	)
;

// Rule JoinStream
ruleJoinStream:
	(
		(
			(ruleJoinSource
			ruleJoinSource
			)=>
			ruleJoinSource
			ruleJoinSource
		)
		ruleUNIDIRECTIONAL
		(
			ruleON
			ruleExpression
		)?
		ruleWithinTime
		?
		    |
		(
			(ruleJoinSource
			rulejoins
			)=>
			ruleJoinSource
			rulejoins
		)
		ruleJoinSource
		(
			ruleON
			ruleExpression
		)?
		ruleWithinTime
		?
		    |
		(
			(ruleJoinSource
			ruleUNIDIRECTIONAL
			)=>
			ruleJoinSource
			ruleUNIDIRECTIONAL
		)
		rulejoins
		ruleJoinSource
		(
			ruleON
			ruleExpression
		)?
		ruleWithinTime
		?
		    |
		(
			(ruleStandardStream)=>
			ruleStandardStream
		)
	)
;

// Rule JoinSource
ruleJoinSource:
	ruleMainSource
	(
		ruleAS
		ruleStreamAlias
	)?
;

// Rule StreamAlias
ruleStreamAlias:
	ruleName
;

// Rule joins
rulejoins:
	(
		ruleLEFT
		ruleOUTER
		ruleJOIN
		    |
		ruleRIGHT
		ruleOUTER
		ruleJOIN
		    |
		ruleFULL
		ruleOUTER
		ruleJOIN
		    |
		ruleOUTER
		ruleJOIN
		    |
		ruleINNER?
		ruleJOIN
	)
;

// Rule StandardStream
ruleStandardStream:
	ruleMainSource
	(
		(ruleBasicSourceStreamHandlers
		?
		)=>
		ruleBasicSourceStreamHandlers
		?
	)
;

// Rule MainSource
ruleMainSource:
	ruleSource
	ruleBasicSourceStreamHandlers1
;

// Rule PatternStream
rulePatternStream:
	(
		(
			(ruleEveryPatternSourceChain)=>
			ruleEveryPatternSourceChain
		)
		    |
		(
			(ruleAbsentPatternSourceChain)=>
			ruleAbsentPatternSourceChain
		)
	)
;

// Rule EveryPatternSourceChain
ruleEveryPatternSourceChain:
	ruleEveryPatternSourceChain1
	(
		('->'
		ruleEveryPatternSourceChain1
		)=>
		'->'
		ruleEveryPatternSourceChain1
	)*
;

// Rule EveryPatternSourceChain1
ruleEveryPatternSourceChain1:
	(
		(
			(ruleOPEN_PAR
			ruleEveryPatternSourceChain
			ruleCLOSE_PAR
			ruleWithinTime
			?
			)=>
			ruleOPEN_PAR
			ruleEveryPatternSourceChain
			ruleCLOSE_PAR
			ruleWithinTime
			?
		)
		    |
		rulePatternSourceChain
		    |
		ruleEVERY
		rulePatternSourceChain1
	)
;

// Rule PatternSourceChain
rulePatternSourceChain:
	rulePatternSourceChain1
	(
		('->')=>
		'->'
		rulePatternSourceChain1
	)*
;

// Rule PatternSourceChain1
rulePatternSourceChain1:
	(
		(
			(ruleOPEN_PAR
			rulePatternSourceChain
			ruleCLOSE_PAR
			ruleWithinTime
			?
			)=>
			ruleOPEN_PAR
			rulePatternSourceChain
			ruleCLOSE_PAR
			ruleWithinTime
			?
		)
		    |
		rulePatternSource
		ruleWithinTime
		?
	)
;

// Rule PatternSource
rulePatternSource:
	(
		(
			(ruleLogicalStatefulSource
			)=>
			ruleLogicalStatefulSource
		)
		    |
		(
			(rulePatternCollectionStatefulSource
			)=>
			rulePatternCollectionStatefulSource
		)
		    |
		(
			(ruleStandardStatefulSource
			)=>
			ruleStandardStatefulSource
		)
		    |
		(
			(ruleLogicalAbsentStatefulSource
			)=>
			ruleLogicalAbsentStatefulSource
		)
	)
;

// Rule LogicalStatefulSource
ruleLogicalStatefulSource:
	(
		(
			(ruleStandardStatefulSource
			ruleAND
			)=>
			ruleStandardStatefulSource
			ruleAND
		)
		ruleStandardStatefulSource
		    |
		(
			(ruleStandardStatefulSource
			ruleOR
			)=>
			ruleStandardStatefulSource
			ruleOR
		)
		ruleStandardStatefulSource
	)
;

// Rule PatternCollectionStatefulSource
rulePatternCollectionStatefulSource:
	ruleStandardStatefulSource
	'<'
	ruleCollect
	'>'
;

// Rule Collect
ruleCollect:
	(
		ruleINT_LITERAL
		':'
		ruleINT_LITERAL
		    |
		ruleINT_LITERAL
		':'
		    |
		':'
		ruleINT_LITERAL
		    |
		ruleINT_LITERAL
	)
;

// Rule WithinTime
ruleWithinTime:
	ruleWITHIN
	ruleTimeValue
;

// Rule LogicalAbsentStatefulSource
ruleLogicalAbsentStatefulSource:
	(
		(
			(ruleOPEN_PAR
			ruleLogicalAbsentStatefulSource
			ruleCLOSE_PAR
			)=>
			ruleOPEN_PAR
			ruleLogicalAbsentStatefulSource
			ruleCLOSE_PAR
		)
		    |
		(
			(ruleStandardStatefulSource
			ruleAND
			ruleNOT
			ruleBasicSource
			)=>
			ruleStandardStatefulSource
			ruleAND
			ruleNOT
			ruleBasicSource
		)
		    |
		(
			(ruleNOT
			ruleBasicSource
			ruleAND
			)=>
			ruleNOT
			ruleBasicSource
			ruleAND
		)
		ruleStandardStatefulSource
		    |
		(
			(ruleStandardStatefulSource
			ruleAND
			ruleBasicAbsentPatternSource
			)=>
			ruleStandardStatefulSource
			ruleAND
			ruleBasicAbsentPatternSource
		)
		    |
		(
			(ruleBasicAbsentPatternSource
			ruleAND
			ruleStandardStatefulSource
			)=>
			ruleBasicAbsentPatternSource
			ruleAND
			ruleStandardStatefulSource
		)
		    |
		(
			(ruleBasicAbsentPatternSource
			ruleAND
			ruleBasicAbsentPatternSource
			)=>
			ruleBasicAbsentPatternSource
			ruleAND
			ruleBasicAbsentPatternSource
		)
		    |
		(
			(ruleStandardStatefulSource
			ruleOR
			ruleBasicAbsentPatternSource
			)=>
			ruleStandardStatefulSource
			ruleOR
			ruleBasicAbsentPatternSource
		)
		    |
		(
			(ruleBasicAbsentPatternSource
			ruleOR
			ruleStandardStatefulSource
			)=>
			ruleBasicAbsentPatternSource
			ruleOR
			ruleStandardStatefulSource
		)
		    |
		(
			(ruleBasicAbsentPatternSource
			ruleOR
			ruleBasicAbsentPatternSource
			)=>
			ruleBasicAbsentPatternSource
			ruleOR
			ruleBasicAbsentPatternSource
		)
	)
;

// Rule AbsentPatternSourceChain
ruleAbsentPatternSourceChain:
	(
		(
			(ruleEVERY?
			ruleOPEN_PAR
			ruleAbsentPatternSourceChain
			ruleCLOSE_PAR
			ruleWithinTime
			?
			)=>
			ruleEVERY?
			ruleOPEN_PAR
			ruleAbsentPatternSourceChain
			ruleCLOSE_PAR
			ruleWithinTime
			?
		)
		    |
		ruleEveryAbsentPatternSource
		    |
		(
			(ruleLeftAbsentPatternSource)=>
			ruleLeftAbsentPatternSource
		)
		    |
		(
			(ruleRightAbsentPatternSource)=>
			ruleRightAbsentPatternSource
		)
	)
;

// Rule EveryAbsentPatternSource
ruleEveryAbsentPatternSource:
	(
		(ruleEVERY?
		ruleBasicAbsentPatternSource
		)=>
		ruleEVERY?
		ruleBasicAbsentPatternSource
	)
;

// Rule BasicAbsentPatternSource
ruleBasicAbsentPatternSource:
	(
		(ruleNOT
		ruleBasicSource
		ruleForTime
		)=>
		ruleNOT
		ruleBasicSource
		ruleForTime
	)
;

// Rule ForTime
ruleForTime:
	ruleFOR
	ruleTimeValue
;

// Rule LeftAbsentPatternSource
ruleLeftAbsentPatternSource:
	ruleLeftAbsentPatternSource1
	(
		('->'
		ruleLeftAbsentPatternSource1
		)=>
		'->'
		ruleLeftAbsentPatternSource1
	)*
;

// Rule LeftAbsentPatternSource1
ruleLeftAbsentPatternSource1:
	ruleLeftAbsentPatternSource2
	(
		('->'
		ruleEveryAbsentPatternSource
		)=>
		'->'
		ruleEveryAbsentPatternSource
	)*
;

// Rule LeftAbsentPatternSource2
ruleLeftAbsentPatternSource2:
	(
		(
			(ruleEVERY?
			ruleOPEN_PAR
			ruleLeftAbsentPatternSource
			ruleCLOSE_PAR
			ruleWithinTime
			?
			)=>
			ruleEVERY?
			ruleOPEN_PAR
			ruleLeftAbsentPatternSource
			ruleCLOSE_PAR
			ruleWithinTime
			?
		)
		    |
		(
			(ruleEveryAbsentPatternSource
			'->'
			ruleEveryPatternSourceChain
			)=>
			ruleEveryAbsentPatternSource
			'->'
			ruleEveryPatternSourceChain
		)
		    |
		(
			(ruleEveryPatternSourceChain
			'->'
			ruleLeftAbsentPatternSource
			)=>
			ruleEveryPatternSourceChain
			'->'
			ruleLeftAbsentPatternSource
		)
	)
;

// Rule RightAbsentPatternSource
ruleRightAbsentPatternSource:
	ruleRightAbsentPatternSource1
	(
		('->'
		ruleRightAbsentPatternSource1
		)=>
		'->'
		ruleRightAbsentPatternSource1
	)*
;

// Rule RightAbsentPatternSource1
ruleRightAbsentPatternSource1:
	ruleRightAbsentPatternSource2
	(
		('->'
		ruleEveryAbsentPatternSource
		)=>
		'->'
		ruleEveryAbsentPatternSource
	)*
;

// Rule RightAbsentPatternSource2
ruleRightAbsentPatternSource2:
	(
		(
			(ruleEVERY?
			ruleOPEN_PAR
			ruleRightAbsentPatternSource
			ruleCLOSE_PAR
			ruleWithinTime
			?
			)=>
			ruleEVERY?
			ruleOPEN_PAR
			ruleRightAbsentPatternSource
			ruleCLOSE_PAR
			ruleWithinTime
			?
		)
		    |
		(
			(ruleEveryPatternSourceChain
			'->'
			ruleEveryAbsentPatternSource
			)=>
			ruleEveryPatternSourceChain
			'->'
			ruleEveryAbsentPatternSource
		)
		    |
		(
			(ruleEveryAbsentPatternSource
			'->'
			ruleRightAbsentPatternSource
			)=>
			ruleEveryAbsentPatternSource
			'->'
			ruleRightAbsentPatternSource
		)
	)
;

// Rule SequenceStream
ruleSequenceStream:
	(
		(
			(ruleEverySequenceSourceChain
			)=>
			ruleEverySequenceSourceChain
		)
		    |
		(
			(ruleEveryAbsentSequenceSourceChain
			)=>
			ruleEveryAbsentSequenceSourceChain
		)
	)
;

// Rule EverySequenceSourceChain
ruleEverySequenceSourceChain:
	(
		(ruleEVERY?
		ruleSequenceSource
		ruleWithinTime
		?
		','
		ruleSequenceSourceChain
		)=>
		ruleEVERY?
		ruleSequenceSource
		ruleWithinTime
		?
		','
		ruleSequenceSourceChain
	)
;

// Rule EveryAbsentSequenceSourceChain
ruleEveryAbsentSequenceSourceChain:
	(
		(ruleEVERY?
		ruleAbsentSequenceSourceChain
		','
		ruleSequenceSourceChain
		)=>
		ruleEVERY?
		ruleAbsentSequenceSourceChain
		','
		ruleSequenceSourceChain
	)
;

// Rule AbsentSequenceSourceChain
ruleAbsentSequenceSourceChain:
	(
		(
			(ruleOPEN_PAR
			ruleAbsentSequenceSourceChain
			ruleCLOSE_PAR
			ruleWithinTime
			?
			)=>
			ruleOPEN_PAR
			ruleAbsentSequenceSourceChain
			ruleCLOSE_PAR
			ruleWithinTime
			?
		)
		    |
		(
			(ruleBasicAbsentPatternSource
			)=>
			ruleBasicAbsentPatternSource
		)
		    |
		(
			(ruleLeftAbsentSequenceSource
			)=>
			ruleLeftAbsentSequenceSource
		)
		    |
		(
			(ruleRightAbsentSequenceSource
			)=>
			ruleRightAbsentSequenceSource
		)
	)
;

// Rule LeftAbsentSequenceSource
ruleLeftAbsentSequenceSource:
	ruleLeftAbsentSequenceSource1
	(
		(','
		ruleLeftAbsentSequenceSource1
		)=>
		','
		ruleLeftAbsentSequenceSource1
	)*
;

// Rule LeftAbsentSequenceSource1
ruleLeftAbsentSequenceSource1:
	ruleLeftAbsentSequenceSource2
	(
		(','
		ruleBasicAbsentPatternSource
		)=>
		','
		ruleBasicAbsentPatternSource
	)*
;

// Rule LeftAbsentSequenceSource2
ruleLeftAbsentSequenceSource2:
	(
		(
			(ruleOPEN_PAR
			ruleLeftAbsentSequenceSource
			ruleCLOSE_PAR
			ruleWithinTime
			?
			)=>
			ruleOPEN_PAR
			ruleLeftAbsentSequenceSource
			ruleCLOSE_PAR
			ruleWithinTime
			?
		)
		    |
		(
			(ruleBasicAbsentPatternSource
			','
			ruleSequenceSourceChain
			)=>
			ruleBasicAbsentPatternSource
			','
			ruleSequenceSourceChain
		)
		    |
		(
			(ruleSequenceSourceChain
			','
			ruleLeftAbsentSequenceSource
			)=>
			ruleSequenceSourceChain
			','
			ruleLeftAbsentSequenceSource
		)
	)
;

// Rule RightAbsentSequenceSource
ruleRightAbsentSequenceSource:
	ruleRightAbsentSequenceSource1
	(
		(','
		ruleRightAbsentSequenceSource1
		)=>
		','
		ruleRightAbsentSequenceSource1
	)*
;

// Rule RightAbsentSequenceSource1
ruleRightAbsentSequenceSource1:
	ruleRightAbsentSequenceSource2
	(
		(','
		ruleSequenceSourceChain
		)=>
		','
		ruleSequenceSourceChain
	)*
;

// Rule RightAbsentSequenceSource2
ruleRightAbsentSequenceSource2:
	(
		(
			(ruleOPEN_PAR
			ruleRightAbsentSequenceSource
			ruleCLOSE_PAR
			ruleWithinTime
			?
			)=>
			ruleOPEN_PAR
			ruleRightAbsentSequenceSource
			ruleCLOSE_PAR
			ruleWithinTime
			?
		)
		    |
		(
			(ruleSequenceSourceChain
			','
			ruleBasicAbsentPatternSource
			)=>
			ruleSequenceSourceChain
			','
			ruleBasicAbsentPatternSource
		)
		    |
		(
			(ruleBasicAbsentPatternSource
			','
			ruleRightAbsentSequenceSource
			)=>
			ruleBasicAbsentPatternSource
			','
			ruleRightAbsentSequenceSource
		)
	)
;

// Rule SequenceSourceChain
ruleSequenceSourceChain:
	ruleSequenceSourceChain1
	(
		(','
		ruleSequenceSourceChain1
		)=>
		','
		ruleSequenceSourceChain1
	)*
;

// Rule SequenceSourceChain1
ruleSequenceSourceChain1:
	(
		(
			(ruleOPEN_PAR
			ruleSequenceSourceChain
			ruleCLOSE_PAR
			ruleWithinTime
			?
			)=>
			ruleOPEN_PAR
			ruleSequenceSourceChain
			ruleCLOSE_PAR
			ruleWithinTime
			?
		)
		    |
		ruleSequenceSource
		ruleWithinTime
		?
	)
;

// Rule SequenceSource
ruleSequenceSource:
	(
		(
			(ruleLogicalStatefulSource)=>
			ruleLogicalStatefulSource
		)
		    |
		(
			(ruleSequenceCollectionStatefulSource)=>
			ruleSequenceCollectionStatefulSource
		)
		    |
		(
			(ruleStandardStatefulSource)=>
			ruleStandardStatefulSource
		)
		    |
		(
			(ruleLogicalAbsentStatefulSource)=>
			ruleLogicalAbsentStatefulSource
		)
	)
;

// Rule SequenceCollectionStatefulSource
ruleSequenceCollectionStatefulSource:
	ruleStandardStatefulSource
	(
		'<'
		ruleCollect
		'>'
		    |
		'*'
		    |
		'?'
		    |
		'+'
	)
;

// Rule AnonymousStream
ruleAnonymousStream:
	(
		ruleOPEN_PAR
		ruleAnonymousStream
		ruleCLOSE_PAR
		    |
		ruleFROM
		ruleQueryInput
		ruleQuerySection
		?
		ruleOutputRate
		?
		ruleRETURN
		ruleOutputEventType
		?
	)
;

// Rule OutputRate
ruleOutputRate:
	(
		ruleOUTPUT
		ruleOutputRateType
		?
		ruleEVERY
		(
			ruleTimeValue
			    |
			ruleINT_LITERAL
			ruleEVENTS
		)
		    |
		ruleOUTPUT
		ruleSNAPSHOT
		ruleEVERY
		ruleTimeValue
	)
;

// Rule OutputRateType
ruleOutputRateType:
	(
		ruleALL
		    |
		ruleLAST
		    |
		ruleFIRST
	)
;

// Rule QueryOutput
ruleQueryOutput:
	(
		ruleINSERT
		ruleOutputEventType
		?
		ruleINTO
		ruleSource1
		    |
		ruleDELETE
		ruleSource1
		(
			ruleFOR
			ruleOutputEventType
		)?
		ruleON
		ruleExpression
		    |
		ruleUPDATE
		(
			ruleOR
			ruleINSERT
			ruleINTO
		)?
		ruleSource1
		(
			ruleFOR
			ruleOutputEventType
		)?
		ruleSetClause
		?
		ruleON
		ruleExpression
		    |
		ruleRETURN
		ruleOutputEventType
		?
	)
;

// Rule SetClause
ruleSetClause:
	ruleSET
	ruleSetAssignment
	(
		','
		ruleSetAssignment
	)*
;

// Rule SetAssignment
ruleSetAssignment:
	ruleAttributeReference
	'='
	ruleExpression
;

// Rule OutputEventType
ruleOutputEventType:
	(
		ruleALL
		ruleEVENTS
		    |
		ruleALL
		ruleRAW
		ruleEVENTS
		    |
		ruleEXPIRED
		ruleEVENTS
		    |
		ruleEXPIRED
		ruleRAW
		ruleEVENTS
		    |
		ruleCURRENT?
		ruleEVENTS
	)
;

// Rule BasicSourceStreamHandlers
ruleBasicSourceStreamHandlers:
	ruleBasicSourceStreamHandler
	+
;

// Rule BasicSourceStreamHandlers1
ruleBasicSourceStreamHandlers1:
	(
		(
			('#'?
			ruleOPEN_SQARE_BRACKETS
			ruleExpression
			ruleCLOSE_SQARE_BRACKETS
			)=>
			'#'?
			ruleOPEN_SQARE_BRACKETS
			ruleExpression
			ruleCLOSE_SQARE_BRACKETS
		)
		    |
		(
			('#'
			ruleFunctionOperation
			)=>
			'#'
			ruleFunctionOperation
		)
	)?
	(
		('#'
		ruleWINDOW
		'.'
		ruleFunctionOperation
		)=>
		'#'
		ruleWINDOW
		'.'
		ruleFunctionOperation
	)?
;

// Rule BasicSourceStreamHandler
ruleBasicSourceStreamHandler:
	(
		ruleFilter
		    |
		ruleStreamFunction
	)
;

// Rule Filter
ruleFilter:
	'#'?
	ruleOPEN_SQARE_BRACKETS
	ruleExpression
	ruleCLOSE_SQARE_BRACKETS
;

// Rule StreamFunction
ruleStreamFunction:
	'#'
	ruleFunctionOperation
;

// Rule Expression
ruleExpression:
	ruleMathOperation
;

// Rule FunctionOperation
ruleFunctionOperation:
	(
		ruleFunctionNamespace
		':'
	)?
	ruleFunctionId
	ruleOPEN_PAR
	ruleAttributeList
	?
	ruleCLOSE_PAR
;

// Rule FunctionNamespace
ruleFunctionNamespace:
	ruleIdNew
;

// Rule FunctionId
ruleFunctionId:
	ruleName
;

// Rule AttributeList
ruleAttributeList:
	(
		ruleAttribute
		(
			','
			ruleAttribute
		)*
		    |
		'*'
	)
;

// Rule Attribute
ruleAttribute:
	ruleMathOperation
;

// Rule GroupByQuerySelection
ruleGroupByQuerySelection:
	ruleSELECT
	(
		'*'
		    |
		ruleOutputAttribute
		(
			','
			ruleOutputAttribute
		)*
	)
	ruleGroupBy
	?
;

// Rule QuerySection
ruleQuerySection:
	ruleGroupByQuerySelection
	ruleHavingExpr
	?
;

// Rule OutputAttribute
ruleOutputAttribute:
	(
		ruleOutAttr
		    |
		ruleAttributeReference
	)
;

// Rule OutAttr
ruleOutAttr:
	ruleAttribute
	ruleAS
	ruleIdNew
;

// Rule GroupBy
ruleGroupBy:
	ruleGROUP
	ruleBY
	ruleAttributeReference
	(
		','
		ruleAttributeReference
	)*
;

// Rule HavingExpr
ruleHavingExpr:
	ruleHAVING
	ruleExpression
;

// Rule MathOperation
ruleMathOperation:
	ruleMathLogicalOperation
;

// Rule MathLogicalOperation
ruleMathLogicalOperation:
	ruleMathInOperation
	(
		((
			ruleAND
			    |
			ruleOR
		)
		ruleMathInOperation
		)=>
		(
			ruleAND
			    |
			ruleOR
		)
		ruleMathInOperation
	)*
;

// Rule MathInOperation
ruleMathInOperation:
	ruleMathGtLtOperation
	(
		(ruleIN
		ruleName
		)=>
		ruleIN
		ruleName
	)*
;

// Rule MathGtLtOperation
ruleMathGtLtOperation:
	ruleMathEqualOperation
	(
		((
			'>='
			    |
			'<='
			    |
			'>'
			    |
			'<'
		)
		ruleMathGtLtOperation
		)=>
		(
			'>='
			    |
			'<='
			    |
			'>'
			    |
			'<'
		)
		ruleMathGtLtOperation
	)*
;

// Rule MathEqualOperation
ruleMathEqualOperation:
	ruleMathAddsubOperation
	(
		((
			'=='
			    |
			'!='
		)
		ruleMathAddsubOperation
		)=>
		(
			'=='
			    |
			'!='
		)
		ruleMathAddsubOperation
	)*
;

// Rule MathAddsubOperation
ruleMathAddsubOperation:
	ruleMathDivmulOperation
	(
		((
			'+'
			    |
			'-'
		)
		ruleMathDivmulOperation
		)=>
		(
			'+'
			    |
			'-'
		)
		ruleMathDivmulOperation
	)*
;

// Rule MathDivmulOperation
ruleMathDivmulOperation:
	ruleMathOtherOperations
	(
		((
			'*'
			    |
			'/'
			    |
			'%'
		)
		ruleMathOtherOperations
		)=>
		(
			'*'
			    |
			'/'
			    |
			'%'
		)
		ruleMathOtherOperations
	)*
;

// Rule MathOtherOperations
ruleMathOtherOperations:
	(
		(
			(ruleNOT
			ruleMathOperation
			)=>
			ruleNOT
			ruleMathOperation
		)
		    |
		ruleOPEN_PAR
		ruleMathOperation
		ruleCLOSE_PAR
		    |
		(
			(ruleNullCheck)=>
			ruleNullCheck
		)
		    |
		ruleMathOtherOperations1
	)
;

// Rule NullCheck
ruleNullCheck:
	(
		(
			(ruleStreamReference
			)=>
			ruleStreamReference
		)
		    |
		(
			(ruleAttributeReference
			)=>
			ruleAttributeReference
		)
		    |
		(
			(ruleFunctionOperation
			)=>
			ruleFunctionOperation
		)
	)
	ruleIS
	ruleNULL
;

// Rule StreamReference
ruleStreamReference:
	'#'
	?
	ruleName
	(
		ruleOPEN_SQARE_BRACKETS
		ruleAttributeIndex
		ruleCLOSE_SQARE_BRACKETS
	)?
;

// Rule MathOtherOperations1
ruleMathOtherOperations1:
	(
		ruleConstantValue
		    |
		ruleFunctionOperation
		    |
		ruleAttributeReference
	)
;

// Rule AttributeReference
ruleAttributeReference:
	(
		'#'
		?
		ruleSourceOrEventReference
		(
			ruleOPEN_SQARE_BRACKETS
			ruleAttributeIndex
			ruleCLOSE_SQARE_BRACKETS
		)?
		(
			'#'
			ruleSourceOrEventReference
			(
				ruleOPEN_SQARE_BRACKETS
				ruleAttributeIndex
				ruleCLOSE_SQARE_BRACKETS
			)?
		)?
		'.'
		ruleAttributeNameReference
		    |
		ruleFeaturesOrOutAttrReference
	)
;

// Rule AttributeNameReference
ruleAttributeNameReference:
	ruleIdNew
;

// Rule AttributeIndex
ruleAttributeIndex:
	(
		ruleINT_LITERAL
		    |
		ruleLAST
		(
			'-'
			ruleINT_LITERAL
		)?
	)
;

// Rule StandardStatefulSource
ruleStandardStatefulSource:
	(
		ruleIdNew
		'='
	)?
	ruleBasicSource
;

// Rule SourceOrEventReference
ruleSourceOrEventReference:
	ruleIdNew
;

// Rule BasicSource
ruleBasicSource:
	ruleSource
	ruleBasicSourceStreamHandlers
	?
;

// Rule FeaturesOrOutAttrReference
ruleFeaturesOrOutAttrReference:
	ruleIdNew
;

// Rule ConstantValue
ruleConstantValue:
	(
		ruleBoolValue
		    |
		ruleSignedDoubleValue
		    |
		ruleSignedFloatValue
		    |
		ruleSignedLongValue
		    |
		ruleSignedIntValue
		    |
		ruleTimeValue
		    |
		ruleStringValue
	)
;

// Rule Name
ruleName:
	ruleIdNew
;

// Rule Source
ruleSource:
	ruleIdNew
;

// Rule Source1
ruleSource1:
	'#'
	?
	ruleIdNew
;

// Rule BoolValue
ruleBoolValue:
	(
		ruleTRUE
		    |
		ruleFALSE
	)
;

// Rule SignedDoubleValue
ruleSignedDoubleValue:
	(
		'-'
		    |
		'+'
	)?
	ruleDOUBLE_LITERAL
;

// Rule SignedFloatValue
ruleSignedFloatValue:
	(
		'-'
		    |
		'+'
	)?
	ruleFLOAT_LITERAL
;

// Rule SignedLongValue
ruleSignedLongValue:
	(
		'-'
		    |
		'+'
	)?
	ruleLONG_LITERAL
;

// Rule StringValue
ruleStringValue:
	ruleSTRING_LITERAL
;

// Rule TimeValue
ruleTimeValue:
	(
		ruleYearValue
		ruleMonthValue
		?
		ruleWeekValue
		?
		ruleDayValue
		?
		ruleHourValue
		?
		ruleMinuteValue
		?
		ruleSecondValue
		?
		ruleMillisecondValue
		?
		    |
		ruleMonthValue
		ruleWeekValue
		?
		ruleDayValue
		?
		ruleHourValue
		?
		ruleMinuteValue
		?
		ruleSecondValue
		?
		ruleMillisecondValue
		?
		    |
		ruleWeekValue
		ruleDayValue
		?
		ruleHourValue
		?
		ruleMinuteValue
		?
		ruleSecondValue
		?
		ruleMillisecondValue
		?
		    |
		ruleDayValue
		ruleHourValue
		?
		ruleMinuteValue
		?
		ruleSecondValue
		?
		ruleMillisecondValue
		?
		    |
		ruleHourValue
		ruleMinuteValue
		?
		ruleSecondValue
		?
		ruleMillisecondValue
		?
		    |
		ruleMinuteValue
		ruleSecondValue
		?
		ruleMillisecondValue
		?
		    |
		ruleSecondValue
		ruleMillisecondValue
		?
		    |
		ruleMillisecondValue
	)
;

// Rule YearValue
ruleYearValue:
	ruleINT_LITERAL
	ruleYEARS
;

// Rule MonthValue
ruleMonthValue:
	ruleINT_LITERAL
	ruleMONTHS
;

// Rule WeekValue
ruleWeekValue:
	ruleINT_LITERAL
	ruleWEEKS
;

// Rule DayValue
ruleDayValue:
	ruleINT_LITERAL
	ruleDAYS
;

// Rule HourValue
ruleHourValue:
	ruleINT_LITERAL
	ruleHOURS
;

// Rule MinuteValue
ruleMinuteValue:
	ruleINT_LITERAL
	ruleMINUTES
;

// Rule SecondValue
ruleSecondValue:
	ruleINT_LITERAL
	ruleSECONDS
;

// Rule MillisecondValue
ruleMillisecondValue:
	ruleINT_LITERAL
	ruleMILLISECONDS
;

// Rule SignedIntValue
ruleSignedIntValue:
	(
		'-'
		    |
		'+'
	)?
	ruleINT_LITERAL
;

// Rule STRING_LITERAL
ruleSTRING_LITERAL:
	RULE_STRING
;

// Rule INT_LITERAL
ruleINT_LITERAL:
	ruleDIGIT+
;

// Rule DOUBLE_LITERAL
ruleDOUBLE_LITERAL:
	(
		(
			(ruleDIGIT+
			(
				'.'
				ruleDIGIT*
			)?
			(
				ruleE
				(
					'-'
					    |
					'+'
				)?
				ruleDIGIT+
			)?
			ruleD
			)=>
			ruleDIGIT+
			(
				'.'
				ruleDIGIT*
			)?
			(
				ruleE
				(
					'-'
					    |
					'+'
				)?
				ruleDIGIT+
			)?
			ruleD
		)
		    |
		ruleDIGIT+
		(
			'.'
			ruleDIGIT*
		)?
		ruleE
		(
			'-'
			    |
			'+'
		)?
		ruleDIGIT+
		ruleD
		?
		    |
		(
			(ruleDIGIT*
			'.'
			ruleDIGIT+
			(
				ruleE
				(
					'-'
					    |
					'+'
				)?
				ruleDIGIT+
			)?
			ruleD
			?
			)=>
			ruleDIGIT*
			'.'
			ruleDIGIT+
			(
				ruleE
				(
					'-'
					    |
					'+'
				)?
				ruleDIGIT+
			)?
			ruleD
			?
		)
	)
;

// Rule FLOAT_LITERAL
ruleFLOAT_LITERAL:
	(
		(
			(ruleDIGIT+
			(
				'.'
				ruleDIGIT*
			)?
			(
				ruleE
				(
					'-'
					    |
					'+'
				)?
				ruleDIGIT+
			)?
			ruleF
			)=>
			ruleDIGIT+
			(
				'.'
				ruleDIGIT*
			)?
			(
				ruleE
				(
					'-'
					    |
					'+'
				)?
				ruleDIGIT+
			)?
			ruleF
		)
		    |
		ruleDIGIT*
		'.'
		ruleDIGIT+
		(
			ruleE
			(
				'-'
				    |
				'+'
			)?
			ruleDIGIT+
		)?
		ruleF
	)
;

// Rule LONG_LITERAL
ruleLONG_LITERAL:
	ruleDIGIT+
	ruleL
;

// Rule DIGIT
ruleDIGIT:
	RULE_INT
;

// Rule AS
ruleAS:
	'as'
;

// Rule ON
ruleON:
	'on'
;

// Rule UNIDIRECTIONAL
ruleUNIDIRECTIONAL:
	'unidirectional'
;

// Rule NOT
ruleNOT:
	'not'
;

// Rule EVERY
ruleEVERY:
	'every'
;

// Rule AND
ruleAND:
	'and'
;

// Rule OR
ruleOR:
	'or'
;

// Rule IN
ruleIN:
	'in'
;

// Rule OF
ruleOF:
	'of'
;

// Rule E
ruleE:
	'e'
;

// Rule D
ruleD:
	'd'
;

// Rule F
ruleF:
	'f'
;

// Rule L
ruleL:
	'l'
;

// Rule APP
ruleAPP:
	'app'
;

// Rule STREAM
ruleSTREAM:
	'stream'
;

// Rule DEFINE
ruleDEFINE:
	'define'
;

// Rule TABLE
ruleTABLE:
	'table'
;

// Rule WINDOW
ruleWINDOW:
	'window'
;

// Rule OUTPUT
ruleOUTPUT:
	'output'
;

// Rule STRINGS
ruleSTRINGS:
	'string'
;

// Rule INTS
ruleINTS:
	'int'
;

// Rule LONG
ruleLONG:
	'long'
;

// Rule DOUBLE
ruleDOUBLE:
	'double'
;

// Rule FLOAT
ruleFLOAT:
	'float'
;

// Rule BOOL
ruleBOOL:
	'bool'
;

// Rule OBJECT
ruleOBJECT:
	'object'
;

// Rule ALL
ruleALL:
	'all'
;

// Rule EVENTS
ruleEVENTS:
	'events'
;

// Rule RAW
ruleRAW:
	'raw'
;

// Rule EXPIRED
ruleEXPIRED:
	'expired'
;

// Rule CURRENT
ruleCURRENT:
	'current'
;

// Rule LAST
ruleLAST:
	'last'
;

// Rule IS
ruleIS:
	'is'
;

// Rule NULL
ruleNULL:
	'null'
;

// Rule TRIGGER
ruleTRIGGER:
	'trigger'
;

// Rule AT
ruleAT:
	'at'
;

// Rule FUNCTION
ruleFUNCTION:
	'function'
;

// Rule RETURN
ruleRETURN:
	'return'
;

// Rule FROM
ruleFROM:
	'from'
;

// Rule WITHIN
ruleWITHIN:
	'within'
;

// Rule LEFT
ruleLEFT:
	'left'
;

// Rule RIGHT
ruleRIGHT:
	'right'
;

// Rule FULL
ruleFULL:
	'full'
;

// Rule JOIN
ruleJOIN:
	'join'
;

// Rule INNER
ruleINNER:
	'inner'
;

// Rule OUTER
ruleOUTER:
	'outer'
;

// Rule SELECT
ruleSELECT:
	'select'
;

// Rule GROUP
ruleGROUP:
	'group'
;

// Rule BY
ruleBY:
	'by'
;

// Rule HAVING
ruleHAVING:
	'having'
;

// Rule SNAPSHOT
ruleSNAPSHOT:
	'snapshot'
;

// Rule FIRST
ruleFIRST:
	'first'
;

// Rule INSERT
ruleINSERT:
	'insert'
;

// Rule INTO
ruleINTO:
	'into'
;

// Rule BEGIN
ruleBEGIN:
	'begin'
;

// Rule DELETE
ruleDELETE:
	'delete'
;

// Rule FOR
ruleFOR:
	'for'
;

// Rule UPDATE
ruleUPDATE:
	'update'
;

// Rule END
ruleEND:
	'end'
;

// Rule PARTITION
rulePARTITION:
	'partition'
;

// Rule WITH
ruleWITH:
	'with'
;

// Rule AGGREGATION
ruleAGGREGATION:
	'aggregation'
;

// Rule AGGREGATE
ruleAGGREGATE:
	'aggregate'
;

// Rule SET
ruleSET:
	'set'
;

// Rule PER
rulePER:
	'per'
;

// Rule YEARS
ruleYEARS:
	(
		'year'
		    |
		'years'
	)
;

// Rule MONTHS
ruleMONTHS:
	(
		'month'
		    |
		'months'
	)
;

// Rule WEEKS
ruleWEEKS:
	(
		'week'
		    |
		'weeks'
	)
;

// Rule DAYS
ruleDAYS:
	(
		'day'
		    |
		'days'
	)
;

// Rule HOURS
ruleHOURS:
	(
		'hour'
		    |
		'hours'
	)
;

// Rule MINUTES
ruleMINUTES:
	(
		'minute'
		    |
		'minutes'
		    |
		'min'
	)
;

// Rule SECONDS
ruleSECONDS:
	(
		'second'
		    |
		'seconds'
		    |
		'sec'
	)
;

// Rule MILLISECONDS
ruleMILLISECONDS:
	(
		'millisecond'
		    |
		'milliseconds'
		    |
		'millisec'
	)
;

// Rule FALSE
ruleFALSE:
	'false'
;

// Rule TRUE
ruleTRUE:
	'true'
;

// Rule COL
ruleCOL:
	':'
;

// Rule DOT
ruleDOT:
	'.'
;

// Rule TRIPLE_DOT
ruleTRIPLE_DOT:
	'...'
;

// Rule OPEN_PAR
ruleOPEN_PAR:
	'('
;

// Rule CLOSE_PAR
ruleCLOSE_PAR:
	')'
;

// Rule OPEN_SQARE_BRACKETS
ruleOPEN_SQARE_BRACKETS:
	'['
;

// Rule CLOSE_SQARE_BRACKETS
ruleCLOSE_SQARE_BRACKETS:
	']'
;

// Rule MINUS
ruleMINUS:
	'-'
;

// Rule IdNew
ruleIdNew:
	RULE_ID
;

RULE_SCRIPT : '{' RULE_SCRIPT_ATOM* '}';

fragment RULE_SCRIPT_ATOM : (~(('{'|'}'))|'"' ~('"')* '"'|'//' ~(('\r'|'\n'))*|RULE_SCRIPT);

RULE_ID_QUOTES : '`' ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '`';

RULE_ID : '`'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '`'?;

RULE_INT : '0'..'9';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_SL_COMMENT : '--' ~(('\n'|'\r'))* ('\r'? '\n')? {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');
