grammar org.xtext.example.siddhi.Siddhi with org.eclipse.xtext.common.Terminals

generate siddhi "http://www.xtext.org/example/siddhi/Siddhi"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

SiddhiQL:
	(elements += ExecutionPlan)*
;

ExecutionPlan:
	(appAnn+=AppAnnotation)*( 
	(=>defStream+=DefinitionStream|=>defTable+=DefinitionTable| =>def_window+=DefinitionWindow| =>defTrigger+=DefinitionTrigger|=>defFunction+=DefinitionFunction|=>defAggregation+=DefinitionAggregation)=>(';' 
	(=>defStream+=DefinitionStream|=>defTable+=DefinitionTable| =>def_window+=DefinitionWindow| =>defTrigger+=DefinitionTrigger|=>defFunction+=DefinitionFunction|=>defAggregation+=DefinitionAggregation))*
	=>(';'(exElement+=ExecutionElement))* ';'?) 
;

ExecutionElement:
	=>(execPartition=ExecPartition)|=>(que=Query)
;

DefinitionStream:
	(ann += Annotation)* DEFINE STREAM src=Source1 OPEN_PAR feature += Features (',' feature += Features )* CLOSE_PAR		 		
;

DefinitionTable:
	{DefinitionTable}(ann1 += Annotation)* DEFINE TABLE src=Source1 OPEN_PAR feature += Features (',' feature += Features )* CLOSE_PAR			
;

DefinitionWindow:
	{DefinitionWindow}(ann2 += Annotation)* DEFINE WINDOW src=Source1 OPEN_PAR feature += Features (',' feature += Features )* CLOSE_PAR funcOp = FunctionOperation ( OUTPUT opEventType=OutputEventType )?  
;

DefinitionTrigger:
	{DefinitionTrigger}(DEFINE TRIGGER) tn=TriggerName AT (every=EVERY tv=TimeValue | sv=StringValue) 
;

DefinitionFunction:
	{DefinitionFunction}(DEFINE FUNCTION) fn=FunctionName OPEN_SQARE_BRACKETS ln=LanguageName CLOSE_SQARE_BRACKETS RETURN attr_type=AttributeType func_body=FunctionBody 
;

DefinitionAggregation:
	{DefinitionAggregation}(ann += Annotation)* DEFINE AGGREGATION src=Source1 FROM stdStream=StandardStream groupByQuerySel=GroupByQuerySelection AGGREGATE (BY attrRef=AttributeReference)? eve=EVERY aggrTime=AggregationTime
;

AggregationTime:
	 AggregationTimeRange
    | AggregationTimeInterval
;

AggregationTimeInterval:
      aggrtimeDur+=AggregationTimeDuration (',' aggrtimeDur+=AggregationTimeDuration)*
;
   
AggregationTimeDuration:
     (SECONDS | MINUTES | HOURS | DAYS | WEEKS | MONTHS | YEARS)
;

AggregationTimeRange:
     aggrtimeDur+=AggregationTimeDuration TRIPLE_DOT aggrtimeDur+=AggregationTimeDuration
;

FunctionName:
	id=ID
;

LanguageName:
	id=ID
;

FunctionBody:
	value=SCRIPT
;

terminal SCRIPT:
	'{' SCRIPT_ATOM* '}'
;

terminal SCRIPT_ATOM:
  ! ('{' | '}')
  | '"' (!'"')* '"'
  | '//' !('\r'|'\n')*
  | SCRIPT
;

TriggerName:
	id=ID
;

AppAnnotation:
	 '@' APP ':' name=Name (OPEN_PAR ann5+=AnnotationElement (',' ann5+=AnnotationElement )* CLOSE_PAR )?
;
    
Annotation:
	'@' name = Name (OPEN_PAR (annElement += AnnotationElement | ann += Annotation) 
		( ',' (annElement += AnnotationElement | ann += Annotation))* CLOSE_PAR	)
;

AnnotationElement:
	(propName = PropertyName '=')? propVal = PropertyValue
;

PropertyValue:
	sv=StringValue
;

PropertyName:
	{PropertyName} name+=Name (ps+=PropertySeparator name += Name )*
;

PropertySeparator:
	{PropertySeparator}DOT |{PropertySeparator} MINUS |{PropertySeparator} COL
;

Features:
	(=>(name=IdNew)|=>(nam=Name)) (type = AttributeType)
;

AttributeType:
	{AttributeType}STRINGS |{AttributeType} INTS|{AttributeType} LONG |{AttributeType} FLOAT |{AttributeType} DOUBLE|{AttributeType} BOOL|{AttributeType} OBJECT 
;

Source:
	strId=[Source1|IdNew] 
;

Source1:
	inner='#'? name=IdNew
;

ExecPartition:
	(ann4+=Annotation)* PARTITION WITH OPEN_PAR partWithStream+=PartitionWithStream (',' partWithStream+=PartitionWithStream)* CLOSE_PAR BEGIN (qu+=Query) ( (qu+=Query))* ';'? END
;

PartitionWithStream:
	//attr=Attribute of=OF str_id1=Source //str_id1=StreamId ...
	ConditionRanges of=OF str_id2=Source //str_id2=StreamId
;

ConditionRanges:
	conRange+=ConditionRange (or+=OR conRange+=ConditionRange)*
;

ConditionRange:
	expr=Expression a=AS? sv=StringValue?
;

Query:
	{Query}(ann3 += Annotation)* FROM (qInp = QueryInput )(querySec = QuerySection)? outRate=OutputRate? (qOutput = QueryOutput)
;

QueryOutput:
	INSERT (outEventType = OutputEventType)? INTO (tar = Target)
	|DELETE (tar = Target) (FOR outEventType=OutputEventType)? on=ON (expr=Expression)
	|UPDATE (or=OR INSERT INTO)? (tar=Target) (FOR outEventType=OutputEventType)? setClause=SetClause? on=ON (expr=Expression)
	//|UPDATE (tar=Source1) (FOR outEventType=OutputEventType)? on=ON (expr=Expression)
	|RETURN outEventType=OutputEventType?
;

Target:
	=>(na=Source1)|=>src=Source//|=>(na=Source1)
;

SetClause:
	SET setAssignment+=SetAssignment (',' setAssignment+=SetAssignment)*
;

SetAssignment:
	AttributeReference '=' expression=Expression
;



OutputEventType:
	{OutputEventType}ALL EVENTS |{OutputEventType} ALL RAW EVENTS |{OutputEventType} EXPIRED EVENTS |{OutputEventType} EXPIRED RAW EVENTS |{OutputEventType} CURRENT? EVENTS
;

OutputRate:
	{OutputRate} OUTPUT op_rate_type=OutputRateType? every=EVERY ( tv=TimeValue | INT_LITERAL EVENTS )
    |{OutputRate} OUTPUT SNAPSHOT every=EVERY tv=TimeValue
;

OutputRateType:
	{OutputRateType}ALL
    |{OutputRateType} LAST
    |{OutputRateType}FIRST
;

GroupByQuerySelection:
	{GroupByQuerySelection}(SELECT ('*'| (out_att += OutputAttribute (',' out_att +=OutputAttribute)* ))) (grp_by=GroupBy)?
;

QuerySection:
	{QuerySection} grpByQuerySel=GroupByQuerySelection (having=HavingExpr)? 
;

GroupBy:
	GROUP BY attr_ref+=AttributeReference (',' attr_ref+=AttributeReference)*
;

HavingExpr:
	HAVING expr=Expression
;

OutputAttribute:
	{OutputAttribute} outAttr=OutAttr | {OutputAttribute} attr_ref=AttributeReference 
;

OutAttr:
	attr=Attribute a=AS (name = IdNew)
;

QueryInput:
	{QueryInput}(=>js=JoinStream|=>seqSrcChanin=SequenceStream|=>ps=PatternStream|anonStream=AnonymousStream)
;

SequenceStream:
	=>everySequenceSourceChain=EverySequenceSourceChain
	|=>everyAbsentSequenceSourceChain=EveryAbsentSequenceSourceChain
;

EverySequenceSourceChain:
	=>(EVERY? seqSource=SequenceSource wt=WithinTime?  ',' ssc=SequenceSourceChain)
;

EveryAbsentSequenceSourceChain:
	=>(EVERY? absSeqSrcChain=AbsentSequenceSourceChain  ',' seqSrcChain=SequenceSourceChain)//wt4=WithinTime? ',' seqSrcChain=SequenceSourceChain) //WithinTime ambiguity
;

AbsentSequenceSourceChain:
	=>(OPEN_PAR absentSequenceSourceChain=AbsentSequenceSourceChain CLOSE_PAR wt5=WithinTime?) //WithinTime ambiguity
	|=>basicAbsentPatternSource=BasicAbsentPatternSource
	|=>leftAbsentSequenceSource=LeftAbsentSequenceSource
	|=>rightAbsentSequenceSource=RightAbsentSequenceSource
;

LeftAbsentSequenceSource:
	LeftAbsentSequenceSource1=>({LeftAbsentSequenceSource.left=current} comm=',' right=LeftAbsentSequenceSource1)*
;

LeftAbsentSequenceSource1 returns LeftAbsentSequenceSource:
	LeftAbsentSequenceSource2=>({LeftAbsentSequenceSource1.left=current} comm=',' right=BasicAbsentPatternSource)*
;

LeftAbsentSequenceSource2 returns LeftAbsentSequenceSource:
	=>(op=OPEN_PAR leftAbsentSequenceSource=LeftAbsentSequenceSource cp=CLOSE_PAR wt6=WithinTime?) //WithinTime ambiguity
    |=>(basicAbsentPatternSource=BasicAbsentPatternSource comma=',' sequenceSourceChain=SequenceSourceChain)
    |=>(sequenceSourceChain=SequenceSourceChain comma=',' leftAbsentSequenceSource=LeftAbsentSequenceSource)
;

RightAbsentSequenceSource:
	RightAbsentSequenceSource1=>({RightAbsentSequenceSource.left1=current} comm=',' right1=RightAbsentSequenceSource1)*
;

RightAbsentSequenceSource1 returns RightAbsentSequenceSource:
	RightAbsentSequenceSource2 =>({RightAbsentSequenceSource1.left=current} comm=',' right=SequenceSourceChain)*
;

RightAbsentSequenceSource2 returns RightAbsentSequenceSource:
	=>(op=OPEN_PAR rightAbsentSequenceSource=RightAbsentSequenceSource cp=CLOSE_PAR wt7=WithinTime?)
	|=>(sequenceSourceChain=SequenceSourceChain comma=',' basicAbsentPatternSource=BasicAbsentPatternSource)
	|=>(basicAbsentPatternSource=BasicAbsentPatternSource ',' rightAbsentSequenceSource=RightAbsentSequenceSource)
;

SequenceSourceChain:
	SequenceSourceChain1 =>({SequenceSourceChain.left=current} op=',' right=SequenceSourceChain1)*
;

SequenceSourceChain1 returns SequenceSourceChain:
	=>(OPEN_PAR SequenceSourceChain CLOSE_PAR wt1+=WithinTime?)
	| SequenceSource  wt=WithinTime?
;

SequenceSource:
	=>LogicalStatefulSource|=>SequenceCollectionStatefulSource|=>StandardStatefulSource|=>LogicalAbsentStatefulSource
;

SequenceCollectionStatefulSource:
	StandardStatefulSource ('<' coll=Collect '>'|zero_or_more='*'|zero_or_one='?'|one_or_more='+')
;

AnonymousStream:
	OPEN_PAR AnonymousStream CLOSE_PAR
    |FROM qi=QueryInput qs=QuerySection? out_rate=OutputRate? RETURN op_event_type=OutputEventType?    
;

PatternStream:
	=>EveryPatternSourceChain
	|=>AbsentPatternSourceChain
;

EveryPatternSourceChain:
	EveryPatternSourceChain1 =>({EveryPatternSourceChain.left=current} op= '->' right=EveryPatternSourceChain1)*     
;

EveryPatternSourceChain1 returns EveryPatternSourceChain:
	=>(OPEN_PAR eps=EveryPatternSourceChain CLOSE_PAR wt=WithinTime?)
	|psc=PatternSourceChain 
	//|EVERY psc1=PatternSourceChain1 
	/*|every=EVERY OPEN_PAR psc=PatternSourceChain CLOSE_PAR wt=WithinTime? 
	|every=EVERY ps1=PatternSource wt=WithinTime? */
	|every=EVERY psc=PatternSourceChain1
;

PatternSourceChain:
	PatternSourceChain1 -> ({PatternSourceChain.left=current} op='->' right=PatternSourceChain1)*
;

PatternSourceChain1 returns PatternSourceChain:
	=>(OPEN_PAR psc_2=PatternSourceChain CLOSE_PAR wt=WithinTime?)
	|ps=PatternSource wt=WithinTime?
;

PatternSource:
	=>lss=LogicalStatefulSource|=>pss=PatternCollectionStatefulSource|=>stdss=StandardStatefulSource|=>logicalAbsStatefulSrc=LogicalAbsentStatefulSource
;

LogicalStatefulSource:
	//=>(not=NOT stdSource+=StandardStatefulSource (and=AND stdSource+=StandardStatefulSource) )
    =>(stdSource+=StandardStatefulSource and=AND) stdSource+=StandardStatefulSource
    |=>(stdSource+=StandardStatefulSource or=OR) stdSource+=StandardStatefulSource
;

PatternCollectionStatefulSource:
	StandardStatefulSource '<' coll=Collect '>'
;

Collect:
	{Collect}(start=INT_LITERAL ':' end=INT_LITERAL
    | start=INT_LITERAL ':'
    | ':' end=INT_LITERAL
    | INT_LITERAL)
;

LogicalAbsentStatefulSource:
	=>(OPEN_PAR logicalAbsStatefulSrc=LogicalAbsentStatefulSource CLOSE_PAR)
	|=>(stdSource=StandardStatefulSource and=AND not=NOT bs=BasicSource)
	|=>(NOT bs=BasicSource and=AND) stdSource=StandardStatefulSource
	|=>(stdSource=StandardStatefulSource and=AND basicAbsentPatternSource1=BasicAbsentPatternSource)
	|=>(basicAbsentPatternSource1=BasicAbsentPatternSource and=AND stdSource=StandardStatefulSource)
	|=>(basicAbsentPatternSource2=BasicAbsentPatternSource and=AND basicAbsentPatternSource=BasicAbsentPatternSource)
	|=>(stdSource=StandardStatefulSource o=OR basicAbsentPatternSource1=BasicAbsentPatternSource)
    |=>(basicAbsentPatternSource1=BasicAbsentPatternSource o=OR stdSource=StandardStatefulSource)
    |=>(basicAbsentPatternSource2=BasicAbsentPatternSource o=OR basicAbsentPatternSource=BasicAbsentPatternSource)
;
 
AbsentPatternSourceChain:
	=>(EVERY? OPEN_PAR absentPatternSrcChain=AbsentPatternSourceChain CLOSE_PAR wt1=WithinTime?)
	|EveryAbsentPatternSource
	|=>LeftAbsentPatternSource
	|=>RightAbsentPatternSource
;

EveryAbsentPatternSource:
	=>(EVERY? basicAbsentPS=BasicAbsentPatternSource)
;

BasicAbsentPatternSource:
	=>(NOT basicSrc=BasicSource ft=ForTime)
;

ForTime:
	FOR tv=TimeValue
;

LeftAbsentPatternSource:
	LeftAbsentPatternSource1=>({LeftAbsentPatternSource.left=current} fb1='->' right=LeftAbsentPatternSource1)*
;

LeftAbsentPatternSource1 returns LeftAbsentPatternSource:
	LeftAbsentPatternSource2=>({LeftAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource)*
;

LeftAbsentPatternSource2 returns LeftAbsentPatternSource:
	=>(EVERY? OPEN_PAR leftAbsPS=LeftAbsentPatternSource CLOSE_PAR wt2+=WithinTime?)
	|=>(everyAbsPS=EveryAbsentPatternSource '->' everyPSC=EveryPatternSourceChain)
	|=>(everyPSC=EveryPatternSourceChain '->' leftAbsPatternSrc=LeftAbsentPatternSource)
;

RightAbsentPatternSource:
	RightAbsentPatternSource1 =>({RightAbsentPatternSource.left1=current} fb2='->' right1=RightAbsentPatternSource1)*
;

RightAbsentPatternSource1 returns RightAbsentPatternSource:
	RightAbsentPatternSource2 =>({RightAbsentPatternSource1.left=current} fb='->' right=EveryAbsentPatternSource)*
;

RightAbsentPatternSource2 returns RightAbsentPatternSource:
	=>(EVERY? OPEN_PAR rightAbsPS=RightAbsentPatternSource CLOSE_PAR wt3+=WithinTime?)
	|=>(everyPSC1=EveryPatternSourceChain '->' everyAbsPS1=EveryAbsentPatternSource)
	|=>(everyAbsPS1=EveryAbsentPatternSource '->' rightAbsPS=RightAbsentPatternSource)
;

JoinStream:
	=>(left_source=JoinSource right_source=JoinSource) right_uni=UNIDIRECTIONAL (on=ON expr=Expression)?  (wtr=WithinTimeRange p=Per1)?
	|=>(left_source=JoinSource join=joins) right_source=JoinSource (on=ON expr=Expression)? (wtr=WithinTimeRange p=Per1)?
	|=>(left_source=JoinSource left_uni=UNIDIRECTIONAL) join=joins right_source=JoinSource (on=ON expr=Expression)? (wtr=WithinTimeRange p=Per1)?
	|=>StandardStream
;

WithinTimeRange:
    WITHIN startPattern=Expression (',' endPattern=Expression)?
;

Per1 :
	PER exp=Expression
;

JoinSource:
	MainSource (window = Win)? (a=AS strAlias=StreamAlias)? 
;

StreamAlias:
	=>(name=IdNew) | =>(nam=Name)
;

WithinTime:
	WITHIN tv=TimeValue
;
  
joins:
	{joins} LEFT OUTER JOIN
    |{joins} RIGHT OUTER JOIN
    |{joins} FULL OUTER JOIN
    |{joins} OUTER JOIN
    |{joins} INNER? JOIN
;

StandardStream:
	 MainSource =>((postWindowHandlers = BasicSourceStreamHandlers)?)
;

MainSource:
	//=>(src=Source =>(preWindowHandlers = BasicSourceStreamHandlers)? (=>(window = Win)?))
	src=Source basicSSh=BasicSourceStreamHandlers1
;
/*
 * BasicSource:
	src=Source basic_ss_handlers = BasicSourceStreamHandlers?
;
 */
 
BasicSourceStreamHandlers:
	(basicSsHandler += BasicSourceStreamHandler)+
;

BasicSourceStreamHandlers1:
	{BasicSourceStreamHandlers1}(=>('#'? OPEN_SQARE_BRACKETS exp=Expression CLOSE_SQARE_BRACKETS)|=>('#' fo=FunctionOperation))? =>('#' WINDOW '.' func_op=FunctionOperation)?
;

BasicSourceStreamHandler:
	fil=Filter|sf=StreamFunction
;

Filter:
	'#'? OPEN_SQARE_BRACKETS exp=Expression CLOSE_SQARE_BRACKETS
;

StreamFunction:
	'#' fo=FunctionOperation
;

Win:
	'#' WINDOW '.' func_op=FunctionOperation
;

Expression:
	MathOperation
;

MathOperation:
	mlo=MathLogicalOperation
;

MathLogicalOperation returns MathOperation:
	MathInOperation =>({MathLogicalOperation.left=current} (and=AND | or=OR) right=MathInOperation)* //and,or errors
;

MathInOperation returns MathOperation:
	MathGtLtOperation =>({MathInOperation.left=current} in=IN name=Name)* //in error
;

MathGtLtOperation returns MathOperation:
	MathEqualOperation =>({MathGtLtOperation.left=current} (gt_eq='>='|lt_eq='<='|gt='>'|lt='<') right=MathGtLtOperation)*
;

MathEqualOperation returns MathOperation:
	MathAddsubOperation =>({MathEqualOperation.left=current} (eq='=='|not_eq='!=') right=MathAddsubOperation)*
;

MathAddsubOperation:
	MathDivmulOperation =>({MathAddsubOperation.left=current} (add='+'|substract='-') right=MathDivmulOperation)*
;

MathDivmulOperation:
	MathOtherOperations =>({MathDivmulOperation.left=current} (multiply='*'|devide='/'|mod='%') right=MathOtherOperations)*
;

MathOtherOperations:
	=>({NotOperation} not=NOT op=MathOperation) //not error
	|OPEN_PAR op=MathOperation CLOSE_PAR
	|=>NullCheck
	|lit=Literal                         
;

NullCheck:
	(=>stream_ref=StreamReference | attr_ref=AttributeReference|fo=FunctionOperation) IS NULL
;

StreamReference:
	hash='#'? name=Name (OPEN_SQARE_BRACKETS aatr_index=AttributeIndex CLOSE_SQARE_BRACKETS)?
;

Literal:
	const_val=ConstantValue  
	|fo=FunctionOperation
	|attrRef=AttributeReference                             
;

AttributeReference:
	=>({AttributeReference}name=IdNew)	
	|{AttributeReference} hash1='#'? name1=SourceOrEventReference (OPEN_SQARE_BRACKETSattribute_index1=AttributeIndex CLOSE_SQARE_BRACKETS)? (hash2='#' name2=SourceOrEventReference (OPEN_SQARE_BRACKETSattribute_index2=AttributeIndex CLOSE_SQARE_BRACKETS)?)? '.'  featuresOrAttrRef=FeaturesOrOutAttrReference
	//{AttributeReference} hash1='#'? name1=Source ('['attribute_index1=AttributeIndex']')? (hash2='#' name2=Source ('['attribute_index2=AttributeIndex']')?)? '.'  attr_name=AttributeNameReference
	|=>(featuresOrAttrRef=FeaturesOrOutAttrReference)
;

FeaturesOrOutAttr:
	 Features| OutAttr 
;

FeaturesOrOutAttrReference:
	srcoutAttrref=[FeaturesOrOutAttr|IdNew]
; 

StandardStatefulSource:
	(name = IdNew '=')? src=Source basic_ss_handlers = BasicSourceStreamHandlers?//basic_src=BasicSource?
;

BasicSource:
	src=Source basic_ss_handlers = BasicSourceStreamHandlers?
;

Source1OrStandardStatefulSource:
	StandardStatefulSource|Source1|StreamAlias
;

SourceOrEventReference:
	na=[Source1OrStandardStatefulSource|IdNew]
;

AttributeNameReference:
	attrName1 = [Features|IdNew]
;

AttributeIndex:
	{AttributeIndex}INT_LITERAL|{AttributeIndex} LAST ('-' INT_LITERAL)?
;

ConstantValue:
	{ConstantValue}bv=BoolValue
	|{ConstantValue}sdv=SignedDoubleValue
	|{ConstantValue}sfv=SignedFloatValue
	|{ConstantValue}slv=SignedLongValue
	|{ConstantValue} siv=SignedIntValue
	|{ConstantValue}tv=TimeValue
	|{ConstantValue} sv=StringValue
;

FunctionOperation:
	{FunctionOperation}(funcNamespace=FunctionNamespace ':')? funcId=FunctionId OPEN_PAR (attrList=AttributeList)? CLOSE_PAR
;

FunctionNamespace:
	name=Name
;

FunctionId:
	name=Name
;

AttributeList:
	{AttributeList}((attr += Attribute) (',' attr += Attribute)* ) |{AttributeList}'*'
;

Attribute:
	mathOp=MathOperation
;

Name:
	 na=IdNew|Keyword
; 

BoolValue:
	TRUE|FALSE
;

SignedDoubleValue:
	('-' |'+')? DOUBLE_LITERAL
;

SignedFloatValue:
	('-' |'+')? FLOAT_LITERAL
;

SignedLongValue:
	('-' |'+')? LONG_LITERAL
;

StringValue:
	sl=STRING_LITERAL
;

TimeValue:
	yv=YearValue ( mv=MonthValue)? ( wv=WeekValue)? ( dv=DayValue)? ( hv=HourValue)? ( minv=MinuteValue)? ( secv=SecondValue)?  ( msecv=MillisecondValue)?
	|mv=MonthValue ( wv=WeekValue)? ( dv=DayValue)? ( hv=HourValue)? ( minv=MinuteValue)? ( secv=SecondValue)?  ( msecv=MillisecondValue)?
	|wv=WeekValue ( dv=DayValue)? ( hv=HourValue)? ( minv=MinuteValue)? ( secv=SecondValue)?  ( msecv=MillisecondValue)?
	|dv=DayValue ( hv=HourValue)? ( minv=MinuteValue)? ( secv=SecondValue)?  ( msecv=MillisecondValue)?
	|hv=HourValue ( minv=MinuteValue)? ( secv=SecondValue)?  ( msecv=MillisecondValue)?
	|minv=MinuteValue ( secv=SecondValue)?  ( msecv=MillisecondValue)?
	|sv=SecondValue ( msecv=MillisecondValue)?
	|msecv=MillisecondValue
;

YearValue:
	INT_LITERAL YEARS
;

MonthValue:
	INT_LITERAL MONTHS
;

WeekValue:
	INT_LITERAL WEEKS
;

DayValue:
	INT_LITERAL DAYS
;

HourValue:
	INT_LITERAL HOURS
;

MinuteValue:
	INT_LITERAL MINUTES
;

SecondValue:
	INT_LITERAL SECONDS
;

MillisecondValue:
	INT_LITERAL MILLISECONDS
;

SignedIntValue:
	('-' |'+')? INT_LITERAL
;

STRING_LITERAL:
	STRING
;

INT_LITERAL:
	DIGIT+
;

DOUBLE_LITERAL:
	=>({DOUBLE_LITERAL}DIGIT+ ( '.' DIGIT* )?  ( e=E ('-'|'+')? DIGIT+ )? d=D)
	|{DOUBLE_LITERAL}DIGIT+ ( '.' DIGIT* )?   e=E ('-'|'+')? DIGIT+  d=D?
	|=>({DOUBLE_LITERAL}(DIGIT+)? '.' DIGIT+ ( e=E ('-'|'+')? DIGIT+ )? d=D?)
;

FLOAT_LITERAL:
	=>({FLOAT_LITERAL}DIGIT+ ( '.' DIGIT* )? ( e=E ('-'|'+')? DIGIT+ )? f=F)
	|{FLOAT_LITERAL}(DIGIT+)? '.' DIGIT+ ( e=E ('-'|'+')? DIGIT+ )? f=F
;

LONG_LITERAL:
	DIGIT+ l=L
;

fragment DIGIT:
	INT
;
	
Keyword:
	{Keyword} STREAM 
	|{Keyword} DEFINE 
	|{Keyword} FROM 
	|{Keyword} SELECT 
	|{Keyword} a=AS  
	|{Keyword} INSERT 
	|{Keyword} INTO 
	|{Keyword} ALL 
	|{Keyword} EVENTS  
	|{Keyword} TABLE
	|{Keyword} WINDOW
	|{Keyword} OUTPUT
	|{Keyword} RAW
	|{Keyword} EXPIRED
	|{Keyword} CURRENT
	|{Keyword} RETURN
	|{Keyword} PARTITION  
	|{Keyword} every=EVERY
	|{Keyword} uni=UNIDIRECTIONAL
	|{Keyword} on=ON
	|{Keyword} WITHIN
	|{Keyword} LEFT
	|{Keyword} RIGHT
	|{Keyword} FULL
	|{Keyword} JOIN
	|{Keyword} OUTER
	|{Keyword} INNER
	|{Keyword} YEARS
	|{Keyword} MONTHS
    |{Keyword} WEEKS
    |{Keyword} DAYS
    |{Keyword} HOURS
    |{Keyword} MINUTES
    |{Keyword} SECONDS
    |{Keyword} MILLISECONDS
	|{Keyword} STRINGS
	|{Keyword} INTS 
	|{Keyword} LONG 
	|{Keyword} FLOAT 
	|{Keyword} DOUBLE 
	|{Keyword} BOOL 
	|{Keyword} OBJECT
	|{Keyword} and=AND
	|{Keyword} or=OR
	|{Keyword} not=NOT
	|{Keyword} IS 
	|{Keyword} NULL 
	|{Keyword} SNAPSHOT
	|{Keyword} LAST
	|{Keyword} FIRST
	|{Keyword} GROUP
	|{Keyword} BY
	|{Keyword} HAVING
	|{Keyword} WITH
	|{Keyword} of=OF 
	|{Keyword} BEGIN
	|{Keyword} END
	|{Keyword} DELETE
	|{Keyword} FOR
	|{Keyword} TRUE
	|{Keyword} FALSE
	|{Keyword} UPDATE
;

AS: (a='as');
ON: (on='on');
UNIDIRECTIONAL: (unidirectional='unidirectional');
NOT: (not1='not');
EVERY: (every1='every' );
AND: (and='and');
OR: (or+='or');
IN: (in='in');
OF: (of='of');
E: (e='e');
D: (d='d');
F: (f='f');
L: (l='l');
APP: (ap='app');
fragment STREAM: (str='stream');
fragment DEFINE: (define='define' );
fragment TABLE: (table='table' );
fragment WINDOW: (window='window' );
fragment OUTPUT: (output='output' );
fragment STRINGS: (string='string');
fragment INTS: (int='int');
fragment LONG: (long='long');
fragment DOUBLE: (double='double');
fragment FLOAT: (float='float');
fragment BOOL: (bool='bool');
fragment OBJECT: (object='object');
fragment ALL: (all='all' );
fragment EVENTS: (events='events' );
fragment RAW: (raw='raw' );
fragment EXPIRED: (expired='expired' );
fragment CURRENT: (currt='current' );
//fragment AND: (and='and');
//fragment OR: (or+='or');
//fragment IN: (in='in');
//fragment NOT: (not='not');
fragment LAST: (last='last');
fragment IS : (is='is');
fragment NULL: (null='null');
fragment TRIGGER: (trigger='trigger' );
fragment AT: (at='at' );
//fragment EVERY: (every='every' );
fragment FUNCTION: (function='function');
fragment RETURN: (return='return');
fragment FROM: (from='from');
//fragment UNIDIRECTIONAL: (unidirectional='unidirectional');
//fragment ON: (on='on');
fragment WITHIN: (within='within' );
fragment LEFT: (left='left');
fragment RIGHT: (right='right');
fragment FULL: (full='full');
fragment JOIN: (join='join');
fragment INNER: (inner='inner');
fragment OUTER: (outer='outer');
//fragment AS: (a='as');
fragment SELECT: (select='select');
fragment GROUP: (group='group');
fragment BY: (by='by');
fragment HAVING: (having='having');
fragment SNAPSHOT: (snapshot='snapshot');
fragment FIRST: (first='first');
fragment INSERT: (insert='insert' );
fragment INTO: (into='into' );
//fragment OF: (of='of');
fragment BEGIN: (begin='begin');
fragment PLAN: (plan='plan');
fragment DELETE: (delete='delete');
fragment FOR: (for='for');
fragment UPDATE: (update='update');
fragment END: (end='end');
fragment PARTITION: (partition='partition');
fragment WITH: (wi='with');
fragment AGGREGATION: (aggre='aggregation');
fragment AGGREGATE: (agrregate='aggregate');
fragment SET: (set='set');
fragment PER: (per='per');

fragment YEARS: (year='year' |years= 'years' );
fragment MONTHS: (month='month' |months= 'months');
fragment WEEKS: (week='week' | weeks='weeks');
fragment DAYS: (day='day' | days='days');
fragment HOURS: (hour='hour' | hours='hours');
fragment MINUTES: (minute='minute' | minutes='minutes' |min= 'min');
fragment SECONDS: (second='second' |seconds= 'seconds' | sec='sec');
fragment MILLISECONDS: (millisecond='millisecond' |milliseconds= 'milliseconds' | millisec='millisec');
fragment FALSE: (fals='false');
fragment TRUE: (tr='true');
//fragment D: (d='d');
//fragment E: (e='e');
//fragment F: (f='f');
//fragment L: (l='l');


COL : ':';
SCOL : ';';
DOT : '.';
TRIPLE_DOT : '...';
OPEN_PAR : '(';
CLOSE_PAR : ')';
OPEN_SQARE_BRACKETS : '[';
CLOSE_SQARE_BRACKETS : ']';
COMMA : ',';
ASSIGN : '=';
STAR : '*';
PLUS : '+';
QUESTION: '?';
MINUS : '-';
DIV : '/';
MOD : '%';
LT : '<';
LT_EQ : '<=';
GT : '>';
GT_EQ : '>=';
EQ : '==';
NOT_EQ : '!=';
AT_SYMBOL: '@';
FOLLOWED_BY:'->';
HASH:'#';

IdNew: ID;//| ID_QUOTES;
/*
terminal ID_QUOTES: 
    '`'('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '`' ;
 */
@Override 
terminal ID:
	'`'? ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')* '`'?
; 

@Override 
terminal INT returns ecore::EInt: 
    ('0'..'9')
;	

@Override 
terminal ML_COMMENT: 
    '/*' -> '*/ ';
   
@Override 
terminal SL_COMMENT: 
    '--' !('\n'|'\r')* ('\r'? '\n')?;
    
@Override 
terminal WS: 
    (' '|'\t'|'\r'|'\n')+;
    
@Override 
terminal ANY_OTHER: 
    .
;

@Override
terminal STRING	: 
	'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' 
	|"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	|'"""'(.* )*'"""'
	//| '\'' ( !('\u0000'..'\u001f' | '\''| '\"' ) )* '\''
	//|'"' ( !('\u0000'..'\u001f'  |'\"') )* '"'  
; 
