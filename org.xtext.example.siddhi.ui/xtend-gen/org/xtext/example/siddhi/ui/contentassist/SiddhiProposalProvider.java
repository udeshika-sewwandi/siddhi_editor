/**
 * generated by Xtext 2.11.0
 */
package org.xtext.example.siddhi.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.xtext.example.siddhi.ui.contentassist.AbstractSiddhiProposalProvider;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class SiddhiProposalProvider extends AbstractSiddhiProposalProvider {
  @Override
  public void completePARTITION_Partition(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("partition with (attribute of type)begin from eventStream insert into outputStream  end;", context));
    super.completePARTITION_Partition(model, assignment, context, acceptor);
  }
  
  @Override
  public void complete_OPEN_PAR(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("()", context));
    super.complete_OPEN_PAR(model, ruleCall, context, acceptor);
  }
  
  @Override
  public void complete_OPEN_SQARE_BRACKETS(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("[]", context));
    super.complete_OPEN_SQARE_BRACKETS(model, ruleCall, context, acceptor);
  }
  
  @Override
  public void complete_LT(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("<>", context));
    super.complete_LT(model, ruleCall, context, acceptor);
  }
  
  @Override
  public void completeFROM_From(final EObject model, final Assignment assignment, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("from eventStream insert into outputStream", context));
    super.completeFROM_From(model, assignment, context, acceptor);
  }
  
  @Override
  public void complete_FunctionId(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("function_name () as id", context));
    super.complete_FunctionId(model, ruleCall, context, acceptor);
  }
}
