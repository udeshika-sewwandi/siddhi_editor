/*
 * generated by Xtext 2.11.0
 */
package org.xtext.example.siddhi.ui.contentassist

import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.RuleCall;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
class SiddhiProposalProvider extends AbstractSiddhiProposalProvider {
	
	//override the abstract methods to customize the proposals shown in the editor
	override void completePARTITION_Partition(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("partition with (attribute of type)begin from eventStream insert into outputStream  end;",context))
        super.completePARTITION_Partition(model, assignment, context, acceptor)
	}
	
	override void complete_OPEN_PAR(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("()",context))
        super.complete_OPEN_PAR(model, ruleCall, context, acceptor)
	}
	override void complete_OPEN_SQARE_BRACKETS(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("[]",context))
        super.complete_OPEN_SQARE_BRACKETS(model, ruleCall, context, acceptor)
	}
	override void complete_LT(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("<>",context))
        super.complete_LT(model, ruleCall, context, acceptor)
	}
	
	override void completeFROM_From(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("from eventStream insert into outputStream",context))
        super.completeFROM_From(model, assignment, context, acceptor)
	}
	override void complete_FunctionId(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal("function_name () as id",context))
        super.complete_FunctionId(model, ruleCall, context, acceptor)
	}
}
